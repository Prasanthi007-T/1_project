
RTOSTEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004560  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080046f0  080046f0  000146f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800476c  0800476c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800476c  0800476c  0001476c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004774  08004774  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004774  08004774  00014774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004778  08004778  00014778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800477c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00012e18  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012e2c  20012e2c  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f65d  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000276f  00000000  00000000  0002f6a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f38  00000000  00000000  00031e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e00  00000000  00000000  00032d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f9ec  00000000  00000000  00033b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010a95  00000000  00000000  00053534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5d0b  00000000  00000000  00063fc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00129cd4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003ea0  00000000  00000000  00129d24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080046d8 	.word	0x080046d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	080046d8 	.word	0x080046d8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <SetOutput>:

void SetOutput(GPIO_TypeDef *gpio,uint32_t pin)



{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
 80004dc:	6039      	str	r1, [r7, #0]



	gpio->MODER|=(1<<(pin*2));
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	683a      	ldr	r2, [r7, #0]
 80004e4:	0052      	lsls	r2, r2, #1
 80004e6:	2101      	movs	r1, #1
 80004e8:	fa01 f202 	lsl.w	r2, r1, r2
 80004ec:	431a      	orrs	r2, r3
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	601a      	str	r2, [r3, #0]



	gpio->MODER&=~(1<<((pin*2)+1));
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	683a      	ldr	r2, [r7, #0]
 80004f8:	0052      	lsls	r2, r2, #1
 80004fa:	3201      	adds	r2, #1
 80004fc:	2101      	movs	r1, #1
 80004fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000502:	43d2      	mvns	r2, r2
 8000504:	401a      	ands	r2, r3
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	601a      	str	r2, [r3, #0]



}
 800050a:	bf00      	nop
 800050c:	370c      	adds	r7, #12
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr

08000516 <SetBit>:

void SetBit(GPIO_TypeDef *gpio,uint32_t pin)



{
 8000516:	b480      	push	{r7}
 8000518:	b083      	sub	sp, #12
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
 800051e:	6039      	str	r1, [r7, #0]



	gpio->ODR|=(1<<pin);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	695b      	ldr	r3, [r3, #20]
 8000524:	2101      	movs	r1, #1
 8000526:	683a      	ldr	r2, [r7, #0]
 8000528:	fa01 f202 	lsl.w	r2, r1, r2
 800052c:	431a      	orrs	r2, r3
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	615a      	str	r2, [r3, #20]



}
 8000532:	bf00      	nop
 8000534:	370c      	adds	r7, #12
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr

0800053e <ClrBit>:

void ClrBit(GPIO_TypeDef *gpio,uint32_t pin)



{
 800053e:	b480      	push	{r7}
 8000540:	b083      	sub	sp, #12
 8000542:	af00      	add	r7, sp, #0
 8000544:	6078      	str	r0, [r7, #4]
 8000546:	6039      	str	r1, [r7, #0]



	gpio->ODR&=~(1<<pin);
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	695b      	ldr	r3, [r3, #20]
 800054c:	2101      	movs	r1, #1
 800054e:	683a      	ldr	r2, [r7, #0]
 8000550:	fa01 f202 	lsl.w	r2, r1, r2
 8000554:	43d2      	mvns	r2, r2
 8000556:	401a      	ands	r2, r3
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	615a      	str	r2, [r3, #20]



}
 800055c:	bf00      	nop
 800055e:	370c      	adds	r7, #12
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr

08000568 <DelayLcd>:
*/

#include  "cmn.h"

void DelayLcd(void)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
	uint32_t i=0;
 800056e:	2300      	movs	r3, #0
 8000570:	607b      	str	r3, [r7, #4]
	for(i=0;i<16800;i++);
 8000572:	2300      	movs	r3, #0
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	e002      	b.n	800057e <DelayLcd+0x16>
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	3301      	adds	r3, #1
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	f244 129f 	movw	r2, #16799	; 0x419f
 8000584:	4293      	cmp	r3, r2
 8000586:	d9f7      	bls.n	8000578 <DelayLcd+0x10>
}
 8000588:	bf00      	nop
 800058a:	bf00      	nop
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
	...

08000598 <LcdInit>:

void LcdInit(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |=(RCC_AHB1ENR_GPIOAEN);
 800059c:	4b1c      	ldr	r3, [pc, #112]	; (8000610 <LcdInit+0x78>)
 800059e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a0:	4a1b      	ldr	r2, [pc, #108]	; (8000610 <LcdInit+0x78>)
 80005a2:	f043 0301 	orr.w	r3, r3, #1
 80005a6:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |=(RCC_AHB1ENR_GPIOBEN);
 80005a8:	4b19      	ldr	r3, [pc, #100]	; (8000610 <LcdInit+0x78>)
 80005aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ac:	4a18      	ldr	r2, [pc, #96]	; (8000610 <LcdInit+0x78>)
 80005ae:	f043 0302 	orr.w	r3, r3, #2
 80005b2:	6313      	str	r3, [r2, #48]	; 0x30
	SetOutput(PORT_RS,PIN_RS);
 80005b4:	2100      	movs	r1, #0
 80005b6:	4817      	ldr	r0, [pc, #92]	; (8000614 <LcdInit+0x7c>)
 80005b8:	f7ff ff8c 	bl	80004d4 <SetOutput>
	SetOutput(PORT_EN,PIN_EN);
 80005bc:	2101      	movs	r1, #1
 80005be:	4815      	ldr	r0, [pc, #84]	; (8000614 <LcdInit+0x7c>)
 80005c0:	f7ff ff88 	bl	80004d4 <SetOutput>
	SetOutput(PORT_D4,PIN_D4);
 80005c4:	210c      	movs	r1, #12
 80005c6:	4814      	ldr	r0, [pc, #80]	; (8000618 <LcdInit+0x80>)
 80005c8:	f7ff ff84 	bl	80004d4 <SetOutput>
	SetOutput(PORT_D5,PIN_D5);
 80005cc:	210d      	movs	r1, #13
 80005ce:	4812      	ldr	r0, [pc, #72]	; (8000618 <LcdInit+0x80>)
 80005d0:	f7ff ff80 	bl	80004d4 <SetOutput>
	SetOutput(PORT_D6,PIN_D6);
 80005d4:	210e      	movs	r1, #14
 80005d6:	4810      	ldr	r0, [pc, #64]	; (8000618 <LcdInit+0x80>)
 80005d8:	f7ff ff7c 	bl	80004d4 <SetOutput>
	SetOutput(PORT_D7,PIN_D7);
 80005dc:	210f      	movs	r1, #15
 80005de:	480e      	ldr	r0, [pc, #56]	; (8000618 <LcdInit+0x80>)
 80005e0:	f7ff ff78 	bl	80004d4 <SetOutput>

	LcdFxn(0,0x33);
 80005e4:	2133      	movs	r1, #51	; 0x33
 80005e6:	2000      	movs	r0, #0
 80005e8:	f000 f818 	bl	800061c <LcdFxn>
	LcdFxn(0,0x32);
 80005ec:	2132      	movs	r1, #50	; 0x32
 80005ee:	2000      	movs	r0, #0
 80005f0:	f000 f814 	bl	800061c <LcdFxn>
	LcdFxn(0,0x28);
 80005f4:	2128      	movs	r1, #40	; 0x28
 80005f6:	2000      	movs	r0, #0
 80005f8:	f000 f810 	bl	800061c <LcdFxn>
	LcdFxn(0,0x0c);
 80005fc:	210c      	movs	r1, #12
 80005fe:	2000      	movs	r0, #0
 8000600:	f000 f80c 	bl	800061c <LcdFxn>
	LcdFxn(0,0x01);
 8000604:	2101      	movs	r1, #1
 8000606:	2000      	movs	r0, #0
 8000608:	f000 f808 	bl	800061c <LcdFxn>
}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}
 8000610:	40023800 	.word	0x40023800
 8000614:	40020000 	.word	0x40020000
 8000618:	40020400 	.word	0x40020400

0800061c <LcdFxn>:

void LcdFxn(uint8_t cmd,uint8_t val)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	460a      	mov	r2, r1
 8000626:	71fb      	strb	r3, [r7, #7]
 8000628:	4613      	mov	r3, r2
 800062a:	71bb      	strb	r3, [r7, #6]

	if(val&(1<<7))
 800062c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000630:	2b00      	cmp	r3, #0
 8000632:	da04      	bge.n	800063e <LcdFxn+0x22>
		SetBit(PORT_D7,PIN_D7);
 8000634:	210f      	movs	r1, #15
 8000636:	484f      	ldr	r0, [pc, #316]	; (8000774 <LcdFxn+0x158>)
 8000638:	f7ff ff6d 	bl	8000516 <SetBit>
 800063c:	e003      	b.n	8000646 <LcdFxn+0x2a>
	else
		ClrBit(PORT_D7,PIN_D7);
 800063e:	210f      	movs	r1, #15
 8000640:	484c      	ldr	r0, [pc, #304]	; (8000774 <LcdFxn+0x158>)
 8000642:	f7ff ff7c 	bl	800053e <ClrBit>

	if(val&(1<<6))
 8000646:	79bb      	ldrb	r3, [r7, #6]
 8000648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800064c:	2b00      	cmp	r3, #0
 800064e:	d004      	beq.n	800065a <LcdFxn+0x3e>
		SetBit(PORT_D6,PIN_D6);
 8000650:	210e      	movs	r1, #14
 8000652:	4848      	ldr	r0, [pc, #288]	; (8000774 <LcdFxn+0x158>)
 8000654:	f7ff ff5f 	bl	8000516 <SetBit>
 8000658:	e003      	b.n	8000662 <LcdFxn+0x46>
	else
		ClrBit(PORT_D6,PIN_D6);
 800065a:	210e      	movs	r1, #14
 800065c:	4845      	ldr	r0, [pc, #276]	; (8000774 <LcdFxn+0x158>)
 800065e:	f7ff ff6e 	bl	800053e <ClrBit>

	if(val&(1<<5))
 8000662:	79bb      	ldrb	r3, [r7, #6]
 8000664:	f003 0320 	and.w	r3, r3, #32
 8000668:	2b00      	cmp	r3, #0
 800066a:	d004      	beq.n	8000676 <LcdFxn+0x5a>
		SetBit(PORT_D5,PIN_D5);
 800066c:	210d      	movs	r1, #13
 800066e:	4841      	ldr	r0, [pc, #260]	; (8000774 <LcdFxn+0x158>)
 8000670:	f7ff ff51 	bl	8000516 <SetBit>
 8000674:	e003      	b.n	800067e <LcdFxn+0x62>
	else
		ClrBit(PORT_D5,PIN_D5);
 8000676:	210d      	movs	r1, #13
 8000678:	483e      	ldr	r0, [pc, #248]	; (8000774 <LcdFxn+0x158>)
 800067a:	f7ff ff60 	bl	800053e <ClrBit>

	if(val&(1<<4))
 800067e:	79bb      	ldrb	r3, [r7, #6]
 8000680:	f003 0310 	and.w	r3, r3, #16
 8000684:	2b00      	cmp	r3, #0
 8000686:	d004      	beq.n	8000692 <LcdFxn+0x76>
		SetBit(PORT_D4,PIN_D4);
 8000688:	210c      	movs	r1, #12
 800068a:	483a      	ldr	r0, [pc, #232]	; (8000774 <LcdFxn+0x158>)
 800068c:	f7ff ff43 	bl	8000516 <SetBit>
 8000690:	e003      	b.n	800069a <LcdFxn+0x7e>
	else
		ClrBit(PORT_D4,PIN_D4);
 8000692:	210c      	movs	r1, #12
 8000694:	4837      	ldr	r0, [pc, #220]	; (8000774 <LcdFxn+0x158>)
 8000696:	f7ff ff52 	bl	800053e <ClrBit>

	if(cmd)   SetBit(PORT_RS,PIN_RS);
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d004      	beq.n	80006aa <LcdFxn+0x8e>
 80006a0:	2100      	movs	r1, #0
 80006a2:	4835      	ldr	r0, [pc, #212]	; (8000778 <LcdFxn+0x15c>)
 80006a4:	f7ff ff37 	bl	8000516 <SetBit>
 80006a8:	e003      	b.n	80006b2 <LcdFxn+0x96>
	else
		ClrBit(PORT_RS,PIN_RS);
 80006aa:	2100      	movs	r1, #0
 80006ac:	4832      	ldr	r0, [pc, #200]	; (8000778 <LcdFxn+0x15c>)
 80006ae:	f7ff ff46 	bl	800053e <ClrBit>

	SetBit(PORT_EN,PIN_EN);
 80006b2:	2101      	movs	r1, #1
 80006b4:	4830      	ldr	r0, [pc, #192]	; (8000778 <LcdFxn+0x15c>)
 80006b6:	f7ff ff2e 	bl	8000516 <SetBit>
	DelayLcd();
 80006ba:	f7ff ff55 	bl	8000568 <DelayLcd>
	ClrBit(PORT_EN,PIN_EN);
 80006be:	2101      	movs	r1, #1
 80006c0:	482d      	ldr	r0, [pc, #180]	; (8000778 <LcdFxn+0x15c>)
 80006c2:	f7ff ff3c 	bl	800053e <ClrBit>
	DelayLcd();
 80006c6:	f7ff ff4f 	bl	8000568 <DelayLcd>


	if(val&(1<<3))
 80006ca:	79bb      	ldrb	r3, [r7, #6]
 80006cc:	f003 0308 	and.w	r3, r3, #8
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d004      	beq.n	80006de <LcdFxn+0xc2>
		SetBit(PORT_D7,PIN_D7);
 80006d4:	210f      	movs	r1, #15
 80006d6:	4827      	ldr	r0, [pc, #156]	; (8000774 <LcdFxn+0x158>)
 80006d8:	f7ff ff1d 	bl	8000516 <SetBit>
 80006dc:	e003      	b.n	80006e6 <LcdFxn+0xca>
	else
		ClrBit(PORT_D7,PIN_D7);
 80006de:	210f      	movs	r1, #15
 80006e0:	4824      	ldr	r0, [pc, #144]	; (8000774 <LcdFxn+0x158>)
 80006e2:	f7ff ff2c 	bl	800053e <ClrBit>

	if(val&(1<<2))
 80006e6:	79bb      	ldrb	r3, [r7, #6]
 80006e8:	f003 0304 	and.w	r3, r3, #4
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d004      	beq.n	80006fa <LcdFxn+0xde>
		SetBit(PORT_D6,PIN_D6);
 80006f0:	210e      	movs	r1, #14
 80006f2:	4820      	ldr	r0, [pc, #128]	; (8000774 <LcdFxn+0x158>)
 80006f4:	f7ff ff0f 	bl	8000516 <SetBit>
 80006f8:	e003      	b.n	8000702 <LcdFxn+0xe6>
	else
		ClrBit(PORT_D6,PIN_D6);
 80006fa:	210e      	movs	r1, #14
 80006fc:	481d      	ldr	r0, [pc, #116]	; (8000774 <LcdFxn+0x158>)
 80006fe:	f7ff ff1e 	bl	800053e <ClrBit>

	if(val&(1<<1))
 8000702:	79bb      	ldrb	r3, [r7, #6]
 8000704:	f003 0302 	and.w	r3, r3, #2
 8000708:	2b00      	cmp	r3, #0
 800070a:	d004      	beq.n	8000716 <LcdFxn+0xfa>
		SetBit(PORT_D5,PIN_D5);
 800070c:	210d      	movs	r1, #13
 800070e:	4819      	ldr	r0, [pc, #100]	; (8000774 <LcdFxn+0x158>)
 8000710:	f7ff ff01 	bl	8000516 <SetBit>
 8000714:	e003      	b.n	800071e <LcdFxn+0x102>
	else
		ClrBit(PORT_D5,PIN_D5);
 8000716:	210d      	movs	r1, #13
 8000718:	4816      	ldr	r0, [pc, #88]	; (8000774 <LcdFxn+0x158>)
 800071a:	f7ff ff10 	bl	800053e <ClrBit>

	if(val&(1<<0))
 800071e:	79bb      	ldrb	r3, [r7, #6]
 8000720:	f003 0301 	and.w	r3, r3, #1
 8000724:	2b00      	cmp	r3, #0
 8000726:	d004      	beq.n	8000732 <LcdFxn+0x116>
		SetBit(PORT_D4,PIN_D4);
 8000728:	210c      	movs	r1, #12
 800072a:	4812      	ldr	r0, [pc, #72]	; (8000774 <LcdFxn+0x158>)
 800072c:	f7ff fef3 	bl	8000516 <SetBit>
 8000730:	e003      	b.n	800073a <LcdFxn+0x11e>
	else
		ClrBit(PORT_D4,PIN_D4);
 8000732:	210c      	movs	r1, #12
 8000734:	480f      	ldr	r0, [pc, #60]	; (8000774 <LcdFxn+0x158>)
 8000736:	f7ff ff02 	bl	800053e <ClrBit>

	if(cmd)
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d004      	beq.n	800074a <LcdFxn+0x12e>
		SetBit(PORT_RS,PIN_RS);
 8000740:	2100      	movs	r1, #0
 8000742:	480d      	ldr	r0, [pc, #52]	; (8000778 <LcdFxn+0x15c>)
 8000744:	f7ff fee7 	bl	8000516 <SetBit>
 8000748:	e003      	b.n	8000752 <LcdFxn+0x136>
	else
		ClrBit(PORT_RS,PIN_RS);
 800074a:	2100      	movs	r1, #0
 800074c:	480a      	ldr	r0, [pc, #40]	; (8000778 <LcdFxn+0x15c>)
 800074e:	f7ff fef6 	bl	800053e <ClrBit>

	SetBit(PORT_EN,PIN_EN);
 8000752:	2101      	movs	r1, #1
 8000754:	4808      	ldr	r0, [pc, #32]	; (8000778 <LcdFxn+0x15c>)
 8000756:	f7ff fede 	bl	8000516 <SetBit>
	DelayLcd();
 800075a:	f7ff ff05 	bl	8000568 <DelayLcd>
	ClrBit(PORT_EN,PIN_EN);
 800075e:	2101      	movs	r1, #1
 8000760:	4805      	ldr	r0, [pc, #20]	; (8000778 <LcdFxn+0x15c>)
 8000762:	f7ff feec 	bl	800053e <ClrBit>
	DelayLcd();
 8000766:	f7ff feff 	bl	8000568 <DelayLcd>

}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40020400 	.word	0x40020400
 8000778:	40020000 	.word	0x40020000

0800077c <lprint>:

void lprint(uint8_t add, char *str)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	6039      	str	r1, [r7, #0]
 8000786:	71fb      	strb	r3, [r7, #7]
   uint8_t  i=0;
 8000788:	2300      	movs	r3, #0
 800078a:	73fb      	strb	r3, [r7, #15]
   LcdFxn(0,add);
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	4619      	mov	r1, r3
 8000790:	2000      	movs	r0, #0
 8000792:	f7ff ff43 	bl	800061c <LcdFxn>

   while(str[i]!=0)
 8000796:	e00d      	b.n	80007b4 <lprint+0x38>
   {
	   LcdFxn(1,str[i]);
 8000798:	7bfb      	ldrb	r3, [r7, #15]
 800079a:	683a      	ldr	r2, [r7, #0]
 800079c:	4413      	add	r3, r2
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	4619      	mov	r1, r3
 80007a2:	2001      	movs	r0, #1
 80007a4:	f7ff ff3a 	bl	800061c <LcdFxn>
	   str++;
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	3301      	adds	r3, #1
 80007ac:	603b      	str	r3, [r7, #0]
	   if(i>16)
 80007ae:	7bfb      	ldrb	r3, [r7, #15]
 80007b0:	2b10      	cmp	r3, #16
 80007b2:	d806      	bhi.n	80007c2 <lprint+0x46>
   while(str[i]!=0)
 80007b4:	7bfb      	ldrb	r3, [r7, #15]
 80007b6:	683a      	ldr	r2, [r7, #0]
 80007b8:	4413      	add	r3, r2
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d1eb      	bne.n	8000798 <lprint+0x1c>
		   break;
   }
}
 80007c0:	e000      	b.n	80007c4 <lprint+0x48>
		   break;
 80007c2:	bf00      	nop
}
 80007c4:	bf00      	nop
 80007c6:	3710      	adds	r7, #16
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <main>:
TaskHandle_t Task1Handle;
TaskHandle_t Task2Handle;
TaskHandle_t Task3Handle;

int main(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af02      	add	r7, sp, #8



	HAL_Init();
 80007d2:	f000 fa55 	bl	8000c80 <HAL_Init>
  SystemClock_Config();
 80007d6:	f000 f8a9 	bl	800092c <SystemClock_Config>
  MX_GPIO_Init();
 80007da:	f000 f905 	bl	80009e8 <MX_GPIO_Init>
  LcdInit();
 80007de:	f7ff fedb 	bl	8000598 <LcdInit>

  // Create tasks
  xTaskCreate(Task1, "Task1", 128, NULL, 1, &Task1Handle);
 80007e2:	4b15      	ldr	r3, [pc, #84]	; (8000838 <main+0x6c>)
 80007e4:	9301      	str	r3, [sp, #4]
 80007e6:	2301      	movs	r3, #1
 80007e8:	9300      	str	r3, [sp, #0]
 80007ea:	2300      	movs	r3, #0
 80007ec:	2280      	movs	r2, #128	; 0x80
 80007ee:	4913      	ldr	r1, [pc, #76]	; (800083c <main+0x70>)
 80007f0:	4813      	ldr	r0, [pc, #76]	; (8000840 <main+0x74>)
 80007f2:	f001 ffe9 	bl	80027c8 <xTaskCreate>
  xTaskCreate(Task2, "Task2", 128, NULL, 2, &Task2Handle);
 80007f6:	4b13      	ldr	r3, [pc, #76]	; (8000844 <main+0x78>)
 80007f8:	9301      	str	r3, [sp, #4]
 80007fa:	2302      	movs	r3, #2
 80007fc:	9300      	str	r3, [sp, #0]
 80007fe:	2300      	movs	r3, #0
 8000800:	2280      	movs	r2, #128	; 0x80
 8000802:	4911      	ldr	r1, [pc, #68]	; (8000848 <main+0x7c>)
 8000804:	4811      	ldr	r0, [pc, #68]	; (800084c <main+0x80>)
 8000806:	f001 ffdf 	bl	80027c8 <xTaskCreate>
  xTaskCreate(Task3, "Task3", 128, NULL, 3, &Task3Handle);
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <main+0x84>)
 800080c:	9301      	str	r3, [sp, #4]
 800080e:	2303      	movs	r3, #3
 8000810:	9300      	str	r3, [sp, #0]
 8000812:	2300      	movs	r3, #0
 8000814:	2280      	movs	r2, #128	; 0x80
 8000816:	490f      	ldr	r1, [pc, #60]	; (8000854 <main+0x88>)
 8000818:	480f      	ldr	r0, [pc, #60]	; (8000858 <main+0x8c>)
 800081a:	f001 ffd5 	bl	80027c8 <xTaskCreate>

  // Start with only Task1, suspend others
  vTaskSuspend(Task2Handle);
 800081e:	4b09      	ldr	r3, [pc, #36]	; (8000844 <main+0x78>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4618      	mov	r0, r3
 8000824:	f002 f96e 	bl	8002b04 <vTaskSuspend>
  vTaskSuspend(Task3Handle);
 8000828:	4b09      	ldr	r3, [pc, #36]	; (8000850 <main+0x84>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4618      	mov	r0, r3
 800082e:	f002 f969 	bl	8002b04 <vTaskSuspend>

  vTaskStartScheduler();
 8000832:	f002 fabf 	bl	8002db4 <vTaskStartScheduler>

  while (1) {}
 8000836:	e7fe      	b.n	8000836 <main+0x6a>
 8000838:	20000030 	.word	0x20000030
 800083c:	080046f0 	.word	0x080046f0
 8000840:	0800085d 	.word	0x0800085d
 8000844:	20000034 	.word	0x20000034
 8000848:	080046f8 	.word	0x080046f8
 800084c:	080008ad 	.word	0x080008ad
 8000850:	20000038 	.word	0x20000038
 8000854:	08004700 	.word	0x08004700
 8000858:	080008f9 	.word	0x080008f9

0800085c <Task1>:
}

/* Task 1 - PC6 LED */
void Task1(void *pvParameters)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  while (1)
  {
    lprint(0x80, "Running Buzzer  ");
 8000864:	490e      	ldr	r1, [pc, #56]	; (80008a0 <Task1+0x44>)
 8000866:	2080      	movs	r0, #128	; 0x80
 8000868:	f7ff ff88 	bl	800077c <lprint>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800086c:	2201      	movs	r2, #1
 800086e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000872:	480c      	ldr	r0, [pc, #48]	; (80008a4 <Task1+0x48>)
 8000874:	f000 fcc4 	bl	8001200 <HAL_GPIO_WritePin>
    vTaskDelay(pdMS_TO_TICKS(500));
 8000878:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800087c:	f002 f90e 	bl	8002a9c <vTaskDelay>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8000880:	2200      	movs	r2, #0
 8000882:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000886:	4807      	ldr	r0, [pc, #28]	; (80008a4 <Task1+0x48>)
 8000888:	f000 fcba 	bl	8001200 <HAL_GPIO_WritePin>

    vTaskResume(Task2Handle);   // Resume Task2
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <Task1+0x4c>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4618      	mov	r0, r3
 8000892:	f002 fa09 	bl	8002ca8 <vTaskResume>
    vTaskSuspend(NULL);         // Suspend self
 8000896:	2000      	movs	r0, #0
 8000898:	f002 f934 	bl	8002b04 <vTaskSuspend>
    lprint(0x80, "Running Buzzer  ");
 800089c:	e7e2      	b.n	8000864 <Task1+0x8>
 800089e:	bf00      	nop
 80008a0:	08004708 	.word	0x08004708
 80008a4:	40020800 	.word	0x40020800
 80008a8:	20000034 	.word	0x20000034

080008ac <Task2>:
  }
}

/* Task 2 - PB13 LED */
void Task2(void *pvParameters)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  while (1)
  {
    lprint(0x80, "Blinking LED   ");
 80008b4:	490d      	ldr	r1, [pc, #52]	; (80008ec <Task2+0x40>)
 80008b6:	2080      	movs	r0, #128	; 0x80
 80008b8:	f7ff ff60 	bl	800077c <lprint>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80008bc:	2200      	movs	r2, #0
 80008be:	2140      	movs	r1, #64	; 0x40
 80008c0:	480b      	ldr	r0, [pc, #44]	; (80008f0 <Task2+0x44>)
 80008c2:	f000 fc9d 	bl	8001200 <HAL_GPIO_WritePin>
    vTaskDelay(pdMS_TO_TICKS(1000));
 80008c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008ca:	f002 f8e7 	bl	8002a9c <vTaskDelay>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 80008ce:	2201      	movs	r2, #1
 80008d0:	2140      	movs	r1, #64	; 0x40
 80008d2:	4807      	ldr	r0, [pc, #28]	; (80008f0 <Task2+0x44>)
 80008d4:	f000 fc94 	bl	8001200 <HAL_GPIO_WritePin>

    vTaskResume(Task3Handle);   // Resume Task3
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <Task2+0x48>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4618      	mov	r0, r3
 80008de:	f002 f9e3 	bl	8002ca8 <vTaskResume>
    vTaskSuspend(NULL);         // Suspend self
 80008e2:	2000      	movs	r0, #0
 80008e4:	f002 f90e 	bl	8002b04 <vTaskSuspend>
    lprint(0x80, "Blinking LED   ");
 80008e8:	e7e4      	b.n	80008b4 <Task2+0x8>
 80008ea:	bf00      	nop
 80008ec:	0800471c 	.word	0x0800471c
 80008f0:	40020800 	.word	0x40020800
 80008f4:	20000038 	.word	0x20000038

080008f8 <Task3>:
  }
}

/* Task 3 - PB14 LED */
void Task3(void *pvParameters)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  while (1)
  {
    lprint(0x80, "Running LCD   ");
 8000900:	4908      	ldr	r1, [pc, #32]	; (8000924 <Task3+0x2c>)
 8000902:	2080      	movs	r0, #128	; 0x80
 8000904:	f7ff ff3a 	bl	800077c <lprint>
    //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
   vTaskDelay(pdMS_TO_TICKS(2000));
 8000908:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800090c:	f002 f8c6 	bl	8002a9c <vTaskDelay>
   //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);

    vTaskResume(Task1Handle);   // Resume Task1 (loop back)
 8000910:	4b05      	ldr	r3, [pc, #20]	; (8000928 <Task3+0x30>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4618      	mov	r0, r3
 8000916:	f002 f9c7 	bl	8002ca8 <vTaskResume>
    vTaskSuspend(NULL);         // Suspend self
 800091a:	2000      	movs	r0, #0
 800091c:	f002 f8f2 	bl	8002b04 <vTaskSuspend>
    lprint(0x80, "Running LCD   ");
 8000920:	e7ee      	b.n	8000900 <Task3+0x8>
 8000922:	bf00      	nop
 8000924:	0800472c 	.word	0x0800472c
 8000928:	20000030 	.word	0x20000030

0800092c <SystemClock_Config>:
  }
}

void SystemClock_Config(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b094      	sub	sp, #80	; 0x50
 8000930:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000932:	f107 0320 	add.w	r3, r7, #32
 8000936:	2230      	movs	r2, #48	; 0x30
 8000938:	2100      	movs	r1, #0
 800093a:	4618      	mov	r0, r3
 800093c:	f003 fec4 	bl	80046c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000940:	f107 030c 	add.w	r3, r7, #12
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000950:	2300      	movs	r3, #0
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	4b22      	ldr	r3, [pc, #136]	; (80009e0 <SystemClock_Config+0xb4>)
 8000956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000958:	4a21      	ldr	r2, [pc, #132]	; (80009e0 <SystemClock_Config+0xb4>)
 800095a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095e:	6413      	str	r3, [r2, #64]	; 0x40
 8000960:	4b1f      	ldr	r3, [pc, #124]	; (80009e0 <SystemClock_Config+0xb4>)
 8000962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000968:	60bb      	str	r3, [r7, #8]
 800096a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800096c:	2300      	movs	r3, #0
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	4b1c      	ldr	r3, [pc, #112]	; (80009e4 <SystemClock_Config+0xb8>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a1b      	ldr	r2, [pc, #108]	; (80009e4 <SystemClock_Config+0xb8>)
 8000976:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800097a:	6013      	str	r3, [r2, #0]
 800097c:	4b19      	ldr	r3, [pc, #100]	; (80009e4 <SystemClock_Config+0xb8>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000988:	2302      	movs	r3, #2
 800098a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800098c:	2301      	movs	r3, #1
 800098e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000990:	2310      	movs	r3, #16
 8000992:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000994:	2300      	movs	r3, #0
 8000996:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000998:	f107 0320 	add.w	r3, r7, #32
 800099c:	4618      	mov	r0, r3
 800099e:	f000 fc49 	bl	8001234 <HAL_RCC_OscConfig>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <SystemClock_Config+0x80>
  {
    Error_Handler();
 80009a8:	f000 f864 	bl	8000a74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ac:	230f      	movs	r3, #15
 80009ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009b0:	2300      	movs	r3, #0
 80009b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009bc:	2300      	movs	r3, #0
 80009be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009c0:	f107 030c 	add.w	r3, r7, #12
 80009c4:	2100      	movs	r1, #0
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 feac 	bl	8001724 <HAL_RCC_ClockConfig>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80009d2:	f000 f84f 	bl	8000a74 <Error_Handler>
  }
}
 80009d6:	bf00      	nop
 80009d8:	3750      	adds	r7, #80	; 0x50
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40023800 	.word	0x40023800
 80009e4:	40007000 	.word	0x40007000

080009e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009fc:	2300      	movs	r3, #0
 80009fe:	603b      	str	r3, [r7, #0]
 8000a00:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <MX_GPIO_Init+0x60>)
 8000a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a04:	4a10      	ldr	r2, [pc, #64]	; (8000a48 <MX_GPIO_Init+0x60>)
 8000a06:	f043 0304 	orr.w	r3, r3, #4
 8000a0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0c:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <MX_GPIO_Init+0x60>)
 8000a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a10:	f003 0304 	and.w	r3, r3, #4
 8000a14:	603b      	str	r3, [r7, #0]
 8000a16:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_9, GPIO_PIN_RESET);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000a1e:	480b      	ldr	r0, [pc, #44]	; (8000a4c <MX_GPIO_Init+0x64>)
 8000a20:	f000 fbee 	bl	8001200 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC6 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000a24:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a28:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a32:	2300      	movs	r3, #0
 8000a34:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4804      	ldr	r0, [pc, #16]	; (8000a4c <MX_GPIO_Init+0x64>)
 8000a3c:	f000 fa44 	bl	8000ec8 <HAL_GPIO_Init>

}
 8000a40:	bf00      	nop
 8000a42:	3718      	adds	r7, #24
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	40020800 	.word	0x40020800

08000a50 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a04      	ldr	r2, [pc, #16]	; (8000a70 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d101      	bne.n	8000a66 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a62:	f000 f92f 	bl	8000cc4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40001000 	.word	0x40001000

08000a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a78:	b672      	cpsid	i
}
 8000a7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <Error_Handler+0x8>
	...

08000a80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	607b      	str	r3, [r7, #4]
 8000a8a:	4b10      	ldr	r3, [pc, #64]	; (8000acc <HAL_MspInit+0x4c>)
 8000a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8e:	4a0f      	ldr	r2, [pc, #60]	; (8000acc <HAL_MspInit+0x4c>)
 8000a90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a94:	6453      	str	r3, [r2, #68]	; 0x44
 8000a96:	4b0d      	ldr	r3, [pc, #52]	; (8000acc <HAL_MspInit+0x4c>)
 8000a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	603b      	str	r3, [r7, #0]
 8000aa6:	4b09      	ldr	r3, [pc, #36]	; (8000acc <HAL_MspInit+0x4c>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	4a08      	ldr	r2, [pc, #32]	; (8000acc <HAL_MspInit+0x4c>)
 8000aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab2:	4b06      	ldr	r3, [pc, #24]	; (8000acc <HAL_MspInit+0x4c>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	40023800 	.word	0x40023800

08000ad0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08e      	sub	sp, #56	; 0x38
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000adc:	2300      	movs	r3, #0
 8000ade:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	4b33      	ldr	r3, [pc, #204]	; (8000bb4 <HAL_InitTick+0xe4>)
 8000ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae8:	4a32      	ldr	r2, [pc, #200]	; (8000bb4 <HAL_InitTick+0xe4>)
 8000aea:	f043 0310 	orr.w	r3, r3, #16
 8000aee:	6413      	str	r3, [r2, #64]	; 0x40
 8000af0:	4b30      	ldr	r3, [pc, #192]	; (8000bb4 <HAL_InitTick+0xe4>)
 8000af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af4:	f003 0310 	and.w	r3, r3, #16
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000afc:	f107 0210 	add.w	r2, r7, #16
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	4611      	mov	r1, r2
 8000b06:	4618      	mov	r0, r3
 8000b08:	f000 ffd8 	bl	8001abc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b0c:	6a3b      	ldr	r3, [r7, #32]
 8000b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d103      	bne.n	8000b1e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b16:	f000 ffbd 	bl	8001a94 <HAL_RCC_GetPCLK1Freq>
 8000b1a:	6378      	str	r0, [r7, #52]	; 0x34
 8000b1c:	e004      	b.n	8000b28 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b1e:	f000 ffb9 	bl	8001a94 <HAL_RCC_GetPCLK1Freq>
 8000b22:	4603      	mov	r3, r0
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b2a:	4a23      	ldr	r2, [pc, #140]	; (8000bb8 <HAL_InitTick+0xe8>)
 8000b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b30:	0c9b      	lsrs	r3, r3, #18
 8000b32:	3b01      	subs	r3, #1
 8000b34:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b36:	4b21      	ldr	r3, [pc, #132]	; (8000bbc <HAL_InitTick+0xec>)
 8000b38:	4a21      	ldr	r2, [pc, #132]	; (8000bc0 <HAL_InitTick+0xf0>)
 8000b3a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b3c:	4b1f      	ldr	r3, [pc, #124]	; (8000bbc <HAL_InitTick+0xec>)
 8000b3e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b42:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b44:	4a1d      	ldr	r2, [pc, #116]	; (8000bbc <HAL_InitTick+0xec>)
 8000b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b48:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b4a:	4b1c      	ldr	r3, [pc, #112]	; (8000bbc <HAL_InitTick+0xec>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b50:	4b1a      	ldr	r3, [pc, #104]	; (8000bbc <HAL_InitTick+0xec>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b56:	4b19      	ldr	r3, [pc, #100]	; (8000bbc <HAL_InitTick+0xec>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b5c:	4817      	ldr	r0, [pc, #92]	; (8000bbc <HAL_InitTick+0xec>)
 8000b5e:	f000 ffdf 	bl	8001b20 <HAL_TIM_Base_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b68:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d11b      	bne.n	8000ba8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b70:	4812      	ldr	r0, [pc, #72]	; (8000bbc <HAL_InitTick+0xec>)
 8000b72:	f001 f82f 	bl	8001bd4 <HAL_TIM_Base_Start_IT>
 8000b76:	4603      	mov	r3, r0
 8000b78:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b7c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d111      	bne.n	8000ba8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b84:	2036      	movs	r0, #54	; 0x36
 8000b86:	f000 f991 	bl	8000eac <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2b0f      	cmp	r3, #15
 8000b8e:	d808      	bhi.n	8000ba2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000b90:	2200      	movs	r2, #0
 8000b92:	6879      	ldr	r1, [r7, #4]
 8000b94:	2036      	movs	r0, #54	; 0x36
 8000b96:	f000 f96d 	bl	8000e74 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b9a:	4a0a      	ldr	r2, [pc, #40]	; (8000bc4 <HAL_InitTick+0xf4>)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6013      	str	r3, [r2, #0]
 8000ba0:	e002      	b.n	8000ba8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ba8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3738      	adds	r7, #56	; 0x38
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	431bde83 	.word	0x431bde83
 8000bbc:	2000003c 	.word	0x2000003c
 8000bc0:	40001000 	.word	0x40001000
 8000bc4:	20000004 	.word	0x20000004

08000bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <NMI_Handler+0x4>

08000bce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <HardFault_Handler+0x4>

08000bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <MemManage_Handler+0x4>

08000bda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bde:	e7fe      	b.n	8000bde <BusFault_Handler+0x4>

08000be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <UsageFault_Handler+0x4>

08000be6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000bf8:	4802      	ldr	r0, [pc, #8]	; (8000c04 <TIM6_DAC_IRQHandler+0x10>)
 8000bfa:	f001 f85b 	bl	8001cb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	2000003c 	.word	0x2000003c

08000c08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <SystemInit+0x20>)
 8000c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c12:	4a05      	ldr	r2, [pc, #20]	; (8000c28 <SystemInit+0x20>)
 8000c14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c30:	480d      	ldr	r0, [pc, #52]	; (8000c68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c32:	490e      	ldr	r1, [pc, #56]	; (8000c6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c34:	4a0e      	ldr	r2, [pc, #56]	; (8000c70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c38:	e002      	b.n	8000c40 <LoopCopyDataInit>

08000c3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3e:	3304      	adds	r3, #4

08000c40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c44:	d3f9      	bcc.n	8000c3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c46:	4a0b      	ldr	r2, [pc, #44]	; (8000c74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c48:	4c0b      	ldr	r4, [pc, #44]	; (8000c78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c4c:	e001      	b.n	8000c52 <LoopFillZerobss>

08000c4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c50:	3204      	adds	r2, #4

08000c52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c54:	d3fb      	bcc.n	8000c4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c56:	f7ff ffd7 	bl	8000c08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c5a:	f003 fd03 	bl	8004664 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c5e:	f7ff fdb5 	bl	80007cc <main>
  bx  lr    
 8000c62:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c6c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000c70:	0800477c 	.word	0x0800477c
  ldr r2, =_sbss
 8000c74:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000c78:	20012e2c 	.word	0x20012e2c

08000c7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c7c:	e7fe      	b.n	8000c7c <ADC_IRQHandler>
	...

08000c80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c84:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <HAL_Init+0x40>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a0d      	ldr	r2, [pc, #52]	; (8000cc0 <HAL_Init+0x40>)
 8000c8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c90:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <HAL_Init+0x40>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a0a      	ldr	r2, [pc, #40]	; (8000cc0 <HAL_Init+0x40>)
 8000c96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c9c:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <HAL_Init+0x40>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a07      	ldr	r2, [pc, #28]	; (8000cc0 <HAL_Init+0x40>)
 8000ca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ca6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca8:	2003      	movs	r0, #3
 8000caa:	f000 f8d8 	bl	8000e5e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cae:	200f      	movs	r0, #15
 8000cb0:	f7ff ff0e 	bl	8000ad0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cb4:	f7ff fee4 	bl	8000a80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cb8:	2300      	movs	r3, #0
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40023c00 	.word	0x40023c00

08000cc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <HAL_IncTick+0x20>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <HAL_IncTick+0x24>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	4a04      	ldr	r2, [pc, #16]	; (8000ce8 <HAL_IncTick+0x24>)
 8000cd6:	6013      	str	r3, [r2, #0]
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	20000008 	.word	0x20000008
 8000ce8:	20000084 	.word	0x20000084

08000cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf0:	4b03      	ldr	r3, [pc, #12]	; (8000d00 <HAL_GetTick+0x14>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	20000084 	.word	0x20000084

08000d04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <__NVIC_SetPriorityGrouping+0x44>)
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d1a:	68ba      	ldr	r2, [r7, #8]
 8000d1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d20:	4013      	ands	r3, r2
 8000d22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d36:	4a04      	ldr	r2, [pc, #16]	; (8000d48 <__NVIC_SetPriorityGrouping+0x44>)
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	60d3      	str	r3, [r2, #12]
}
 8000d3c:	bf00      	nop
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d50:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <__NVIC_GetPriorityGrouping+0x18>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	0a1b      	lsrs	r3, r3, #8
 8000d56:	f003 0307 	and.w	r3, r3, #7
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	db0b      	blt.n	8000d92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	f003 021f 	and.w	r2, r3, #31
 8000d80:	4907      	ldr	r1, [pc, #28]	; (8000da0 <__NVIC_EnableIRQ+0x38>)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	095b      	lsrs	r3, r3, #5
 8000d88:	2001      	movs	r0, #1
 8000d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	e000e100 	.word	0xe000e100

08000da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	6039      	str	r1, [r7, #0]
 8000dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	db0a      	blt.n	8000dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	490c      	ldr	r1, [pc, #48]	; (8000df0 <__NVIC_SetPriority+0x4c>)
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	0112      	lsls	r2, r2, #4
 8000dc4:	b2d2      	uxtb	r2, r2
 8000dc6:	440b      	add	r3, r1
 8000dc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dcc:	e00a      	b.n	8000de4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	4908      	ldr	r1, [pc, #32]	; (8000df4 <__NVIC_SetPriority+0x50>)
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	f003 030f 	and.w	r3, r3, #15
 8000dda:	3b04      	subs	r3, #4
 8000ddc:	0112      	lsls	r2, r2, #4
 8000dde:	b2d2      	uxtb	r2, r2
 8000de0:	440b      	add	r3, r1
 8000de2:	761a      	strb	r2, [r3, #24]
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	e000e100 	.word	0xe000e100
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b089      	sub	sp, #36	; 0x24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	f1c3 0307 	rsb	r3, r3, #7
 8000e12:	2b04      	cmp	r3, #4
 8000e14:	bf28      	it	cs
 8000e16:	2304      	movcs	r3, #4
 8000e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	3304      	adds	r3, #4
 8000e1e:	2b06      	cmp	r3, #6
 8000e20:	d902      	bls.n	8000e28 <NVIC_EncodePriority+0x30>
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	3b03      	subs	r3, #3
 8000e26:	e000      	b.n	8000e2a <NVIC_EncodePriority+0x32>
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	43da      	mvns	r2, r3
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	401a      	ands	r2, r3
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e40:	f04f 31ff 	mov.w	r1, #4294967295
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4a:	43d9      	mvns	r1, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e50:	4313      	orrs	r3, r2
         );
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3724      	adds	r7, #36	; 0x24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b082      	sub	sp, #8
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f7ff ff4c 	bl	8000d04 <__NVIC_SetPriorityGrouping>
}
 8000e6c:	bf00      	nop
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
 8000e80:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e82:	2300      	movs	r3, #0
 8000e84:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e86:	f7ff ff61 	bl	8000d4c <__NVIC_GetPriorityGrouping>
 8000e8a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e8c:	687a      	ldr	r2, [r7, #4]
 8000e8e:	68b9      	ldr	r1, [r7, #8]
 8000e90:	6978      	ldr	r0, [r7, #20]
 8000e92:	f7ff ffb1 	bl	8000df8 <NVIC_EncodePriority>
 8000e96:	4602      	mov	r2, r0
 8000e98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e9c:	4611      	mov	r1, r2
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff ff80 	bl	8000da4 <__NVIC_SetPriority>
}
 8000ea4:	bf00      	nop
 8000ea6:	3718      	adds	r7, #24
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff ff54 	bl	8000d68 <__NVIC_EnableIRQ>
}
 8000ec0:	bf00      	nop
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b089      	sub	sp, #36	; 0x24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61fb      	str	r3, [r7, #28]
 8000ee2:	e16b      	b.n	80011bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	697a      	ldr	r2, [r7, #20]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	f040 815a 	bne.w	80011b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f003 0303 	and.w	r3, r3, #3
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d005      	beq.n	8000f1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	d130      	bne.n	8000f7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	2203      	movs	r2, #3
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	68da      	ldr	r2, [r3, #12]
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f50:	2201      	movs	r2, #1
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	091b      	lsrs	r3, r3, #4
 8000f66:	f003 0201 	and.w	r2, r3, #1
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f003 0303 	and.w	r3, r3, #3
 8000f84:	2b03      	cmp	r3, #3
 8000f86:	d017      	beq.n	8000fb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	2203      	movs	r2, #3
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	689a      	ldr	r2, [r3, #8]
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f003 0303 	and.w	r3, r3, #3
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d123      	bne.n	800100c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	08da      	lsrs	r2, r3, #3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3208      	adds	r2, #8
 8000fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	f003 0307 	and.w	r3, r3, #7
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	220f      	movs	r2, #15
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	691a      	ldr	r2, [r3, #16]
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	08da      	lsrs	r2, r3, #3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	3208      	adds	r2, #8
 8001006:	69b9      	ldr	r1, [r7, #24]
 8001008:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	2203      	movs	r2, #3
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4013      	ands	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f003 0203 	and.w	r2, r3, #3
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001048:	2b00      	cmp	r3, #0
 800104a:	f000 80b4 	beq.w	80011b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	4b60      	ldr	r3, [pc, #384]	; (80011d4 <HAL_GPIO_Init+0x30c>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001056:	4a5f      	ldr	r2, [pc, #380]	; (80011d4 <HAL_GPIO_Init+0x30c>)
 8001058:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800105c:	6453      	str	r3, [r2, #68]	; 0x44
 800105e:	4b5d      	ldr	r3, [pc, #372]	; (80011d4 <HAL_GPIO_Init+0x30c>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001062:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800106a:	4a5b      	ldr	r2, [pc, #364]	; (80011d8 <HAL_GPIO_Init+0x310>)
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	089b      	lsrs	r3, r3, #2
 8001070:	3302      	adds	r3, #2
 8001072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001076:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	f003 0303 	and.w	r3, r3, #3
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	220f      	movs	r2, #15
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4013      	ands	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a52      	ldr	r2, [pc, #328]	; (80011dc <HAL_GPIO_Init+0x314>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d02b      	beq.n	80010ee <HAL_GPIO_Init+0x226>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a51      	ldr	r2, [pc, #324]	; (80011e0 <HAL_GPIO_Init+0x318>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d025      	beq.n	80010ea <HAL_GPIO_Init+0x222>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a50      	ldr	r2, [pc, #320]	; (80011e4 <HAL_GPIO_Init+0x31c>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d01f      	beq.n	80010e6 <HAL_GPIO_Init+0x21e>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a4f      	ldr	r2, [pc, #316]	; (80011e8 <HAL_GPIO_Init+0x320>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d019      	beq.n	80010e2 <HAL_GPIO_Init+0x21a>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a4e      	ldr	r2, [pc, #312]	; (80011ec <HAL_GPIO_Init+0x324>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d013      	beq.n	80010de <HAL_GPIO_Init+0x216>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a4d      	ldr	r2, [pc, #308]	; (80011f0 <HAL_GPIO_Init+0x328>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d00d      	beq.n	80010da <HAL_GPIO_Init+0x212>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a4c      	ldr	r2, [pc, #304]	; (80011f4 <HAL_GPIO_Init+0x32c>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d007      	beq.n	80010d6 <HAL_GPIO_Init+0x20e>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a4b      	ldr	r2, [pc, #300]	; (80011f8 <HAL_GPIO_Init+0x330>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d101      	bne.n	80010d2 <HAL_GPIO_Init+0x20a>
 80010ce:	2307      	movs	r3, #7
 80010d0:	e00e      	b.n	80010f0 <HAL_GPIO_Init+0x228>
 80010d2:	2308      	movs	r3, #8
 80010d4:	e00c      	b.n	80010f0 <HAL_GPIO_Init+0x228>
 80010d6:	2306      	movs	r3, #6
 80010d8:	e00a      	b.n	80010f0 <HAL_GPIO_Init+0x228>
 80010da:	2305      	movs	r3, #5
 80010dc:	e008      	b.n	80010f0 <HAL_GPIO_Init+0x228>
 80010de:	2304      	movs	r3, #4
 80010e0:	e006      	b.n	80010f0 <HAL_GPIO_Init+0x228>
 80010e2:	2303      	movs	r3, #3
 80010e4:	e004      	b.n	80010f0 <HAL_GPIO_Init+0x228>
 80010e6:	2302      	movs	r3, #2
 80010e8:	e002      	b.n	80010f0 <HAL_GPIO_Init+0x228>
 80010ea:	2301      	movs	r3, #1
 80010ec:	e000      	b.n	80010f0 <HAL_GPIO_Init+0x228>
 80010ee:	2300      	movs	r3, #0
 80010f0:	69fa      	ldr	r2, [r7, #28]
 80010f2:	f002 0203 	and.w	r2, r2, #3
 80010f6:	0092      	lsls	r2, r2, #2
 80010f8:	4093      	lsls	r3, r2
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001100:	4935      	ldr	r1, [pc, #212]	; (80011d8 <HAL_GPIO_Init+0x310>)
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	089b      	lsrs	r3, r3, #2
 8001106:	3302      	adds	r3, #2
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800110e:	4b3b      	ldr	r3, [pc, #236]	; (80011fc <HAL_GPIO_Init+0x334>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	43db      	mvns	r3, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4013      	ands	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	4313      	orrs	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001132:	4a32      	ldr	r2, [pc, #200]	; (80011fc <HAL_GPIO_Init+0x334>)
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001138:	4b30      	ldr	r3, [pc, #192]	; (80011fc <HAL_GPIO_Init+0x334>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	43db      	mvns	r3, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4013      	ands	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d003      	beq.n	800115c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	4313      	orrs	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800115c:	4a27      	ldr	r2, [pc, #156]	; (80011fc <HAL_GPIO_Init+0x334>)
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001162:	4b26      	ldr	r3, [pc, #152]	; (80011fc <HAL_GPIO_Init+0x334>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	43db      	mvns	r3, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4013      	ands	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	4313      	orrs	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001186:	4a1d      	ldr	r2, [pc, #116]	; (80011fc <HAL_GPIO_Init+0x334>)
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800118c:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <HAL_GPIO_Init+0x334>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	43db      	mvns	r3, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d003      	beq.n	80011b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011b0:	4a12      	ldr	r2, [pc, #72]	; (80011fc <HAL_GPIO_Init+0x334>)
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	3301      	adds	r3, #1
 80011ba:	61fb      	str	r3, [r7, #28]
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	2b0f      	cmp	r3, #15
 80011c0:	f67f ae90 	bls.w	8000ee4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011c4:	bf00      	nop
 80011c6:	bf00      	nop
 80011c8:	3724      	adds	r7, #36	; 0x24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40013800 	.word	0x40013800
 80011dc:	40020000 	.word	0x40020000
 80011e0:	40020400 	.word	0x40020400
 80011e4:	40020800 	.word	0x40020800
 80011e8:	40020c00 	.word	0x40020c00
 80011ec:	40021000 	.word	0x40021000
 80011f0:	40021400 	.word	0x40021400
 80011f4:	40021800 	.word	0x40021800
 80011f8:	40021c00 	.word	0x40021c00
 80011fc:	40013c00 	.word	0x40013c00

08001200 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	460b      	mov	r3, r1
 800120a:	807b      	strh	r3, [r7, #2]
 800120c:	4613      	mov	r3, r2
 800120e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001210:	787b      	ldrb	r3, [r7, #1]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d003      	beq.n	800121e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001216:	887a      	ldrh	r2, [r7, #2]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800121c:	e003      	b.n	8001226 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800121e:	887b      	ldrh	r3, [r7, #2]
 8001220:	041a      	lsls	r2, r3, #16
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	619a      	str	r2, [r3, #24]
}
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
	...

08001234 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d101      	bne.n	8001246 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e267      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	2b00      	cmp	r3, #0
 8001250:	d075      	beq.n	800133e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001252:	4b88      	ldr	r3, [pc, #544]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	f003 030c 	and.w	r3, r3, #12
 800125a:	2b04      	cmp	r3, #4
 800125c:	d00c      	beq.n	8001278 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800125e:	4b85      	ldr	r3, [pc, #532]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001266:	2b08      	cmp	r3, #8
 8001268:	d112      	bne.n	8001290 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800126a:	4b82      	ldr	r3, [pc, #520]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001272:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001276:	d10b      	bne.n	8001290 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001278:	4b7e      	ldr	r3, [pc, #504]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d05b      	beq.n	800133c <HAL_RCC_OscConfig+0x108>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d157      	bne.n	800133c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e242      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001298:	d106      	bne.n	80012a8 <HAL_RCC_OscConfig+0x74>
 800129a:	4b76      	ldr	r3, [pc, #472]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a75      	ldr	r2, [pc, #468]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80012a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a4:	6013      	str	r3, [r2, #0]
 80012a6:	e01d      	b.n	80012e4 <HAL_RCC_OscConfig+0xb0>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012b0:	d10c      	bne.n	80012cc <HAL_RCC_OscConfig+0x98>
 80012b2:	4b70      	ldr	r3, [pc, #448]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a6f      	ldr	r2, [pc, #444]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80012b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012bc:	6013      	str	r3, [r2, #0]
 80012be:	4b6d      	ldr	r3, [pc, #436]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a6c      	ldr	r2, [pc, #432]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80012c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c8:	6013      	str	r3, [r2, #0]
 80012ca:	e00b      	b.n	80012e4 <HAL_RCC_OscConfig+0xb0>
 80012cc:	4b69      	ldr	r3, [pc, #420]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a68      	ldr	r2, [pc, #416]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80012d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012d6:	6013      	str	r3, [r2, #0]
 80012d8:	4b66      	ldr	r3, [pc, #408]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a65      	ldr	r2, [pc, #404]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80012de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d013      	beq.n	8001314 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ec:	f7ff fcfe 	bl	8000cec <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f2:	e008      	b.n	8001306 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012f4:	f7ff fcfa 	bl	8000cec <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b64      	cmp	r3, #100	; 0x64
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e207      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001306:	4b5b      	ldr	r3, [pc, #364]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d0f0      	beq.n	80012f4 <HAL_RCC_OscConfig+0xc0>
 8001312:	e014      	b.n	800133e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001314:	f7ff fcea 	bl	8000cec <HAL_GetTick>
 8001318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800131a:	e008      	b.n	800132e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800131c:	f7ff fce6 	bl	8000cec <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b64      	cmp	r3, #100	; 0x64
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e1f3      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800132e:	4b51      	ldr	r3, [pc, #324]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d1f0      	bne.n	800131c <HAL_RCC_OscConfig+0xe8>
 800133a:	e000      	b.n	800133e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800133c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	2b00      	cmp	r3, #0
 8001348:	d063      	beq.n	8001412 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800134a:	4b4a      	ldr	r3, [pc, #296]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f003 030c 	and.w	r3, r3, #12
 8001352:	2b00      	cmp	r3, #0
 8001354:	d00b      	beq.n	800136e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001356:	4b47      	ldr	r3, [pc, #284]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800135e:	2b08      	cmp	r3, #8
 8001360:	d11c      	bne.n	800139c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001362:	4b44      	ldr	r3, [pc, #272]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d116      	bne.n	800139c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800136e:	4b41      	ldr	r3, [pc, #260]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	2b00      	cmp	r3, #0
 8001378:	d005      	beq.n	8001386 <HAL_RCC_OscConfig+0x152>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d001      	beq.n	8001386 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e1c7      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001386:	4b3b      	ldr	r3, [pc, #236]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	691b      	ldr	r3, [r3, #16]
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	4937      	ldr	r1, [pc, #220]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 8001396:	4313      	orrs	r3, r2
 8001398:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800139a:	e03a      	b.n	8001412 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d020      	beq.n	80013e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013a4:	4b34      	ldr	r3, [pc, #208]	; (8001478 <HAL_RCC_OscConfig+0x244>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013aa:	f7ff fc9f 	bl	8000cec <HAL_GetTick>
 80013ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b0:	e008      	b.n	80013c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013b2:	f7ff fc9b 	bl	8000cec <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d901      	bls.n	80013c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e1a8      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c4:	4b2b      	ldr	r3, [pc, #172]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d0f0      	beq.n	80013b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d0:	4b28      	ldr	r3, [pc, #160]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	691b      	ldr	r3, [r3, #16]
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	4925      	ldr	r1, [pc, #148]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80013e0:	4313      	orrs	r3, r2
 80013e2:	600b      	str	r3, [r1, #0]
 80013e4:	e015      	b.n	8001412 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013e6:	4b24      	ldr	r3, [pc, #144]	; (8001478 <HAL_RCC_OscConfig+0x244>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ec:	f7ff fc7e 	bl	8000cec <HAL_GetTick>
 80013f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013f4:	f7ff fc7a 	bl	8000cec <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e187      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001406:	4b1b      	ldr	r3, [pc, #108]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1f0      	bne.n	80013f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0308 	and.w	r3, r3, #8
 800141a:	2b00      	cmp	r3, #0
 800141c:	d036      	beq.n	800148c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d016      	beq.n	8001454 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001426:	4b15      	ldr	r3, [pc, #84]	; (800147c <HAL_RCC_OscConfig+0x248>)
 8001428:	2201      	movs	r2, #1
 800142a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800142c:	f7ff fc5e 	bl	8000cec <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001434:	f7ff fc5a 	bl	8000cec <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e167      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001446:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 8001448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d0f0      	beq.n	8001434 <HAL_RCC_OscConfig+0x200>
 8001452:	e01b      	b.n	800148c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001454:	4b09      	ldr	r3, [pc, #36]	; (800147c <HAL_RCC_OscConfig+0x248>)
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800145a:	f7ff fc47 	bl	8000cec <HAL_GetTick>
 800145e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001460:	e00e      	b.n	8001480 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001462:	f7ff fc43 	bl	8000cec <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	2b02      	cmp	r3, #2
 800146e:	d907      	bls.n	8001480 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e150      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
 8001474:	40023800 	.word	0x40023800
 8001478:	42470000 	.word	0x42470000
 800147c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001480:	4b88      	ldr	r3, [pc, #544]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001484:	f003 0302 	and.w	r3, r3, #2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1ea      	bne.n	8001462 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0304 	and.w	r3, r3, #4
 8001494:	2b00      	cmp	r3, #0
 8001496:	f000 8097 	beq.w	80015c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800149a:	2300      	movs	r3, #0
 800149c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800149e:	4b81      	ldr	r3, [pc, #516]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d10f      	bne.n	80014ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	4b7d      	ldr	r3, [pc, #500]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	4a7c      	ldr	r2, [pc, #496]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 80014b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ba:	4b7a      	ldr	r3, [pc, #488]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014c6:	2301      	movs	r3, #1
 80014c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ca:	4b77      	ldr	r3, [pc, #476]	; (80016a8 <HAL_RCC_OscConfig+0x474>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d118      	bne.n	8001508 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014d6:	4b74      	ldr	r3, [pc, #464]	; (80016a8 <HAL_RCC_OscConfig+0x474>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a73      	ldr	r2, [pc, #460]	; (80016a8 <HAL_RCC_OscConfig+0x474>)
 80014dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014e2:	f7ff fc03 	bl	8000cec <HAL_GetTick>
 80014e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e8:	e008      	b.n	80014fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ea:	f7ff fbff 	bl	8000cec <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e10c      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014fc:	4b6a      	ldr	r3, [pc, #424]	; (80016a8 <HAL_RCC_OscConfig+0x474>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001504:	2b00      	cmp	r3, #0
 8001506:	d0f0      	beq.n	80014ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d106      	bne.n	800151e <HAL_RCC_OscConfig+0x2ea>
 8001510:	4b64      	ldr	r3, [pc, #400]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001514:	4a63      	ldr	r2, [pc, #396]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	6713      	str	r3, [r2, #112]	; 0x70
 800151c:	e01c      	b.n	8001558 <HAL_RCC_OscConfig+0x324>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	2b05      	cmp	r3, #5
 8001524:	d10c      	bne.n	8001540 <HAL_RCC_OscConfig+0x30c>
 8001526:	4b5f      	ldr	r3, [pc, #380]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152a:	4a5e      	ldr	r2, [pc, #376]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 800152c:	f043 0304 	orr.w	r3, r3, #4
 8001530:	6713      	str	r3, [r2, #112]	; 0x70
 8001532:	4b5c      	ldr	r3, [pc, #368]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001536:	4a5b      	ldr	r2, [pc, #364]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6713      	str	r3, [r2, #112]	; 0x70
 800153e:	e00b      	b.n	8001558 <HAL_RCC_OscConfig+0x324>
 8001540:	4b58      	ldr	r3, [pc, #352]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001544:	4a57      	ldr	r2, [pc, #348]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001546:	f023 0301 	bic.w	r3, r3, #1
 800154a:	6713      	str	r3, [r2, #112]	; 0x70
 800154c:	4b55      	ldr	r3, [pc, #340]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 800154e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001550:	4a54      	ldr	r2, [pc, #336]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001552:	f023 0304 	bic.w	r3, r3, #4
 8001556:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d015      	beq.n	800158c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001560:	f7ff fbc4 	bl	8000cec <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001566:	e00a      	b.n	800157e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001568:	f7ff fbc0 	bl	8000cec <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	f241 3288 	movw	r2, #5000	; 0x1388
 8001576:	4293      	cmp	r3, r2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e0cb      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800157e:	4b49      	ldr	r3, [pc, #292]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d0ee      	beq.n	8001568 <HAL_RCC_OscConfig+0x334>
 800158a:	e014      	b.n	80015b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800158c:	f7ff fbae 	bl	8000cec <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001592:	e00a      	b.n	80015aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001594:	f7ff fbaa 	bl	8000cec <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e0b5      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015aa:	4b3e      	ldr	r3, [pc, #248]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 80015ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1ee      	bne.n	8001594 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015b6:	7dfb      	ldrb	r3, [r7, #23]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d105      	bne.n	80015c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015bc:	4b39      	ldr	r3, [pc, #228]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 80015be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c0:	4a38      	ldr	r2, [pc, #224]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 80015c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f000 80a1 	beq.w	8001714 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015d2:	4b34      	ldr	r3, [pc, #208]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f003 030c 	and.w	r3, r3, #12
 80015da:	2b08      	cmp	r3, #8
 80015dc:	d05c      	beq.n	8001698 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d141      	bne.n	800166a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e6:	4b31      	ldr	r3, [pc, #196]	; (80016ac <HAL_RCC_OscConfig+0x478>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ec:	f7ff fb7e 	bl	8000cec <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f4:	f7ff fb7a 	bl	8000cec <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e087      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001606:	4b27      	ldr	r3, [pc, #156]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f0      	bne.n	80015f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	69da      	ldr	r2, [r3, #28]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a1b      	ldr	r3, [r3, #32]
 800161a:	431a      	orrs	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001620:	019b      	lsls	r3, r3, #6
 8001622:	431a      	orrs	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001628:	085b      	lsrs	r3, r3, #1
 800162a:	3b01      	subs	r3, #1
 800162c:	041b      	lsls	r3, r3, #16
 800162e:	431a      	orrs	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001634:	061b      	lsls	r3, r3, #24
 8001636:	491b      	ldr	r1, [pc, #108]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001638:	4313      	orrs	r3, r2
 800163a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800163c:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <HAL_RCC_OscConfig+0x478>)
 800163e:	2201      	movs	r2, #1
 8001640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001642:	f7ff fb53 	bl	8000cec <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001648:	e008      	b.n	800165c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800164a:	f7ff fb4f 	bl	8000cec <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e05c      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800165c:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d0f0      	beq.n	800164a <HAL_RCC_OscConfig+0x416>
 8001668:	e054      	b.n	8001714 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800166a:	4b10      	ldr	r3, [pc, #64]	; (80016ac <HAL_RCC_OscConfig+0x478>)
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001670:	f7ff fb3c 	bl	8000cec <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001678:	f7ff fb38 	bl	8000cec <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e045      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168a:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1f0      	bne.n	8001678 <HAL_RCC_OscConfig+0x444>
 8001696:	e03d      	b.n	8001714 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d107      	bne.n	80016b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e038      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40007000 	.word	0x40007000
 80016ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016b0:	4b1b      	ldr	r3, [pc, #108]	; (8001720 <HAL_RCC_OscConfig+0x4ec>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d028      	beq.n	8001710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d121      	bne.n	8001710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d11a      	bne.n	8001710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016e0:	4013      	ands	r3, r2
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d111      	bne.n	8001710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f6:	085b      	lsrs	r3, r3, #1
 80016f8:	3b01      	subs	r3, #1
 80016fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d107      	bne.n	8001710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800170c:	429a      	cmp	r2, r3
 800170e:	d001      	beq.n	8001714 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e000      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40023800 	.word	0x40023800

08001724 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d101      	bne.n	8001738 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e0cc      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001738:	4b68      	ldr	r3, [pc, #416]	; (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0307 	and.w	r3, r3, #7
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	429a      	cmp	r2, r3
 8001744:	d90c      	bls.n	8001760 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001746:	4b65      	ldr	r3, [pc, #404]	; (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	b2d2      	uxtb	r2, r2
 800174c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800174e:	4b63      	ldr	r3, [pc, #396]	; (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	683a      	ldr	r2, [r7, #0]
 8001758:	429a      	cmp	r2, r3
 800175a:	d001      	beq.n	8001760 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e0b8      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d020      	beq.n	80017ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0304 	and.w	r3, r3, #4
 8001774:	2b00      	cmp	r3, #0
 8001776:	d005      	beq.n	8001784 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001778:	4b59      	ldr	r3, [pc, #356]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	4a58      	ldr	r2, [pc, #352]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 800177e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001782:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0308 	and.w	r3, r3, #8
 800178c:	2b00      	cmp	r3, #0
 800178e:	d005      	beq.n	800179c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001790:	4b53      	ldr	r3, [pc, #332]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	4a52      	ldr	r2, [pc, #328]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800179a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800179c:	4b50      	ldr	r3, [pc, #320]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	494d      	ldr	r1, [pc, #308]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d044      	beq.n	8001844 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d107      	bne.n	80017d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c2:	4b47      	ldr	r3, [pc, #284]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d119      	bne.n	8001802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e07f      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d003      	beq.n	80017e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017de:	2b03      	cmp	r3, #3
 80017e0:	d107      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017e2:	4b3f      	ldr	r3, [pc, #252]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d109      	bne.n	8001802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e06f      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f2:	4b3b      	ldr	r3, [pc, #236]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e067      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001802:	4b37      	ldr	r3, [pc, #220]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f023 0203 	bic.w	r2, r3, #3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	4934      	ldr	r1, [pc, #208]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001810:	4313      	orrs	r3, r2
 8001812:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001814:	f7ff fa6a 	bl	8000cec <HAL_GetTick>
 8001818:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181a:	e00a      	b.n	8001832 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800181c:	f7ff fa66 	bl	8000cec <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	f241 3288 	movw	r2, #5000	; 0x1388
 800182a:	4293      	cmp	r3, r2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e04f      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001832:	4b2b      	ldr	r3, [pc, #172]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f003 020c 	and.w	r2, r3, #12
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	429a      	cmp	r2, r3
 8001842:	d1eb      	bne.n	800181c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001844:	4b25      	ldr	r3, [pc, #148]	; (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0307 	and.w	r3, r3, #7
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	429a      	cmp	r2, r3
 8001850:	d20c      	bcs.n	800186c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001852:	4b22      	ldr	r3, [pc, #136]	; (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	b2d2      	uxtb	r2, r2
 8001858:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800185a:	4b20      	ldr	r3, [pc, #128]	; (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	429a      	cmp	r2, r3
 8001866:	d001      	beq.n	800186c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e032      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	2b00      	cmp	r3, #0
 8001876:	d008      	beq.n	800188a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001878:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	4916      	ldr	r1, [pc, #88]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001886:	4313      	orrs	r3, r2
 8001888:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0308 	and.w	r3, r3, #8
 8001892:	2b00      	cmp	r3, #0
 8001894:	d009      	beq.n	80018aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001896:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	490e      	ldr	r1, [pc, #56]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018aa:	f000 f821 	bl	80018f0 <HAL_RCC_GetSysClockFreq>
 80018ae:	4602      	mov	r2, r0
 80018b0:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	091b      	lsrs	r3, r3, #4
 80018b6:	f003 030f 	and.w	r3, r3, #15
 80018ba:	490a      	ldr	r1, [pc, #40]	; (80018e4 <HAL_RCC_ClockConfig+0x1c0>)
 80018bc:	5ccb      	ldrb	r3, [r1, r3]
 80018be:	fa22 f303 	lsr.w	r3, r2, r3
 80018c2:	4a09      	ldr	r2, [pc, #36]	; (80018e8 <HAL_RCC_ClockConfig+0x1c4>)
 80018c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018c6:	4b09      	ldr	r3, [pc, #36]	; (80018ec <HAL_RCC_ClockConfig+0x1c8>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff f900 	bl	8000ad0 <HAL_InitTick>

  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40023c00 	.word	0x40023c00
 80018e0:	40023800 	.word	0x40023800
 80018e4:	08004754 	.word	0x08004754
 80018e8:	20000000 	.word	0x20000000
 80018ec:	20000004 	.word	0x20000004

080018f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018f4:	b090      	sub	sp, #64	; 0x40
 80018f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018f8:	2300      	movs	r3, #0
 80018fa:	637b      	str	r3, [r7, #52]	; 0x34
 80018fc:	2300      	movs	r3, #0
 80018fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001900:	2300      	movs	r3, #0
 8001902:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001904:	2300      	movs	r3, #0
 8001906:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001908:	4b59      	ldr	r3, [pc, #356]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x180>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f003 030c 	and.w	r3, r3, #12
 8001910:	2b08      	cmp	r3, #8
 8001912:	d00d      	beq.n	8001930 <HAL_RCC_GetSysClockFreq+0x40>
 8001914:	2b08      	cmp	r3, #8
 8001916:	f200 80a1 	bhi.w	8001a5c <HAL_RCC_GetSysClockFreq+0x16c>
 800191a:	2b00      	cmp	r3, #0
 800191c:	d002      	beq.n	8001924 <HAL_RCC_GetSysClockFreq+0x34>
 800191e:	2b04      	cmp	r3, #4
 8001920:	d003      	beq.n	800192a <HAL_RCC_GetSysClockFreq+0x3a>
 8001922:	e09b      	b.n	8001a5c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001924:	4b53      	ldr	r3, [pc, #332]	; (8001a74 <HAL_RCC_GetSysClockFreq+0x184>)
 8001926:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001928:	e09b      	b.n	8001a62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800192a:	4b53      	ldr	r3, [pc, #332]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x188>)
 800192c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800192e:	e098      	b.n	8001a62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001930:	4b4f      	ldr	r3, [pc, #316]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x180>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001938:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800193a:	4b4d      	ldr	r3, [pc, #308]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x180>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d028      	beq.n	8001998 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001946:	4b4a      	ldr	r3, [pc, #296]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x180>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	099b      	lsrs	r3, r3, #6
 800194c:	2200      	movs	r2, #0
 800194e:	623b      	str	r3, [r7, #32]
 8001950:	627a      	str	r2, [r7, #36]	; 0x24
 8001952:	6a3b      	ldr	r3, [r7, #32]
 8001954:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001958:	2100      	movs	r1, #0
 800195a:	4b47      	ldr	r3, [pc, #284]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x188>)
 800195c:	fb03 f201 	mul.w	r2, r3, r1
 8001960:	2300      	movs	r3, #0
 8001962:	fb00 f303 	mul.w	r3, r0, r3
 8001966:	4413      	add	r3, r2
 8001968:	4a43      	ldr	r2, [pc, #268]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x188>)
 800196a:	fba0 1202 	umull	r1, r2, r0, r2
 800196e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001970:	460a      	mov	r2, r1
 8001972:	62ba      	str	r2, [r7, #40]	; 0x28
 8001974:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001976:	4413      	add	r3, r2
 8001978:	62fb      	str	r3, [r7, #44]	; 0x2c
 800197a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800197c:	2200      	movs	r2, #0
 800197e:	61bb      	str	r3, [r7, #24]
 8001980:	61fa      	str	r2, [r7, #28]
 8001982:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001986:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800198a:	f7fe fc21 	bl	80001d0 <__aeabi_uldivmod>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	4613      	mov	r3, r2
 8001994:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001996:	e053      	b.n	8001a40 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001998:	4b35      	ldr	r3, [pc, #212]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x180>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	099b      	lsrs	r3, r3, #6
 800199e:	2200      	movs	r2, #0
 80019a0:	613b      	str	r3, [r7, #16]
 80019a2:	617a      	str	r2, [r7, #20]
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80019aa:	f04f 0b00 	mov.w	fp, #0
 80019ae:	4652      	mov	r2, sl
 80019b0:	465b      	mov	r3, fp
 80019b2:	f04f 0000 	mov.w	r0, #0
 80019b6:	f04f 0100 	mov.w	r1, #0
 80019ba:	0159      	lsls	r1, r3, #5
 80019bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019c0:	0150      	lsls	r0, r2, #5
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	ebb2 080a 	subs.w	r8, r2, sl
 80019ca:	eb63 090b 	sbc.w	r9, r3, fp
 80019ce:	f04f 0200 	mov.w	r2, #0
 80019d2:	f04f 0300 	mov.w	r3, #0
 80019d6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80019da:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80019de:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80019e2:	ebb2 0408 	subs.w	r4, r2, r8
 80019e6:	eb63 0509 	sbc.w	r5, r3, r9
 80019ea:	f04f 0200 	mov.w	r2, #0
 80019ee:	f04f 0300 	mov.w	r3, #0
 80019f2:	00eb      	lsls	r3, r5, #3
 80019f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019f8:	00e2      	lsls	r2, r4, #3
 80019fa:	4614      	mov	r4, r2
 80019fc:	461d      	mov	r5, r3
 80019fe:	eb14 030a 	adds.w	r3, r4, sl
 8001a02:	603b      	str	r3, [r7, #0]
 8001a04:	eb45 030b 	adc.w	r3, r5, fp
 8001a08:	607b      	str	r3, [r7, #4]
 8001a0a:	f04f 0200 	mov.w	r2, #0
 8001a0e:	f04f 0300 	mov.w	r3, #0
 8001a12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a16:	4629      	mov	r1, r5
 8001a18:	028b      	lsls	r3, r1, #10
 8001a1a:	4621      	mov	r1, r4
 8001a1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a20:	4621      	mov	r1, r4
 8001a22:	028a      	lsls	r2, r1, #10
 8001a24:	4610      	mov	r0, r2
 8001a26:	4619      	mov	r1, r3
 8001a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	60fa      	str	r2, [r7, #12]
 8001a30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a34:	f7fe fbcc 	bl	80001d0 <__aeabi_uldivmod>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a40:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	0c1b      	lsrs	r3, r3, #16
 8001a46:	f003 0303 	and.w	r3, r3, #3
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001a50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a58:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a5a:	e002      	b.n	8001a62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a5c:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a5e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3740      	adds	r7, #64	; 0x40
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a6e:	bf00      	nop
 8001a70:	40023800 	.word	0x40023800
 8001a74:	00f42400 	.word	0x00f42400
 8001a78:	017d7840 	.word	0x017d7840

08001a7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a80:	4b03      	ldr	r3, [pc, #12]	; (8001a90 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a82:	681b      	ldr	r3, [r3, #0]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	20000000 	.word	0x20000000

08001a94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a98:	f7ff fff0 	bl	8001a7c <HAL_RCC_GetHCLKFreq>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	0a9b      	lsrs	r3, r3, #10
 8001aa4:	f003 0307 	and.w	r3, r3, #7
 8001aa8:	4903      	ldr	r1, [pc, #12]	; (8001ab8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aaa:	5ccb      	ldrb	r3, [r1, r3]
 8001aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	08004764 	.word	0x08004764

08001abc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	220f      	movs	r2, #15
 8001aca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001acc:	4b12      	ldr	r3, [pc, #72]	; (8001b18 <HAL_RCC_GetClockConfig+0x5c>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f003 0203 	and.w	r2, r3, #3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ad8:	4b0f      	ldr	r3, [pc, #60]	; (8001b18 <HAL_RCC_GetClockConfig+0x5c>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ae4:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <HAL_RCC_GetClockConfig+0x5c>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001af0:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <HAL_RCC_GetClockConfig+0x5c>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	08db      	lsrs	r3, r3, #3
 8001af6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001afe:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <HAL_RCC_GetClockConfig+0x60>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0207 	and.w	r2, r3, #7
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	601a      	str	r2, [r3, #0]
}
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	40023c00 	.word	0x40023c00

08001b20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e041      	b.n	8001bb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d106      	bne.n	8001b4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 f839 	bl	8001bbe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2202      	movs	r2, #2
 8001b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3304      	adds	r3, #4
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4610      	mov	r0, r2
 8001b60:	f000 f9d8 	bl	8001f14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
	...

08001bd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d001      	beq.n	8001bec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e04e      	b.n	8001c8a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2202      	movs	r2, #2
 8001bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	68da      	ldr	r2, [r3, #12]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f042 0201 	orr.w	r2, r2, #1
 8001c02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a23      	ldr	r2, [pc, #140]	; (8001c98 <HAL_TIM_Base_Start_IT+0xc4>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d022      	beq.n	8001c54 <HAL_TIM_Base_Start_IT+0x80>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c16:	d01d      	beq.n	8001c54 <HAL_TIM_Base_Start_IT+0x80>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a1f      	ldr	r2, [pc, #124]	; (8001c9c <HAL_TIM_Base_Start_IT+0xc8>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d018      	beq.n	8001c54 <HAL_TIM_Base_Start_IT+0x80>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a1e      	ldr	r2, [pc, #120]	; (8001ca0 <HAL_TIM_Base_Start_IT+0xcc>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d013      	beq.n	8001c54 <HAL_TIM_Base_Start_IT+0x80>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a1c      	ldr	r2, [pc, #112]	; (8001ca4 <HAL_TIM_Base_Start_IT+0xd0>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d00e      	beq.n	8001c54 <HAL_TIM_Base_Start_IT+0x80>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a1b      	ldr	r2, [pc, #108]	; (8001ca8 <HAL_TIM_Base_Start_IT+0xd4>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d009      	beq.n	8001c54 <HAL_TIM_Base_Start_IT+0x80>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a19      	ldr	r2, [pc, #100]	; (8001cac <HAL_TIM_Base_Start_IT+0xd8>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d004      	beq.n	8001c54 <HAL_TIM_Base_Start_IT+0x80>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a18      	ldr	r2, [pc, #96]	; (8001cb0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d111      	bne.n	8001c78 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2b06      	cmp	r3, #6
 8001c64:	d010      	beq.n	8001c88 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f042 0201 	orr.w	r2, r2, #1
 8001c74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c76:	e007      	b.n	8001c88 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f042 0201 	orr.w	r2, r2, #1
 8001c86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3714      	adds	r7, #20
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	40010000 	.word	0x40010000
 8001c9c:	40000400 	.word	0x40000400
 8001ca0:	40000800 	.word	0x40000800
 8001ca4:	40000c00 	.word	0x40000c00
 8001ca8:	40010400 	.word	0x40010400
 8001cac:	40014000 	.word	0x40014000
 8001cb0:	40001800 	.word	0x40001800

08001cb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d122      	bne.n	8001d10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d11b      	bne.n	8001d10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f06f 0202 	mvn.w	r2, #2
 8001ce0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	f003 0303 	and.w	r3, r3, #3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f000 f8ee 	bl	8001ed8 <HAL_TIM_IC_CaptureCallback>
 8001cfc:	e005      	b.n	8001d0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 f8e0 	bl	8001ec4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f000 f8f1 	bl	8001eec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	f003 0304 	and.w	r3, r3, #4
 8001d1a:	2b04      	cmp	r3, #4
 8001d1c:	d122      	bne.n	8001d64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	2b04      	cmp	r3, #4
 8001d2a:	d11b      	bne.n	8001d64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f06f 0204 	mvn.w	r2, #4
 8001d34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2202      	movs	r2, #2
 8001d3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d003      	beq.n	8001d52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 f8c4 	bl	8001ed8 <HAL_TIM_IC_CaptureCallback>
 8001d50:	e005      	b.n	8001d5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f8b6 	bl	8001ec4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f000 f8c7 	bl	8001eec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	f003 0308 	and.w	r3, r3, #8
 8001d6e:	2b08      	cmp	r3, #8
 8001d70:	d122      	bne.n	8001db8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	f003 0308 	and.w	r3, r3, #8
 8001d7c:	2b08      	cmp	r3, #8
 8001d7e:	d11b      	bne.n	8001db8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f06f 0208 	mvn.w	r2, #8
 8001d88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2204      	movs	r2, #4
 8001d8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	f003 0303 	and.w	r3, r3, #3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 f89a 	bl	8001ed8 <HAL_TIM_IC_CaptureCallback>
 8001da4:	e005      	b.n	8001db2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 f88c 	bl	8001ec4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 f89d 	bl	8001eec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	f003 0310 	and.w	r3, r3, #16
 8001dc2:	2b10      	cmp	r3, #16
 8001dc4:	d122      	bne.n	8001e0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	f003 0310 	and.w	r3, r3, #16
 8001dd0:	2b10      	cmp	r3, #16
 8001dd2:	d11b      	bne.n	8001e0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f06f 0210 	mvn.w	r2, #16
 8001ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2208      	movs	r2, #8
 8001de2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	69db      	ldr	r3, [r3, #28]
 8001dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 f870 	bl	8001ed8 <HAL_TIM_IC_CaptureCallback>
 8001df8:	e005      	b.n	8001e06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 f862 	bl	8001ec4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f000 f873 	bl	8001eec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d10e      	bne.n	8001e38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d107      	bne.n	8001e38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f06f 0201 	mvn.w	r2, #1
 8001e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7fe fe0c 	bl	8000a50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e42:	2b80      	cmp	r3, #128	; 0x80
 8001e44:	d10e      	bne.n	8001e64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e50:	2b80      	cmp	r3, #128	; 0x80
 8001e52:	d107      	bne.n	8001e64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 f902 	bl	8002068 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e6e:	2b40      	cmp	r3, #64	; 0x40
 8001e70:	d10e      	bne.n	8001e90 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e7c:	2b40      	cmp	r3, #64	; 0x40
 8001e7e:	d107      	bne.n	8001e90 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f838 	bl	8001f00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	f003 0320 	and.w	r3, r3, #32
 8001e9a:	2b20      	cmp	r3, #32
 8001e9c:	d10e      	bne.n	8001ebc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	f003 0320 	and.w	r3, r3, #32
 8001ea8:	2b20      	cmp	r3, #32
 8001eaa:	d107      	bne.n	8001ebc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f06f 0220 	mvn.w	r2, #32
 8001eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f8cc 	bl	8002054 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ebc:	bf00      	nop
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a40      	ldr	r2, [pc, #256]	; (8002028 <TIM_Base_SetConfig+0x114>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d013      	beq.n	8001f54 <TIM_Base_SetConfig+0x40>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f32:	d00f      	beq.n	8001f54 <TIM_Base_SetConfig+0x40>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a3d      	ldr	r2, [pc, #244]	; (800202c <TIM_Base_SetConfig+0x118>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d00b      	beq.n	8001f54 <TIM_Base_SetConfig+0x40>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a3c      	ldr	r2, [pc, #240]	; (8002030 <TIM_Base_SetConfig+0x11c>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d007      	beq.n	8001f54 <TIM_Base_SetConfig+0x40>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a3b      	ldr	r2, [pc, #236]	; (8002034 <TIM_Base_SetConfig+0x120>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d003      	beq.n	8001f54 <TIM_Base_SetConfig+0x40>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a3a      	ldr	r2, [pc, #232]	; (8002038 <TIM_Base_SetConfig+0x124>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d108      	bne.n	8001f66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a2f      	ldr	r2, [pc, #188]	; (8002028 <TIM_Base_SetConfig+0x114>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d02b      	beq.n	8001fc6 <TIM_Base_SetConfig+0xb2>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f74:	d027      	beq.n	8001fc6 <TIM_Base_SetConfig+0xb2>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a2c      	ldr	r2, [pc, #176]	; (800202c <TIM_Base_SetConfig+0x118>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d023      	beq.n	8001fc6 <TIM_Base_SetConfig+0xb2>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a2b      	ldr	r2, [pc, #172]	; (8002030 <TIM_Base_SetConfig+0x11c>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d01f      	beq.n	8001fc6 <TIM_Base_SetConfig+0xb2>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a2a      	ldr	r2, [pc, #168]	; (8002034 <TIM_Base_SetConfig+0x120>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d01b      	beq.n	8001fc6 <TIM_Base_SetConfig+0xb2>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a29      	ldr	r2, [pc, #164]	; (8002038 <TIM_Base_SetConfig+0x124>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d017      	beq.n	8001fc6 <TIM_Base_SetConfig+0xb2>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a28      	ldr	r2, [pc, #160]	; (800203c <TIM_Base_SetConfig+0x128>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d013      	beq.n	8001fc6 <TIM_Base_SetConfig+0xb2>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a27      	ldr	r2, [pc, #156]	; (8002040 <TIM_Base_SetConfig+0x12c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d00f      	beq.n	8001fc6 <TIM_Base_SetConfig+0xb2>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a26      	ldr	r2, [pc, #152]	; (8002044 <TIM_Base_SetConfig+0x130>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d00b      	beq.n	8001fc6 <TIM_Base_SetConfig+0xb2>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a25      	ldr	r2, [pc, #148]	; (8002048 <TIM_Base_SetConfig+0x134>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d007      	beq.n	8001fc6 <TIM_Base_SetConfig+0xb2>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a24      	ldr	r2, [pc, #144]	; (800204c <TIM_Base_SetConfig+0x138>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d003      	beq.n	8001fc6 <TIM_Base_SetConfig+0xb2>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a23      	ldr	r2, [pc, #140]	; (8002050 <TIM_Base_SetConfig+0x13c>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d108      	bne.n	8001fd8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a0a      	ldr	r2, [pc, #40]	; (8002028 <TIM_Base_SetConfig+0x114>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d003      	beq.n	800200c <TIM_Base_SetConfig+0xf8>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a0c      	ldr	r2, [pc, #48]	; (8002038 <TIM_Base_SetConfig+0x124>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d103      	bne.n	8002014 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	691a      	ldr	r2, [r3, #16]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	615a      	str	r2, [r3, #20]
}
 800201a:	bf00      	nop
 800201c:	3714      	adds	r7, #20
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	40010000 	.word	0x40010000
 800202c:	40000400 	.word	0x40000400
 8002030:	40000800 	.word	0x40000800
 8002034:	40000c00 	.word	0x40000c00
 8002038:	40010400 	.word	0x40010400
 800203c:	40014000 	.word	0x40014000
 8002040:	40014400 	.word	0x40014400
 8002044:	40014800 	.word	0x40014800
 8002048:	40001800 	.word	0x40001800
 800204c:	40001c00 	.word	0x40001c00
 8002050:	40002000 	.word	0x40002000

08002054 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f103 0208 	add.w	r2, r3, #8
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f04f 32ff 	mov.w	r2, #4294967295
 8002094:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f103 0208 	add.w	r2, r3, #8
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f103 0208 	add.w	r2, r3, #8
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80020d6:	b480      	push	{r7}
 80020d8:	b085      	sub	sp, #20
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
 80020de:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	1c5a      	adds	r2, r3, #1
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	601a      	str	r2, [r3, #0]
}
 8002112:	bf00      	nop
 8002114:	3714      	adds	r7, #20
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800211e:	b480      	push	{r7}
 8002120:	b085      	sub	sp, #20
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
 8002126:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002134:	d103      	bne.n	800213e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	e00c      	b.n	8002158 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	3308      	adds	r3, #8
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	e002      	b.n	800214c <vListInsert+0x2e>
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68ba      	ldr	r2, [r7, #8]
 8002154:	429a      	cmp	r2, r3
 8002156:	d2f6      	bcs.n	8002146 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	1c5a      	adds	r2, r3, #1
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	601a      	str	r2, [r3, #0]
}
 8002184:	bf00      	nop
 8002186:	3714      	adds	r7, #20
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	6892      	ldr	r2, [r2, #8]
 80021a6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	6852      	ldr	r2, [r2, #4]
 80021b0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d103      	bne.n	80021c4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	1e5a      	subs	r2, r3, #1
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3714      	adds	r7, #20
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80021ee:	2301      	movs	r3, #1
 80021f0:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d10a      	bne.n	8002212 <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80021fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002200:	f383 8811 	msr	BASEPRI, r3
 8002204:	f3bf 8f6f 	isb	sy
 8002208:	f3bf 8f4f 	dsb	sy
 800220c:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800220e:	bf00      	nop
 8002210:	e7fe      	b.n	8002210 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d05d      	beq.n	80022d4 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 800221c:	2b00      	cmp	r3, #0
 800221e:	d059      	beq.n	80022d4 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002228:	2100      	movs	r1, #0
 800222a:	fba3 2302 	umull	r2, r3, r3, r2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d000      	beq.n	8002234 <xQueueGenericReset+0x50>
 8002232:	2101      	movs	r1, #1
 8002234:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002236:	2b00      	cmp	r3, #0
 8002238:	d14c      	bne.n	80022d4 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 800223a:	f001 ff65 	bl	8004108 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002246:	6939      	ldr	r1, [r7, #16]
 8002248:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800224a:	fb01 f303 	mul.w	r3, r1, r3
 800224e:	441a      	add	r2, r3
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	2200      	movs	r2, #0
 8002258:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800226a:	3b01      	subs	r3, #1
 800226c:	6939      	ldr	r1, [r7, #16]
 800226e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002270:	fb01 f303 	mul.w	r3, r1, r3
 8002274:	441a      	add	r2, r3
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	22ff      	movs	r2, #255	; 0xff
 800227e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	22ff      	movs	r2, #255	; 0xff
 8002286:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d114      	bne.n	80022ba <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d01a      	beq.n	80022ce <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	3310      	adds	r3, #16
 800229c:	4618      	mov	r0, r3
 800229e:	f001 f8d1 	bl	8003444 <xTaskRemoveFromEventList>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d012      	beq.n	80022ce <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80022a8:	4b15      	ldr	r3, [pc, #84]	; (8002300 <xQueueGenericReset+0x11c>)
 80022aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	f3bf 8f4f 	dsb	sy
 80022b4:	f3bf 8f6f 	isb	sy
 80022b8:	e009      	b.n	80022ce <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	3310      	adds	r3, #16
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff fedc 	bl	800207c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	3324      	adds	r3, #36	; 0x24
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff fed7 	bl	800207c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80022ce:	f001 ff4b 	bl	8004168 <vPortExitCritical>
 80022d2:	e001      	b.n	80022d8 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10a      	bne.n	80022f4 <xQueueGenericReset+0x110>
        __asm volatile
 80022de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022e2:	f383 8811 	msr	BASEPRI, r3
 80022e6:	f3bf 8f6f 	isb	sy
 80022ea:	f3bf 8f4f 	dsb	sy
 80022ee:	60bb      	str	r3, [r7, #8]
    }
 80022f0:	bf00      	nop
 80022f2:	e7fe      	b.n	80022f2 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80022f4:	697b      	ldr	r3, [r7, #20]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	e000ed04 	.word	0xe000ed04

08002304 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002304:	b580      	push	{r7, lr}
 8002306:	b08a      	sub	sp, #40	; 0x28
 8002308:	af02      	add	r7, sp, #8
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	4613      	mov	r3, r2
 8002310:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002312:	2300      	movs	r3, #0
 8002314:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d02e      	beq.n	800237a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800231c:	2100      	movs	r1, #0
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	fba3 2302 	umull	r2, r3, r3, r2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d000      	beq.n	800232c <xQueueGenericCreate+0x28>
 800232a:	2101      	movs	r1, #1
 800232c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800232e:	2b00      	cmp	r3, #0
 8002330:	d123      	bne.n	800237a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	68ba      	ldr	r2, [r7, #8]
 8002336:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800233a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800233e:	d81c      	bhi.n	800237a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	68ba      	ldr	r2, [r7, #8]
 8002344:	fb02 f303 	mul.w	r3, r2, r3
 8002348:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	3350      	adds	r3, #80	; 0x50
 800234e:	4618      	mov	r0, r3
 8002350:	f001 ffbc 	bl	80042cc <pvPortMalloc>
 8002354:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d01c      	beq.n	8002396 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	3350      	adds	r3, #80	; 0x50
 8002364:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002366:	79fa      	ldrb	r2, [r7, #7]
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	4613      	mov	r3, r2
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	68b9      	ldr	r1, [r7, #8]
 8002372:	68f8      	ldr	r0, [r7, #12]
 8002374:	f000 f814 	bl	80023a0 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002378:	e00d      	b.n	8002396 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d10a      	bne.n	8002396 <xQueueGenericCreate+0x92>
        __asm volatile
 8002380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002384:	f383 8811 	msr	BASEPRI, r3
 8002388:	f3bf 8f6f 	isb	sy
 800238c:	f3bf 8f4f 	dsb	sy
 8002390:	613b      	str	r3, [r7, #16]
    }
 8002392:	bf00      	nop
 8002394:	e7fe      	b.n	8002394 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002396:	69fb      	ldr	r3, [r7, #28]
    }
 8002398:	4618      	mov	r0, r3
 800239a:	3720      	adds	r7, #32
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
 80023ac:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d103      	bne.n	80023bc <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	e002      	b.n	80023c2 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	68fa      	ldr	r2, [r7, #12]
 80023c6:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	68ba      	ldr	r2, [r7, #8]
 80023cc:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80023ce:	2101      	movs	r1, #1
 80023d0:	69b8      	ldr	r0, [r7, #24]
 80023d2:	f7ff ff07 	bl	80021e4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	78fa      	ldrb	r2, [r7, #3]
 80023da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80023de:	bf00      	nop
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
	...

080023e8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b08c      	sub	sp, #48	; 0x30
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80023f4:	2300      	movs	r3, #0
 80023f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80023fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d10a      	bne.n	8002418 <xQueueReceive+0x30>
        __asm volatile
 8002402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002406:	f383 8811 	msr	BASEPRI, r3
 800240a:	f3bf 8f6f 	isb	sy
 800240e:	f3bf 8f4f 	dsb	sy
 8002412:	623b      	str	r3, [r7, #32]
    }
 8002414:	bf00      	nop
 8002416:	e7fe      	b.n	8002416 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d103      	bne.n	8002426 <xQueueReceive+0x3e>
 800241e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <xQueueReceive+0x42>
 8002426:	2301      	movs	r3, #1
 8002428:	e000      	b.n	800242c <xQueueReceive+0x44>
 800242a:	2300      	movs	r3, #0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d10a      	bne.n	8002446 <xQueueReceive+0x5e>
        __asm volatile
 8002430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002434:	f383 8811 	msr	BASEPRI, r3
 8002438:	f3bf 8f6f 	isb	sy
 800243c:	f3bf 8f4f 	dsb	sy
 8002440:	61fb      	str	r3, [r7, #28]
    }
 8002442:	bf00      	nop
 8002444:	e7fe      	b.n	8002444 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002446:	f001 fa0d 	bl	8003864 <xTaskGetSchedulerState>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d102      	bne.n	8002456 <xQueueReceive+0x6e>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <xQueueReceive+0x72>
 8002456:	2301      	movs	r3, #1
 8002458:	e000      	b.n	800245c <xQueueReceive+0x74>
 800245a:	2300      	movs	r3, #0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10a      	bne.n	8002476 <xQueueReceive+0x8e>
        __asm volatile
 8002460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002464:	f383 8811 	msr	BASEPRI, r3
 8002468:	f3bf 8f6f 	isb	sy
 800246c:	f3bf 8f4f 	dsb	sy
 8002470:	61bb      	str	r3, [r7, #24]
    }
 8002472:	bf00      	nop
 8002474:	e7fe      	b.n	8002474 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002476:	f001 fe47 	bl	8004108 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800247a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800247c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800247e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002482:	2b00      	cmp	r3, #0
 8002484:	d01f      	beq.n	80024c6 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002486:	68b9      	ldr	r1, [r7, #8]
 8002488:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800248a:	f000 f88d 	bl	80025a8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002490:	1e5a      	subs	r2, r3, #1
 8002492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002494:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00f      	beq.n	80024be <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800249e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a0:	3310      	adds	r3, #16
 80024a2:	4618      	mov	r0, r3
 80024a4:	f000 ffce 	bl	8003444 <xTaskRemoveFromEventList>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d007      	beq.n	80024be <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80024ae:	4b3d      	ldr	r3, [pc, #244]	; (80025a4 <xQueueReceive+0x1bc>)
 80024b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	f3bf 8f4f 	dsb	sy
 80024ba:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80024be:	f001 fe53 	bl	8004168 <vPortExitCritical>
                return pdPASS;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e069      	b.n	800259a <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d103      	bne.n	80024d4 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80024cc:	f001 fe4c 	bl	8004168 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80024d0:	2300      	movs	r3, #0
 80024d2:	e062      	b.n	800259a <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80024d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d106      	bne.n	80024e8 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80024da:	f107 0310 	add.w	r3, r7, #16
 80024de:	4618      	mov	r0, r3
 80024e0:	f001 f886 	bl	80035f0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80024e4:	2301      	movs	r3, #1
 80024e6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80024e8:	f001 fe3e 	bl	8004168 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80024ec:	f000 fcb4 	bl	8002e58 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80024f0:	f001 fe0a 	bl	8004108 <vPortEnterCritical>
 80024f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024fa:	b25b      	sxtb	r3, r3
 80024fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002500:	d103      	bne.n	800250a <xQueueReceive+0x122>
 8002502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002504:	2200      	movs	r2, #0
 8002506:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800250a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800250c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002510:	b25b      	sxtb	r3, r3
 8002512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002516:	d103      	bne.n	8002520 <xQueueReceive+0x138>
 8002518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800251a:	2200      	movs	r2, #0
 800251c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002520:	f001 fe22 	bl	8004168 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002524:	1d3a      	adds	r2, r7, #4
 8002526:	f107 0310 	add.w	r3, r7, #16
 800252a:	4611      	mov	r1, r2
 800252c:	4618      	mov	r0, r3
 800252e:	f001 f875 	bl	800361c <xTaskCheckForTimeOut>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d123      	bne.n	8002580 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002538:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800253a:	f000 f8ad 	bl	8002698 <prvIsQueueEmpty>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d017      	beq.n	8002574 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002546:	3324      	adds	r3, #36	; 0x24
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	4611      	mov	r1, r2
 800254c:	4618      	mov	r0, r3
 800254e:	f000 ff0f 	bl	8003370 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002552:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002554:	f000 f84e 	bl	80025f4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002558:	f000 fc8c 	bl	8002e74 <xTaskResumeAll>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d189      	bne.n	8002476 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002562:	4b10      	ldr	r3, [pc, #64]	; (80025a4 <xQueueReceive+0x1bc>)
 8002564:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	f3bf 8f4f 	dsb	sy
 800256e:	f3bf 8f6f 	isb	sy
 8002572:	e780      	b.n	8002476 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002574:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002576:	f000 f83d 	bl	80025f4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800257a:	f000 fc7b 	bl	8002e74 <xTaskResumeAll>
 800257e:	e77a      	b.n	8002476 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002580:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002582:	f000 f837 	bl	80025f4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002586:	f000 fc75 	bl	8002e74 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800258a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800258c:	f000 f884 	bl	8002698 <prvIsQueueEmpty>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	f43f af6f 	beq.w	8002476 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002598:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800259a:	4618      	mov	r0, r3
 800259c:	3730      	adds	r7, #48	; 0x30
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	e000ed04 	.word	0xe000ed04

080025a8 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d018      	beq.n	80025ec <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	68da      	ldr	r2, [r3, #12]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c2:	441a      	add	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68da      	ldr	r2, [r3, #12]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d303      	bcc.n	80025dc <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68d9      	ldr	r1, [r3, #12]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e4:	461a      	mov	r2, r3
 80025e6:	6838      	ldr	r0, [r7, #0]
 80025e8:	f002 f860 	bl	80046ac <memcpy>
    }
}
 80025ec:	bf00      	nop
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80025fc:	f001 fd84 	bl	8004108 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002606:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002608:	e011      	b.n	800262e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260e:	2b00      	cmp	r3, #0
 8002610:	d012      	beq.n	8002638 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	3324      	adds	r3, #36	; 0x24
 8002616:	4618      	mov	r0, r3
 8002618:	f000 ff14 	bl	8003444 <xTaskRemoveFromEventList>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002622:	f001 f861 	bl	80036e8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002626:	7bfb      	ldrb	r3, [r7, #15]
 8002628:	3b01      	subs	r3, #1
 800262a:	b2db      	uxtb	r3, r3
 800262c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800262e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002632:	2b00      	cmp	r3, #0
 8002634:	dce9      	bgt.n	800260a <prvUnlockQueue+0x16>
 8002636:	e000      	b.n	800263a <prvUnlockQueue+0x46>
                    break;
 8002638:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	22ff      	movs	r2, #255	; 0xff
 800263e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002642:	f001 fd91 	bl	8004168 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002646:	f001 fd5f 	bl	8004108 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002650:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002652:	e011      	b.n	8002678 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d012      	beq.n	8002682 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	3310      	adds	r3, #16
 8002660:	4618      	mov	r0, r3
 8002662:	f000 feef 	bl	8003444 <xTaskRemoveFromEventList>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800266c:	f001 f83c 	bl	80036e8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002670:	7bbb      	ldrb	r3, [r7, #14]
 8002672:	3b01      	subs	r3, #1
 8002674:	b2db      	uxtb	r3, r3
 8002676:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002678:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800267c:	2b00      	cmp	r3, #0
 800267e:	dce9      	bgt.n	8002654 <prvUnlockQueue+0x60>
 8002680:	e000      	b.n	8002684 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002682:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	22ff      	movs	r2, #255	; 0xff
 8002688:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800268c:	f001 fd6c 	bl	8004168 <vPortExitCritical>
}
 8002690:	bf00      	nop
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80026a0:	f001 fd32 	bl	8004108 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d102      	bne.n	80026b2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80026ac:	2301      	movs	r3, #1
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	e001      	b.n	80026b6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80026b2:	2300      	movs	r3, #0
 80026b4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80026b6:	f001 fd57 	bl	8004168 <vPortExitCritical>

    return xReturn;
 80026ba:	68fb      	ldr	r3, [r7, #12]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80026c4:	b480      	push	{r7}
 80026c6:	b087      	sub	sp, #28
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80026ce:	2300      	movs	r3, #0
 80026d0:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d10a      	bne.n	80026ee <vQueueAddToRegistry+0x2a>
        __asm volatile
 80026d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026dc:	f383 8811 	msr	BASEPRI, r3
 80026e0:	f3bf 8f6f 	isb	sy
 80026e4:	f3bf 8f4f 	dsb	sy
 80026e8:	60fb      	str	r3, [r7, #12]
    }
 80026ea:	bf00      	nop
 80026ec:	e7fe      	b.n	80026ec <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d024      	beq.n	800273e <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]
 80026f8:	e01e      	b.n	8002738 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80026fa:	4a18      	ldr	r2, [pc, #96]	; (800275c <vQueueAddToRegistry+0x98>)
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	4413      	add	r3, r2
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	429a      	cmp	r2, r3
 8002708:	d105      	bne.n	8002716 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	4a13      	ldr	r2, [pc, #76]	; (800275c <vQueueAddToRegistry+0x98>)
 8002710:	4413      	add	r3, r2
 8002712:	613b      	str	r3, [r7, #16]
                    break;
 8002714:	e013      	b.n	800273e <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d10a      	bne.n	8002732 <vQueueAddToRegistry+0x6e>
 800271c:	4a0f      	ldr	r2, [pc, #60]	; (800275c <vQueueAddToRegistry+0x98>)
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d104      	bne.n	8002732 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	4a0b      	ldr	r2, [pc, #44]	; (800275c <vQueueAddToRegistry+0x98>)
 800272e:	4413      	add	r3, r2
 8002730:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	3301      	adds	r3, #1
 8002736:	617b      	str	r3, [r7, #20]
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	2b07      	cmp	r3, #7
 800273c:	d9dd      	bls.n	80026fa <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d005      	beq.n	8002750 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8002750:	bf00      	nop
 8002752:	371c      	adds	r7, #28
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	20000088 	.word	0x20000088

08002760 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002770:	f001 fcca 	bl	8004108 <vPortEnterCritical>
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800277a:	b25b      	sxtb	r3, r3
 800277c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002780:	d103      	bne.n	800278a <vQueueWaitForMessageRestricted+0x2a>
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002790:	b25b      	sxtb	r3, r3
 8002792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002796:	d103      	bne.n	80027a0 <vQueueWaitForMessageRestricted+0x40>
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027a0:	f001 fce2 	bl	8004168 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d106      	bne.n	80027ba <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	3324      	adds	r3, #36	; 0x24
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	68b9      	ldr	r1, [r7, #8]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f000 fdff 	bl	80033b8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80027ba:	6978      	ldr	r0, [r7, #20]
 80027bc:	f7ff ff1a 	bl	80025f4 <prvUnlockQueue>
    }
 80027c0:	bf00      	nop
 80027c2:	3718      	adds	r7, #24
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b08c      	sub	sp, #48	; 0x30
 80027cc:	af04      	add	r7, sp, #16
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	603b      	str	r3, [r7, #0]
 80027d4:	4613      	mov	r3, r2
 80027d6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80027d8:	88fb      	ldrh	r3, [r7, #6]
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	4618      	mov	r0, r3
 80027de:	f001 fd75 	bl	80042cc <pvPortMalloc>
 80027e2:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d013      	beq.n	8002812 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80027ea:	2060      	movs	r0, #96	; 0x60
 80027ec:	f001 fd6e 	bl	80042cc <pvPortMalloc>
 80027f0:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d008      	beq.n	800280a <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80027f8:	2260      	movs	r2, #96	; 0x60
 80027fa:	2100      	movs	r1, #0
 80027fc:	69f8      	ldr	r0, [r7, #28]
 80027fe:	f001 ff63 	bl	80046c8 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	697a      	ldr	r2, [r7, #20]
 8002806:	631a      	str	r2, [r3, #48]	; 0x30
 8002808:	e005      	b.n	8002816 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800280a:	6978      	ldr	r0, [r7, #20]
 800280c:	f001 fe18 	bl	8004440 <vPortFree>
 8002810:	e001      	b.n	8002816 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002812:	2300      	movs	r3, #0
 8002814:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d013      	beq.n	8002844 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800281c:	88fa      	ldrh	r2, [r7, #6]
 800281e:	2300      	movs	r3, #0
 8002820:	9303      	str	r3, [sp, #12]
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	9302      	str	r3, [sp, #8]
 8002826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002828:	9301      	str	r3, [sp, #4]
 800282a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	68b9      	ldr	r1, [r7, #8]
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f000 f80e 	bl	8002854 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002838:	69f8      	ldr	r0, [r7, #28]
 800283a:	f000 f899 	bl	8002970 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800283e:	2301      	movs	r3, #1
 8002840:	61bb      	str	r3, [r7, #24]
 8002842:	e002      	b.n	800284a <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002844:	f04f 33ff 	mov.w	r3, #4294967295
 8002848:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800284a:	69bb      	ldr	r3, [r7, #24]
    }
 800284c:	4618      	mov	r0, r3
 800284e:	3720      	adds	r7, #32
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b088      	sub	sp, #32
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
 8002860:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002864:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	461a      	mov	r2, r3
 800286c:	21a5      	movs	r1, #165	; 0xa5
 800286e:	f001 ff2b 	bl	80046c8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002874:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800287c:	3b01      	subs	r3, #1
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	f023 0307 	bic.w	r3, r3, #7
 800288a:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00a      	beq.n	80028ac <prvInitialiseNewTask+0x58>
        __asm volatile
 8002896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800289a:	f383 8811 	msr	BASEPRI, r3
 800289e:	f3bf 8f6f 	isb	sy
 80028a2:	f3bf 8f4f 	dsb	sy
 80028a6:	617b      	str	r3, [r7, #20]
    }
 80028a8:	bf00      	nop
 80028aa:	e7fe      	b.n	80028aa <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d01e      	beq.n	80028f0 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80028b2:	2300      	movs	r3, #0
 80028b4:	61fb      	str	r3, [r7, #28]
 80028b6:	e012      	b.n	80028de <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80028b8:	68ba      	ldr	r2, [r7, #8]
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	4413      	add	r3, r2
 80028be:	7819      	ldrb	r1, [r3, #0]
 80028c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	4413      	add	r3, r2
 80028c6:	3334      	adds	r3, #52	; 0x34
 80028c8:	460a      	mov	r2, r1
 80028ca:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80028cc:	68ba      	ldr	r2, [r7, #8]
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	4413      	add	r3, r2
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d006      	beq.n	80028e6 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	3301      	adds	r3, #1
 80028dc:	61fb      	str	r3, [r7, #28]
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	2b13      	cmp	r3, #19
 80028e2:	d9e9      	bls.n	80028b8 <prvInitialiseNewTask+0x64>
 80028e4:	e000      	b.n	80028e8 <prvInitialiseNewTask+0x94>
            {
                break;
 80028e6:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80028e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80028f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f2:	2b04      	cmp	r3, #4
 80028f4:	d90a      	bls.n	800290c <prvInitialiseNewTask+0xb8>
        __asm volatile
 80028f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028fa:	f383 8811 	msr	BASEPRI, r3
 80028fe:	f3bf 8f6f 	isb	sy
 8002902:	f3bf 8f4f 	dsb	sy
 8002906:	613b      	str	r3, [r7, #16]
    }
 8002908:	bf00      	nop
 800290a:	e7fe      	b.n	800290a <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800290c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800290e:	2b04      	cmp	r3, #4
 8002910:	d901      	bls.n	8002916 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002912:	2304      	movs	r3, #4
 8002914:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002918:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800291a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800291c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800291e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002920:	651a      	str	r2, [r3, #80]	; 0x50
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002924:	3304      	adds	r3, #4
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff fbc8 	bl	80020bc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800292c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800292e:	3318      	adds	r3, #24
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff fbc3 	bl	80020bc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002938:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800293a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800293c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800293e:	f1c3 0205 	rsb	r2, r3, #5
 8002942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002944:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002948:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800294a:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	68f9      	ldr	r1, [r7, #12]
 8002950:	69b8      	ldr	r0, [r7, #24]
 8002952:	f001 faa9 	bl	8003ea8 <pxPortInitialiseStack>
 8002956:	4602      	mov	r2, r0
 8002958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800295a:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800295c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295e:	2b00      	cmp	r3, #0
 8002960:	d002      	beq.n	8002968 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002964:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002966:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002968:	bf00      	nop
 800296a:	3720      	adds	r7, #32
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002978:	f001 fbc6 	bl	8004108 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800297c:	4b40      	ldr	r3, [pc, #256]	; (8002a80 <prvAddNewTaskToReadyList+0x110>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	3301      	adds	r3, #1
 8002982:	4a3f      	ldr	r2, [pc, #252]	; (8002a80 <prvAddNewTaskToReadyList+0x110>)
 8002984:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002986:	4b3f      	ldr	r3, [pc, #252]	; (8002a84 <prvAddNewTaskToReadyList+0x114>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d109      	bne.n	80029a2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800298e:	4a3d      	ldr	r2, [pc, #244]	; (8002a84 <prvAddNewTaskToReadyList+0x114>)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002994:	4b3a      	ldr	r3, [pc, #232]	; (8002a80 <prvAddNewTaskToReadyList+0x110>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d110      	bne.n	80029be <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800299c:	f000 fec8 	bl	8003730 <prvInitialiseTaskLists>
 80029a0:	e00d      	b.n	80029be <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80029a2:	4b39      	ldr	r3, [pc, #228]	; (8002a88 <prvAddNewTaskToReadyList+0x118>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d109      	bne.n	80029be <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80029aa:	4b36      	ldr	r3, [pc, #216]	; (8002a84 <prvAddNewTaskToReadyList+0x114>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d802      	bhi.n	80029be <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80029b8:	4a32      	ldr	r2, [pc, #200]	; (8002a84 <prvAddNewTaskToReadyList+0x114>)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80029be:	4b33      	ldr	r3, [pc, #204]	; (8002a8c <prvAddNewTaskToReadyList+0x11c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	3301      	adds	r3, #1
 80029c4:	4a31      	ldr	r2, [pc, #196]	; (8002a8c <prvAddNewTaskToReadyList+0x11c>)
 80029c6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80029c8:	4b30      	ldr	r3, [pc, #192]	; (8002a8c <prvAddNewTaskToReadyList+0x11c>)
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	649a      	str	r2, [r3, #72]	; 0x48
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d4:	2201      	movs	r2, #1
 80029d6:	409a      	lsls	r2, r3
 80029d8:	4b2d      	ldr	r3, [pc, #180]	; (8002a90 <prvAddNewTaskToReadyList+0x120>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4313      	orrs	r3, r2
 80029de:	4a2c      	ldr	r2, [pc, #176]	; (8002a90 <prvAddNewTaskToReadyList+0x120>)
 80029e0:	6013      	str	r3, [r2, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029e6:	492b      	ldr	r1, [pc, #172]	; (8002a94 <prvAddNewTaskToReadyList+0x124>)
 80029e8:	4613      	mov	r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	4413      	add	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	440b      	add	r3, r1
 80029f2:	3304      	adds	r3, #4
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	609a      	str	r2, [r3, #8]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	689a      	ldr	r2, [r3, #8]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	60da      	str	r2, [r3, #12]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	3204      	adds	r2, #4
 8002a0e:	605a      	str	r2, [r3, #4]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	1d1a      	adds	r2, r3, #4
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	609a      	str	r2, [r3, #8]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4413      	add	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4a1b      	ldr	r2, [pc, #108]	; (8002a94 <prvAddNewTaskToReadyList+0x124>)
 8002a26:	441a      	add	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	615a      	str	r2, [r3, #20]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a30:	4918      	ldr	r1, [pc, #96]	; (8002a94 <prvAddNewTaskToReadyList+0x124>)
 8002a32:	4613      	mov	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	440b      	add	r3, r1
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	1c59      	adds	r1, r3, #1
 8002a40:	4814      	ldr	r0, [pc, #80]	; (8002a94 <prvAddNewTaskToReadyList+0x124>)
 8002a42:	4613      	mov	r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	4413      	add	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	4403      	add	r3, r0
 8002a4c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002a4e:	f001 fb8b 	bl	8004168 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002a52:	4b0d      	ldr	r3, [pc, #52]	; (8002a88 <prvAddNewTaskToReadyList+0x118>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00e      	beq.n	8002a78 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002a5a:	4b0a      	ldr	r3, [pc, #40]	; (8002a84 <prvAddNewTaskToReadyList+0x114>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d207      	bcs.n	8002a78 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002a68:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <prvAddNewTaskToReadyList+0x128>)
 8002a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	f3bf 8f4f 	dsb	sy
 8002a74:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002a78:	bf00      	nop
 8002a7a:	3710      	adds	r7, #16
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	200001a0 	.word	0x200001a0
 8002a84:	200000c8 	.word	0x200000c8
 8002a88:	200001ac 	.word	0x200001ac
 8002a8c:	200001bc 	.word	0x200001bc
 8002a90:	200001a8 	.word	0x200001a8
 8002a94:	200000cc 	.word	0x200000cc
 8002a98:	e000ed04 	.word	0xe000ed04

08002a9c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d017      	beq.n	8002ade <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002aae:	4b13      	ldr	r3, [pc, #76]	; (8002afc <vTaskDelay+0x60>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00a      	beq.n	8002acc <vTaskDelay+0x30>
        __asm volatile
 8002ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aba:	f383 8811 	msr	BASEPRI, r3
 8002abe:	f3bf 8f6f 	isb	sy
 8002ac2:	f3bf 8f4f 	dsb	sy
 8002ac6:	60bb      	str	r3, [r7, #8]
    }
 8002ac8:	bf00      	nop
 8002aca:	e7fe      	b.n	8002aca <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002acc:	f000 f9c4 	bl	8002e58 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 fee4 	bl	80038a0 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002ad8:	f000 f9cc 	bl	8002e74 <xTaskResumeAll>
 8002adc:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d107      	bne.n	8002af4 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8002ae4:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <vTaskDelay+0x64>)
 8002ae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	f3bf 8f4f 	dsb	sy
 8002af0:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002af4:	bf00      	nop
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	200001c8 	.word	0x200001c8
 8002b00:	e000ed04 	.word	0xe000ed04

08002b04 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8002b0c:	f001 fafc 	bl	8004108 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d102      	bne.n	8002b1c <vTaskSuspend+0x18>
 8002b16:	4b43      	ldr	r3, [pc, #268]	; (8002c24 <vTaskSuspend+0x120>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	e000      	b.n	8002b1e <vTaskSuspend+0x1a>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	613b      	str	r3, [r7, #16]

            traceTASK_SUSPEND( pxTCB );

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	3304      	adds	r3, #4
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff fb33 	bl	8002190 <uxListRemove>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d115      	bne.n	8002b5c <vTaskSuspend+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b34:	493c      	ldr	r1, [pc, #240]	; (8002c28 <vTaskSuspend+0x124>)
 8002b36:	4613      	mov	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4413      	add	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	440b      	add	r3, r1
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d10a      	bne.n	8002b5c <vTaskSuspend+0x58>
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	43da      	mvns	r2, r3
 8002b52:	4b36      	ldr	r3, [pc, #216]	; (8002c2c <vTaskSuspend+0x128>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4013      	ands	r3, r2
 8002b58:	4a34      	ldr	r2, [pc, #208]	; (8002c2c <vTaskSuspend+0x128>)
 8002b5a:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d004      	beq.n	8002b6e <vTaskSuspend+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	3318      	adds	r3, #24
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff fb11 	bl	8002190 <uxListRemove>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	3304      	adds	r3, #4
 8002b72:	4619      	mov	r1, r3
 8002b74:	482e      	ldr	r0, [pc, #184]	; (8002c30 <vTaskSuspend+0x12c>)
 8002b76:	f7ff faae 	bl	80020d6 <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
            {
                BaseType_t x;

                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	617b      	str	r3, [r7, #20]
 8002b7e:	e010      	b.n	8002ba2 <vTaskSuspend+0x9e>
                {
                    if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	4413      	add	r3, r2
 8002b86:	335c      	adds	r3, #92	; 0x5c
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d105      	bne.n	8002b9c <vTaskSuspend+0x98>
                    {
                        /* The task was blocked to wait for a notification, but is
                         * now suspended, so no notification was received. */
                        pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	4413      	add	r3, r2
 8002b96:	335c      	adds	r3, #92	; 0x5c
 8002b98:	2200      	movs	r2, #0
 8002b9a:	701a      	strb	r2, [r3, #0]
                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	617b      	str	r3, [r7, #20]
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	ddeb      	ble.n	8002b80 <vTaskSuspend+0x7c>
                    }
                }
            }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 8002ba8:	f001 fade 	bl	8004168 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8002bac:	4b21      	ldr	r3, [pc, #132]	; (8002c34 <vTaskSuspend+0x130>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d005      	beq.n	8002bc0 <vTaskSuspend+0xbc>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 8002bb4:	f001 faa8 	bl	8004108 <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 8002bb8:	f000 fe38 	bl	800382c <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 8002bbc:	f001 fad4 	bl	8004168 <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 8002bc0:	4b18      	ldr	r3, [pc, #96]	; (8002c24 <vTaskSuspend+0x120>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d127      	bne.n	8002c1a <vTaskSuspend+0x116>
        {
            if( xSchedulerRunning != pdFALSE )
 8002bca:	4b1a      	ldr	r3, [pc, #104]	; (8002c34 <vTaskSuspend+0x130>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d017      	beq.n	8002c02 <vTaskSuspend+0xfe>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
 8002bd2:	4b19      	ldr	r3, [pc, #100]	; (8002c38 <vTaskSuspend+0x134>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00a      	beq.n	8002bf0 <vTaskSuspend+0xec>
        __asm volatile
 8002bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bde:	f383 8811 	msr	BASEPRI, r3
 8002be2:	f3bf 8f6f 	isb	sy
 8002be6:	f3bf 8f4f 	dsb	sy
 8002bea:	60fb      	str	r3, [r7, #12]
    }
 8002bec:	bf00      	nop
 8002bee:	e7fe      	b.n	8002bee <vTaskSuspend+0xea>
                portYIELD_WITHIN_API();
 8002bf0:	4b12      	ldr	r3, [pc, #72]	; (8002c3c <vTaskSuspend+0x138>)
 8002bf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	f3bf 8f4f 	dsb	sy
 8002bfc:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002c00:	e00b      	b.n	8002c1a <vTaskSuspend+0x116>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8002c02:	4b0b      	ldr	r3, [pc, #44]	; (8002c30 <vTaskSuspend+0x12c>)
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	4b0e      	ldr	r3, [pc, #56]	; (8002c40 <vTaskSuspend+0x13c>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d103      	bne.n	8002c16 <vTaskSuspend+0x112>
                    pxCurrentTCB = NULL;
 8002c0e:	4b05      	ldr	r3, [pc, #20]	; (8002c24 <vTaskSuspend+0x120>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]
    }
 8002c14:	e001      	b.n	8002c1a <vTaskSuspend+0x116>
                    vTaskSwitchContext();
 8002c16:	f000 fb4f 	bl	80032b8 <vTaskSwitchContext>
    }
 8002c1a:	bf00      	nop
 8002c1c:	3718      	adds	r7, #24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	200000c8 	.word	0x200000c8
 8002c28:	200000cc 	.word	0x200000cc
 8002c2c:	200001a8 	.word	0x200001a8
 8002c30:	2000018c 	.word	0x2000018c
 8002c34:	200001ac 	.word	0x200001ac
 8002c38:	200001c8 	.word	0x200001c8
 8002c3c:	e000ed04 	.word	0xe000ed04
 8002c40:	200001a0 	.word	0x200001a0

08002c44 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 8002c44:	b480      	push	{r7}
 8002c46:	b087      	sub	sp, #28
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	617b      	str	r3, [r7, #20]
        const TCB_t * const pxTCB = xTask;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	613b      	str	r3, [r7, #16]

        /* Accesses xPendingReadyList so must be called from a critical
         * section. */

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10a      	bne.n	8002c70 <prvTaskIsTaskSuspended+0x2c>
        __asm volatile
 8002c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c5e:	f383 8811 	msr	BASEPRI, r3
 8002c62:	f3bf 8f6f 	isb	sy
 8002c66:	f3bf 8f4f 	dsb	sy
 8002c6a:	60fb      	str	r3, [r7, #12]
    }
 8002c6c:	bf00      	nop
 8002c6e:	e7fe      	b.n	8002c6e <prvTaskIsTaskSuspended+0x2a>

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	4a0a      	ldr	r2, [pc, #40]	; (8002ca0 <prvTaskIsTaskSuspended+0x5c>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d10a      	bne.n	8002c90 <prvTaskIsTaskSuspended+0x4c>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7e:	4a09      	ldr	r2, [pc, #36]	; (8002ca4 <prvTaskIsTaskSuspended+0x60>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d005      	beq.n	8002c90 <prvTaskIsTaskSuspended+0x4c>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <prvTaskIsTaskSuspended+0x4c>
                {
                    xReturn = pdTRUE;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002c90:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8002c92:	4618      	mov	r0, r3
 8002c94:	371c      	adds	r7, #28
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	2000018c 	.word	0x2000018c
 8002ca4:	20000160 	.word	0x20000160

08002ca8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	617b      	str	r3, [r7, #20]

        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d10a      	bne.n	8002cd0 <vTaskResume+0x28>
        __asm volatile
 8002cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cbe:	f383 8811 	msr	BASEPRI, r3
 8002cc2:	f3bf 8f6f 	isb	sy
 8002cc6:	f3bf 8f4f 	dsb	sy
 8002cca:	60fb      	str	r3, [r7, #12]
    }
 8002ccc:	bf00      	nop
 8002cce:	e7fe      	b.n	8002cce <vTaskResume+0x26>

        /* The parameter cannot be NULL as it is impossible to resume the
         * currently executing task. */
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8002cd0:	4b34      	ldr	r3, [pc, #208]	; (8002da4 <vTaskResume+0xfc>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d05f      	beq.n	8002d9a <vTaskResume+0xf2>
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d05c      	beq.n	8002d9a <vTaskResume+0xf2>
        {
            taskENTER_CRITICAL();
 8002ce0:	f001 fa12 	bl	8004108 <vPortEnterCritical>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8002ce4:	6978      	ldr	r0, [r7, #20]
 8002ce6:	f7ff ffad 	bl	8002c44 <prvTaskIsTaskSuspended>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d052      	beq.n	8002d96 <vTaskResume+0xee>
                {
                    traceTASK_RESUME( pxTCB );

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	3304      	adds	r3, #4
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff fa4b 	bl	8002190 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfe:	2201      	movs	r2, #1
 8002d00:	409a      	lsls	r2, r3
 8002d02:	4b29      	ldr	r3, [pc, #164]	; (8002da8 <vTaskResume+0x100>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	4a27      	ldr	r2, [pc, #156]	; (8002da8 <vTaskResume+0x100>)
 8002d0a:	6013      	str	r3, [r2, #0]
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d10:	4926      	ldr	r1, [pc, #152]	; (8002dac <vTaskResume+0x104>)
 8002d12:	4613      	mov	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	4413      	add	r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	440b      	add	r3, r1
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	613b      	str	r3, [r7, #16]
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	609a      	str	r2, [r3, #8]
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	689a      	ldr	r2, [r3, #8]
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	60da      	str	r2, [r3, #12]
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	697a      	ldr	r2, [r7, #20]
 8002d36:	3204      	adds	r2, #4
 8002d38:	605a      	str	r2, [r3, #4]
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	1d1a      	adds	r2, r3, #4
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	609a      	str	r2, [r3, #8]
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d46:	4613      	mov	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4413      	add	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4a17      	ldr	r2, [pc, #92]	; (8002dac <vTaskResume+0x104>)
 8002d50:	441a      	add	r2, r3
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	615a      	str	r2, [r3, #20]
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d5a:	4914      	ldr	r1, [pc, #80]	; (8002dac <vTaskResume+0x104>)
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4413      	add	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	440b      	add	r3, r1
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	1c59      	adds	r1, r3, #1
 8002d6a:	4810      	ldr	r0, [pc, #64]	; (8002dac <vTaskResume+0x104>)
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4413      	add	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4403      	add	r3, r0
 8002d76:	6019      	str	r1, [r3, #0]

                    /* A higher priority task may have just been resumed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d7c:	4b09      	ldr	r3, [pc, #36]	; (8002da4 <vTaskResume+0xfc>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d307      	bcc.n	8002d96 <vTaskResume+0xee>
                    {
                        /* This yield may not cause the task just resumed to run,
                         * but will leave the lists in the correct state for the
                         * next yield. */
                        taskYIELD_IF_USING_PREEMPTION();
 8002d86:	4b0a      	ldr	r3, [pc, #40]	; (8002db0 <vTaskResume+0x108>)
 8002d88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	f3bf 8f4f 	dsb	sy
 8002d92:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8002d96:	f001 f9e7 	bl	8004168 <vPortExitCritical>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002d9a:	bf00      	nop
 8002d9c:	3718      	adds	r7, #24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	200000c8 	.word	0x200000c8
 8002da8:	200001a8 	.word	0x200001a8
 8002dac:	200000cc 	.word	0x200000cc
 8002db0:	e000ed04 	.word	0xe000ed04

08002db4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b086      	sub	sp, #24
 8002db8:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002dba:	4b20      	ldr	r3, [pc, #128]	; (8002e3c <vTaskStartScheduler+0x88>)
 8002dbc:	9301      	str	r3, [sp, #4]
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	2282      	movs	r2, #130	; 0x82
 8002dc6:	491e      	ldr	r1, [pc, #120]	; (8002e40 <vTaskStartScheduler+0x8c>)
 8002dc8:	481e      	ldr	r0, [pc, #120]	; (8002e44 <vTaskStartScheduler+0x90>)
 8002dca:	f7ff fcfd 	bl	80027c8 <xTaskCreate>
 8002dce:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d102      	bne.n	8002ddc <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002dd6:	f000 fde3 	bl	80039a0 <xTimerCreateTimerTask>
 8002dda:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d116      	bne.n	8002e10 <vTaskStartScheduler+0x5c>
        __asm volatile
 8002de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de6:	f383 8811 	msr	BASEPRI, r3
 8002dea:	f3bf 8f6f 	isb	sy
 8002dee:	f3bf 8f4f 	dsb	sy
 8002df2:	60bb      	str	r3, [r7, #8]
    }
 8002df4:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002df6:	4b14      	ldr	r3, [pc, #80]	; (8002e48 <vTaskStartScheduler+0x94>)
 8002df8:	f04f 32ff 	mov.w	r2, #4294967295
 8002dfc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002dfe:	4b13      	ldr	r3, [pc, #76]	; (8002e4c <vTaskStartScheduler+0x98>)
 8002e00:	2201      	movs	r2, #1
 8002e02:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002e04:	4b12      	ldr	r3, [pc, #72]	; (8002e50 <vTaskStartScheduler+0x9c>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002e0a:	f001 f8db 	bl	8003fc4 <xPortStartScheduler>
 8002e0e:	e00e      	b.n	8002e2e <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e16:	d10a      	bne.n	8002e2e <vTaskStartScheduler+0x7a>
        __asm volatile
 8002e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e1c:	f383 8811 	msr	BASEPRI, r3
 8002e20:	f3bf 8f6f 	isb	sy
 8002e24:	f3bf 8f4f 	dsb	sy
 8002e28:	607b      	str	r3, [r7, #4]
    }
 8002e2a:	bf00      	nop
 8002e2c:	e7fe      	b.n	8002e2c <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002e2e:	4b09      	ldr	r3, [pc, #36]	; (8002e54 <vTaskStartScheduler+0xa0>)
 8002e30:	681b      	ldr	r3, [r3, #0]
}
 8002e32:	bf00      	nop
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	200001c4 	.word	0x200001c4
 8002e40:	0800473c 	.word	0x0800473c
 8002e44:	08003701 	.word	0x08003701
 8002e48:	200001c0 	.word	0x200001c0
 8002e4c:	200001ac 	.word	0x200001ac
 8002e50:	200001a4 	.word	0x200001a4
 8002e54:	2000000c 	.word	0x2000000c

08002e58 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002e5c:	4b04      	ldr	r3, [pc, #16]	; (8002e70 <vTaskSuspendAll+0x18>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	3301      	adds	r3, #1
 8002e62:	4a03      	ldr	r2, [pc, #12]	; (8002e70 <vTaskSuspendAll+0x18>)
 8002e64:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002e66:	bf00      	nop
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr
 8002e70:	200001c8 	.word	0x200001c8

08002e74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b088      	sub	sp, #32
 8002e78:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002e82:	4b71      	ldr	r3, [pc, #452]	; (8003048 <xTaskResumeAll+0x1d4>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10a      	bne.n	8002ea0 <xTaskResumeAll+0x2c>
        __asm volatile
 8002e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e8e:	f383 8811 	msr	BASEPRI, r3
 8002e92:	f3bf 8f6f 	isb	sy
 8002e96:	f3bf 8f4f 	dsb	sy
 8002e9a:	607b      	str	r3, [r7, #4]
    }
 8002e9c:	bf00      	nop
 8002e9e:	e7fe      	b.n	8002e9e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002ea0:	f001 f932 	bl	8004108 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002ea4:	4b68      	ldr	r3, [pc, #416]	; (8003048 <xTaskResumeAll+0x1d4>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	4a67      	ldr	r2, [pc, #412]	; (8003048 <xTaskResumeAll+0x1d4>)
 8002eac:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002eae:	4b66      	ldr	r3, [pc, #408]	; (8003048 <xTaskResumeAll+0x1d4>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f040 80c0 	bne.w	8003038 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002eb8:	4b64      	ldr	r3, [pc, #400]	; (800304c <xTaskResumeAll+0x1d8>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 80bb 	beq.w	8003038 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ec2:	e08a      	b.n	8002fda <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ec4:	4b62      	ldr	r3, [pc, #392]	; (8003050 <xTaskResumeAll+0x1dc>)
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed0:	613b      	str	r3, [r7, #16]
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	69db      	ldr	r3, [r3, #28]
 8002ed6:	69fa      	ldr	r2, [r7, #28]
 8002ed8:	6a12      	ldr	r2, [r2, #32]
 8002eda:	609a      	str	r2, [r3, #8]
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	69fa      	ldr	r2, [r7, #28]
 8002ee2:	69d2      	ldr	r2, [r2, #28]
 8002ee4:	605a      	str	r2, [r3, #4]
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	685a      	ldr	r2, [r3, #4]
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	3318      	adds	r3, #24
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d103      	bne.n	8002efa <xTaskResumeAll+0x86>
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	6a1a      	ldr	r2, [r3, #32]
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	605a      	str	r2, [r3, #4]
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	2200      	movs	r2, #0
 8002efe:	629a      	str	r2, [r3, #40]	; 0x28
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	1e5a      	subs	r2, r3, #1
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	60fb      	str	r3, [r7, #12]
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	69fa      	ldr	r2, [r7, #28]
 8002f16:	68d2      	ldr	r2, [r2, #12]
 8002f18:	609a      	str	r2, [r3, #8]
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	69fa      	ldr	r2, [r7, #28]
 8002f20:	6892      	ldr	r2, [r2, #8]
 8002f22:	605a      	str	r2, [r3, #4]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	685a      	ldr	r2, [r3, #4]
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	3304      	adds	r3, #4
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d103      	bne.n	8002f38 <xTaskResumeAll+0xc4>
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	68da      	ldr	r2, [r3, #12]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	605a      	str	r2, [r3, #4]
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	615a      	str	r2, [r3, #20]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	1e5a      	subs	r2, r3, #1
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	409a      	lsls	r2, r3
 8002f50:	4b40      	ldr	r3, [pc, #256]	; (8003054 <xTaskResumeAll+0x1e0>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	4a3f      	ldr	r2, [pc, #252]	; (8003054 <xTaskResumeAll+0x1e0>)
 8002f58:	6013      	str	r3, [r2, #0]
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f5e:	493e      	ldr	r1, [pc, #248]	; (8003058 <xTaskResumeAll+0x1e4>)
 8002f60:	4613      	mov	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	4413      	add	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	440b      	add	r3, r1
 8002f6a:	3304      	adds	r3, #4
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	60bb      	str	r3, [r7, #8]
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	68ba      	ldr	r2, [r7, #8]
 8002f74:	609a      	str	r2, [r3, #8]
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	689a      	ldr	r2, [r3, #8]
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	60da      	str	r2, [r3, #12]
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	69fa      	ldr	r2, [r7, #28]
 8002f84:	3204      	adds	r2, #4
 8002f86:	605a      	str	r2, [r3, #4]
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	1d1a      	adds	r2, r3, #4
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	609a      	str	r2, [r3, #8]
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f94:	4613      	mov	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	4413      	add	r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	4a2e      	ldr	r2, [pc, #184]	; (8003058 <xTaskResumeAll+0x1e4>)
 8002f9e:	441a      	add	r2, r3
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	615a      	str	r2, [r3, #20]
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fa8:	492b      	ldr	r1, [pc, #172]	; (8003058 <xTaskResumeAll+0x1e4>)
 8002faa:	4613      	mov	r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4413      	add	r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	440b      	add	r3, r1
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	1c59      	adds	r1, r3, #1
 8002fb8:	4827      	ldr	r0, [pc, #156]	; (8003058 <xTaskResumeAll+0x1e4>)
 8002fba:	4613      	mov	r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	4413      	add	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4403      	add	r3, r0
 8002fc4:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fca:	4b24      	ldr	r3, [pc, #144]	; (800305c <xTaskResumeAll+0x1e8>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d302      	bcc.n	8002fda <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8002fd4:	4b22      	ldr	r3, [pc, #136]	; (8003060 <xTaskResumeAll+0x1ec>)
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002fda:	4b1d      	ldr	r3, [pc, #116]	; (8003050 <xTaskResumeAll+0x1dc>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f47f af70 	bne.w	8002ec4 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002fea:	f000 fc1f 	bl	800382c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002fee:	4b1d      	ldr	r3, [pc, #116]	; (8003064 <xTaskResumeAll+0x1f0>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d010      	beq.n	800301c <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002ffa:	f000 f847 	bl	800308c <xTaskIncrementTick>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d002      	beq.n	800300a <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8003004:	4b16      	ldr	r3, [pc, #88]	; (8003060 <xTaskResumeAll+0x1ec>)
 8003006:	2201      	movs	r2, #1
 8003008:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	3b01      	subs	r3, #1
 800300e:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1f1      	bne.n	8002ffa <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8003016:	4b13      	ldr	r3, [pc, #76]	; (8003064 <xTaskResumeAll+0x1f0>)
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800301c:	4b10      	ldr	r3, [pc, #64]	; (8003060 <xTaskResumeAll+0x1ec>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d009      	beq.n	8003038 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8003024:	2301      	movs	r3, #1
 8003026:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003028:	4b0f      	ldr	r3, [pc, #60]	; (8003068 <xTaskResumeAll+0x1f4>)
 800302a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	f3bf 8f4f 	dsb	sy
 8003034:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003038:	f001 f896 	bl	8004168 <vPortExitCritical>

    return xAlreadyYielded;
 800303c:	69bb      	ldr	r3, [r7, #24]
}
 800303e:	4618      	mov	r0, r3
 8003040:	3720      	adds	r7, #32
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	200001c8 	.word	0x200001c8
 800304c:	200001a0 	.word	0x200001a0
 8003050:	20000160 	.word	0x20000160
 8003054:	200001a8 	.word	0x200001a8
 8003058:	200000cc 	.word	0x200000cc
 800305c:	200000c8 	.word	0x200000c8
 8003060:	200001b4 	.word	0x200001b4
 8003064:	200001b0 	.word	0x200001b0
 8003068:	e000ed04 	.word	0xe000ed04

0800306c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003072:	4b05      	ldr	r3, [pc, #20]	; (8003088 <xTaskGetTickCount+0x1c>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003078:	687b      	ldr	r3, [r7, #4]
}
 800307a:	4618      	mov	r0, r3
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	200001a4 	.word	0x200001a4

0800308c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b08a      	sub	sp, #40	; 0x28
 8003090:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003092:	2300      	movs	r3, #0
 8003094:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003096:	4b7d      	ldr	r3, [pc, #500]	; (800328c <xTaskIncrementTick+0x200>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	f040 80ec 	bne.w	8003278 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80030a0:	4b7b      	ldr	r3, [pc, #492]	; (8003290 <xTaskIncrementTick+0x204>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	3301      	adds	r3, #1
 80030a6:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80030a8:	4a79      	ldr	r2, [pc, #484]	; (8003290 <xTaskIncrementTick+0x204>)
 80030aa:	6a3b      	ldr	r3, [r7, #32]
 80030ac:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80030ae:	6a3b      	ldr	r3, [r7, #32]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d120      	bne.n	80030f6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80030b4:	4b77      	ldr	r3, [pc, #476]	; (8003294 <xTaskIncrementTick+0x208>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00a      	beq.n	80030d4 <xTaskIncrementTick+0x48>
        __asm volatile
 80030be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c2:	f383 8811 	msr	BASEPRI, r3
 80030c6:	f3bf 8f6f 	isb	sy
 80030ca:	f3bf 8f4f 	dsb	sy
 80030ce:	607b      	str	r3, [r7, #4]
    }
 80030d0:	bf00      	nop
 80030d2:	e7fe      	b.n	80030d2 <xTaskIncrementTick+0x46>
 80030d4:	4b6f      	ldr	r3, [pc, #444]	; (8003294 <xTaskIncrementTick+0x208>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	61fb      	str	r3, [r7, #28]
 80030da:	4b6f      	ldr	r3, [pc, #444]	; (8003298 <xTaskIncrementTick+0x20c>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a6d      	ldr	r2, [pc, #436]	; (8003294 <xTaskIncrementTick+0x208>)
 80030e0:	6013      	str	r3, [r2, #0]
 80030e2:	4a6d      	ldr	r2, [pc, #436]	; (8003298 <xTaskIncrementTick+0x20c>)
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	6013      	str	r3, [r2, #0]
 80030e8:	4b6c      	ldr	r3, [pc, #432]	; (800329c <xTaskIncrementTick+0x210>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	3301      	adds	r3, #1
 80030ee:	4a6b      	ldr	r2, [pc, #428]	; (800329c <xTaskIncrementTick+0x210>)
 80030f0:	6013      	str	r3, [r2, #0]
 80030f2:	f000 fb9b 	bl	800382c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80030f6:	4b6a      	ldr	r3, [pc, #424]	; (80032a0 <xTaskIncrementTick+0x214>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	6a3a      	ldr	r2, [r7, #32]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	f0c0 80a6 	bcc.w	800324e <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003102:	4b64      	ldr	r3, [pc, #400]	; (8003294 <xTaskIncrementTick+0x208>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d104      	bne.n	8003116 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800310c:	4b64      	ldr	r3, [pc, #400]	; (80032a0 <xTaskIncrementTick+0x214>)
 800310e:	f04f 32ff 	mov.w	r2, #4294967295
 8003112:	601a      	str	r2, [r3, #0]
                    break;
 8003114:	e09b      	b.n	800324e <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003116:	4b5f      	ldr	r3, [pc, #380]	; (8003294 <xTaskIncrementTick+0x208>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003126:	6a3a      	ldr	r2, [r7, #32]
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	429a      	cmp	r2, r3
 800312c:	d203      	bcs.n	8003136 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800312e:	4a5c      	ldr	r2, [pc, #368]	; (80032a0 <xTaskIncrementTick+0x214>)
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003134:	e08b      	b.n	800324e <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	613b      	str	r3, [r7, #16]
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	68d2      	ldr	r2, [r2, #12]
 8003144:	609a      	str	r2, [r3, #8]
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	6892      	ldr	r2, [r2, #8]
 800314e:	605a      	str	r2, [r3, #4]
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	685a      	ldr	r2, [r3, #4]
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	3304      	adds	r3, #4
 8003158:	429a      	cmp	r2, r3
 800315a:	d103      	bne.n	8003164 <xTaskIncrementTick+0xd8>
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	68da      	ldr	r2, [r3, #12]
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	605a      	str	r2, [r3, #4]
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	2200      	movs	r2, #0
 8003168:	615a      	str	r2, [r3, #20]
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	1e5a      	subs	r2, r3, #1
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003178:	2b00      	cmp	r3, #0
 800317a:	d01e      	beq.n	80031ba <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003180:	60fb      	str	r3, [r7, #12]
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	69db      	ldr	r3, [r3, #28]
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	6a12      	ldr	r2, [r2, #32]
 800318a:	609a      	str	r2, [r3, #8]
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	69d2      	ldr	r2, [r2, #28]
 8003194:	605a      	str	r2, [r3, #4]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	685a      	ldr	r2, [r3, #4]
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	3318      	adds	r3, #24
 800319e:	429a      	cmp	r2, r3
 80031a0:	d103      	bne.n	80031aa <xTaskIncrementTick+0x11e>
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	6a1a      	ldr	r2, [r3, #32]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	605a      	str	r2, [r3, #4]
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	2200      	movs	r2, #0
 80031ae:	629a      	str	r2, [r3, #40]	; 0x28
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	1e5a      	subs	r2, r3, #1
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031be:	2201      	movs	r2, #1
 80031c0:	409a      	lsls	r2, r3
 80031c2:	4b38      	ldr	r3, [pc, #224]	; (80032a4 <xTaskIncrementTick+0x218>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	4a36      	ldr	r2, [pc, #216]	; (80032a4 <xTaskIncrementTick+0x218>)
 80031ca:	6013      	str	r3, [r2, #0]
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031d0:	4935      	ldr	r1, [pc, #212]	; (80032a8 <xTaskIncrementTick+0x21c>)
 80031d2:	4613      	mov	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	4413      	add	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	440b      	add	r3, r1
 80031dc:	3304      	adds	r3, #4
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	60bb      	str	r3, [r7, #8]
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	68ba      	ldr	r2, [r7, #8]
 80031e6:	609a      	str	r2, [r3, #8]
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	60da      	str	r2, [r3, #12]
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	3204      	adds	r2, #4
 80031f8:	605a      	str	r2, [r3, #4]
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	1d1a      	adds	r2, r3, #4
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	609a      	str	r2, [r3, #8]
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003206:	4613      	mov	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	4413      	add	r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	4a26      	ldr	r2, [pc, #152]	; (80032a8 <xTaskIncrementTick+0x21c>)
 8003210:	441a      	add	r2, r3
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	615a      	str	r2, [r3, #20]
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800321a:	4923      	ldr	r1, [pc, #140]	; (80032a8 <xTaskIncrementTick+0x21c>)
 800321c:	4613      	mov	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4413      	add	r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	440b      	add	r3, r1
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	1c59      	adds	r1, r3, #1
 800322a:	481f      	ldr	r0, [pc, #124]	; (80032a8 <xTaskIncrementTick+0x21c>)
 800322c:	4613      	mov	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4413      	add	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4403      	add	r3, r0
 8003236:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800323c:	4b1b      	ldr	r3, [pc, #108]	; (80032ac <xTaskIncrementTick+0x220>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003242:	429a      	cmp	r2, r3
 8003244:	f67f af5d 	bls.w	8003102 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8003248:	2301      	movs	r3, #1
 800324a:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800324c:	e759      	b.n	8003102 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800324e:	4b17      	ldr	r3, [pc, #92]	; (80032ac <xTaskIncrementTick+0x220>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003254:	4914      	ldr	r1, [pc, #80]	; (80032a8 <xTaskIncrementTick+0x21c>)
 8003256:	4613      	mov	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4413      	add	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	440b      	add	r3, r1
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d901      	bls.n	800326a <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 8003266:	2301      	movs	r3, #1
 8003268:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800326a:	4b11      	ldr	r3, [pc, #68]	; (80032b0 <xTaskIncrementTick+0x224>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d007      	beq.n	8003282 <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8003272:	2301      	movs	r3, #1
 8003274:	627b      	str	r3, [r7, #36]	; 0x24
 8003276:	e004      	b.n	8003282 <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003278:	4b0e      	ldr	r3, [pc, #56]	; (80032b4 <xTaskIncrementTick+0x228>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	3301      	adds	r3, #1
 800327e:	4a0d      	ldr	r2, [pc, #52]	; (80032b4 <xTaskIncrementTick+0x228>)
 8003280:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003284:	4618      	mov	r0, r3
 8003286:	3728      	adds	r7, #40	; 0x28
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	200001c8 	.word	0x200001c8
 8003290:	200001a4 	.word	0x200001a4
 8003294:	20000158 	.word	0x20000158
 8003298:	2000015c 	.word	0x2000015c
 800329c:	200001b8 	.word	0x200001b8
 80032a0:	200001c0 	.word	0x200001c0
 80032a4:	200001a8 	.word	0x200001a8
 80032a8:	200000cc 	.word	0x200000cc
 80032ac:	200000c8 	.word	0x200000c8
 80032b0:	200001b4 	.word	0x200001b4
 80032b4:	200001b0 	.word	0x200001b0

080032b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80032b8:	b480      	push	{r7}
 80032ba:	b087      	sub	sp, #28
 80032bc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80032be:	4b27      	ldr	r3, [pc, #156]	; (800335c <vTaskSwitchContext+0xa4>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80032c6:	4b26      	ldr	r3, [pc, #152]	; (8003360 <vTaskSwitchContext+0xa8>)
 80032c8:	2201      	movs	r2, #1
 80032ca:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80032cc:	e03f      	b.n	800334e <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80032ce:	4b24      	ldr	r3, [pc, #144]	; (8003360 <vTaskSwitchContext+0xa8>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032d4:	4b23      	ldr	r3, [pc, #140]	; (8003364 <vTaskSwitchContext+0xac>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	fab3 f383 	clz	r3, r3
 80032e0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80032e2:	7afb      	ldrb	r3, [r7, #11]
 80032e4:	f1c3 031f 	rsb	r3, r3, #31
 80032e8:	617b      	str	r3, [r7, #20]
 80032ea:	491f      	ldr	r1, [pc, #124]	; (8003368 <vTaskSwitchContext+0xb0>)
 80032ec:	697a      	ldr	r2, [r7, #20]
 80032ee:	4613      	mov	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4413      	add	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	440b      	add	r3, r1
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10a      	bne.n	8003314 <vTaskSwitchContext+0x5c>
        __asm volatile
 80032fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003302:	f383 8811 	msr	BASEPRI, r3
 8003306:	f3bf 8f6f 	isb	sy
 800330a:	f3bf 8f4f 	dsb	sy
 800330e:	607b      	str	r3, [r7, #4]
    }
 8003310:	bf00      	nop
 8003312:	e7fe      	b.n	8003312 <vTaskSwitchContext+0x5a>
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	4613      	mov	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	4a12      	ldr	r2, [pc, #72]	; (8003368 <vTaskSwitchContext+0xb0>)
 8003320:	4413      	add	r3, r2
 8003322:	613b      	str	r3, [r7, #16]
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	685a      	ldr	r2, [r3, #4]
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	605a      	str	r2, [r3, #4]
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	3308      	adds	r3, #8
 8003336:	429a      	cmp	r2, r3
 8003338:	d104      	bne.n	8003344 <vTaskSwitchContext+0x8c>
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	685a      	ldr	r2, [r3, #4]
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	605a      	str	r2, [r3, #4]
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	4a08      	ldr	r2, [pc, #32]	; (800336c <vTaskSwitchContext+0xb4>)
 800334c:	6013      	str	r3, [r2, #0]
}
 800334e:	bf00      	nop
 8003350:	371c      	adds	r7, #28
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	200001c8 	.word	0x200001c8
 8003360:	200001b4 	.word	0x200001b4
 8003364:	200001a8 	.word	0x200001a8
 8003368:	200000cc 	.word	0x200000cc
 800336c:	200000c8 	.word	0x200000c8

08003370 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10a      	bne.n	8003396 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003384:	f383 8811 	msr	BASEPRI, r3
 8003388:	f3bf 8f6f 	isb	sy
 800338c:	f3bf 8f4f 	dsb	sy
 8003390:	60fb      	str	r3, [r7, #12]
    }
 8003392:	bf00      	nop
 8003394:	e7fe      	b.n	8003394 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003396:	4b07      	ldr	r3, [pc, #28]	; (80033b4 <vTaskPlaceOnEventList+0x44>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	3318      	adds	r3, #24
 800339c:	4619      	mov	r1, r3
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7fe febd 	bl	800211e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80033a4:	2101      	movs	r1, #1
 80033a6:	6838      	ldr	r0, [r7, #0]
 80033a8:	f000 fa7a 	bl	80038a0 <prvAddCurrentTaskToDelayedList>
}
 80033ac:	bf00      	nop
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	200000c8 	.word	0x200000c8

080033b8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10a      	bne.n	80033e0 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80033ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ce:	f383 8811 	msr	BASEPRI, r3
 80033d2:	f3bf 8f6f 	isb	sy
 80033d6:	f3bf 8f4f 	dsb	sy
 80033da:	613b      	str	r3, [r7, #16]
    }
 80033dc:	bf00      	nop
 80033de:	e7fe      	b.n	80033de <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	617b      	str	r3, [r7, #20]
 80033e6:	4b16      	ldr	r3, [pc, #88]	; (8003440 <vTaskPlaceOnEventListRestricted+0x88>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	61da      	str	r2, [r3, #28]
 80033ee:	4b14      	ldr	r3, [pc, #80]	; (8003440 <vTaskPlaceOnEventListRestricted+0x88>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	6892      	ldr	r2, [r2, #8]
 80033f6:	621a      	str	r2, [r3, #32]
 80033f8:	4b11      	ldr	r3, [pc, #68]	; (8003440 <vTaskPlaceOnEventListRestricted+0x88>)
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	3218      	adds	r2, #24
 8003402:	605a      	str	r2, [r3, #4]
 8003404:	4b0e      	ldr	r3, [pc, #56]	; (8003440 <vTaskPlaceOnEventListRestricted+0x88>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f103 0218 	add.w	r2, r3, #24
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	609a      	str	r2, [r3, #8]
 8003410:	4b0b      	ldr	r3, [pc, #44]	; (8003440 <vTaskPlaceOnEventListRestricted+0x88>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	629a      	str	r2, [r3, #40]	; 0x28
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	1c5a      	adds	r2, r3, #1
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d002      	beq.n	800342e <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8003428:	f04f 33ff 	mov.w	r3, #4294967295
 800342c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800342e:	6879      	ldr	r1, [r7, #4]
 8003430:	68b8      	ldr	r0, [r7, #8]
 8003432:	f000 fa35 	bl	80038a0 <prvAddCurrentTaskToDelayedList>
    }
 8003436:	bf00      	nop
 8003438:	3718      	adds	r7, #24
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	200000c8 	.word	0x200000c8

08003444 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003444:	b480      	push	{r7}
 8003446:	b08b      	sub	sp, #44	; 0x2c
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003454:	6a3b      	ldr	r3, [r7, #32]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10a      	bne.n	8003470 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800345a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800345e:	f383 8811 	msr	BASEPRI, r3
 8003462:	f3bf 8f6f 	isb	sy
 8003466:	f3bf 8f4f 	dsb	sy
 800346a:	60fb      	str	r3, [r7, #12]
    }
 800346c:	bf00      	nop
 800346e:	e7fe      	b.n	800346e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003470:	6a3b      	ldr	r3, [r7, #32]
 8003472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003474:	61fb      	str	r3, [r7, #28]
 8003476:	6a3b      	ldr	r3, [r7, #32]
 8003478:	69db      	ldr	r3, [r3, #28]
 800347a:	6a3a      	ldr	r2, [r7, #32]
 800347c:	6a12      	ldr	r2, [r2, #32]
 800347e:	609a      	str	r2, [r3, #8]
 8003480:	6a3b      	ldr	r3, [r7, #32]
 8003482:	6a1b      	ldr	r3, [r3, #32]
 8003484:	6a3a      	ldr	r2, [r7, #32]
 8003486:	69d2      	ldr	r2, [r2, #28]
 8003488:	605a      	str	r2, [r3, #4]
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	685a      	ldr	r2, [r3, #4]
 800348e:	6a3b      	ldr	r3, [r7, #32]
 8003490:	3318      	adds	r3, #24
 8003492:	429a      	cmp	r2, r3
 8003494:	d103      	bne.n	800349e <xTaskRemoveFromEventList+0x5a>
 8003496:	6a3b      	ldr	r3, [r7, #32]
 8003498:	6a1a      	ldr	r2, [r3, #32]
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	605a      	str	r2, [r3, #4]
 800349e:	6a3b      	ldr	r3, [r7, #32]
 80034a0:	2200      	movs	r2, #0
 80034a2:	629a      	str	r2, [r3, #40]	; 0x28
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	1e5a      	subs	r2, r3, #1
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034ae:	4b4a      	ldr	r3, [pc, #296]	; (80035d8 <xTaskRemoveFromEventList+0x194>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d15e      	bne.n	8003574 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80034b6:	6a3b      	ldr	r3, [r7, #32]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	617b      	str	r3, [r7, #20]
 80034bc:	6a3b      	ldr	r3, [r7, #32]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	6a3a      	ldr	r2, [r7, #32]
 80034c2:	68d2      	ldr	r2, [r2, #12]
 80034c4:	609a      	str	r2, [r3, #8]
 80034c6:	6a3b      	ldr	r3, [r7, #32]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	6a3a      	ldr	r2, [r7, #32]
 80034cc:	6892      	ldr	r2, [r2, #8]
 80034ce:	605a      	str	r2, [r3, #4]
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	6a3b      	ldr	r3, [r7, #32]
 80034d6:	3304      	adds	r3, #4
 80034d8:	429a      	cmp	r2, r3
 80034da:	d103      	bne.n	80034e4 <xTaskRemoveFromEventList+0xa0>
 80034dc:	6a3b      	ldr	r3, [r7, #32]
 80034de:	68da      	ldr	r2, [r3, #12]
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	605a      	str	r2, [r3, #4]
 80034e4:	6a3b      	ldr	r3, [r7, #32]
 80034e6:	2200      	movs	r2, #0
 80034e8:	615a      	str	r2, [r3, #20]
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	1e5a      	subs	r2, r3, #1
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80034f4:	6a3b      	ldr	r3, [r7, #32]
 80034f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f8:	2201      	movs	r2, #1
 80034fa:	409a      	lsls	r2, r3
 80034fc:	4b37      	ldr	r3, [pc, #220]	; (80035dc <xTaskRemoveFromEventList+0x198>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4313      	orrs	r3, r2
 8003502:	4a36      	ldr	r2, [pc, #216]	; (80035dc <xTaskRemoveFromEventList+0x198>)
 8003504:	6013      	str	r3, [r2, #0]
 8003506:	6a3b      	ldr	r3, [r7, #32]
 8003508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800350a:	4935      	ldr	r1, [pc, #212]	; (80035e0 <xTaskRemoveFromEventList+0x19c>)
 800350c:	4613      	mov	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4413      	add	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	440b      	add	r3, r1
 8003516:	3304      	adds	r3, #4
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	613b      	str	r3, [r7, #16]
 800351c:	6a3b      	ldr	r3, [r7, #32]
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	609a      	str	r2, [r3, #8]
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	689a      	ldr	r2, [r3, #8]
 8003526:	6a3b      	ldr	r3, [r7, #32]
 8003528:	60da      	str	r2, [r3, #12]
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	6a3a      	ldr	r2, [r7, #32]
 8003530:	3204      	adds	r2, #4
 8003532:	605a      	str	r2, [r3, #4]
 8003534:	6a3b      	ldr	r3, [r7, #32]
 8003536:	1d1a      	adds	r2, r3, #4
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	609a      	str	r2, [r3, #8]
 800353c:	6a3b      	ldr	r3, [r7, #32]
 800353e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003540:	4613      	mov	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4413      	add	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	4a25      	ldr	r2, [pc, #148]	; (80035e0 <xTaskRemoveFromEventList+0x19c>)
 800354a:	441a      	add	r2, r3
 800354c:	6a3b      	ldr	r3, [r7, #32]
 800354e:	615a      	str	r2, [r3, #20]
 8003550:	6a3b      	ldr	r3, [r7, #32]
 8003552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003554:	4922      	ldr	r1, [pc, #136]	; (80035e0 <xTaskRemoveFromEventList+0x19c>)
 8003556:	4613      	mov	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4413      	add	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	440b      	add	r3, r1
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	1c59      	adds	r1, r3, #1
 8003564:	481e      	ldr	r0, [pc, #120]	; (80035e0 <xTaskRemoveFromEventList+0x19c>)
 8003566:	4613      	mov	r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	4413      	add	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	4403      	add	r3, r0
 8003570:	6019      	str	r1, [r3, #0]
 8003572:	e01b      	b.n	80035ac <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003574:	4b1b      	ldr	r3, [pc, #108]	; (80035e4 <xTaskRemoveFromEventList+0x1a0>)
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	61bb      	str	r3, [r7, #24]
 800357a:	6a3b      	ldr	r3, [r7, #32]
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	61da      	str	r2, [r3, #28]
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	6a3b      	ldr	r3, [r7, #32]
 8003586:	621a      	str	r2, [r3, #32]
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	6a3a      	ldr	r2, [r7, #32]
 800358e:	3218      	adds	r2, #24
 8003590:	605a      	str	r2, [r3, #4]
 8003592:	6a3b      	ldr	r3, [r7, #32]
 8003594:	f103 0218 	add.w	r2, r3, #24
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	609a      	str	r2, [r3, #8]
 800359c:	6a3b      	ldr	r3, [r7, #32]
 800359e:	4a11      	ldr	r2, [pc, #68]	; (80035e4 <xTaskRemoveFromEventList+0x1a0>)
 80035a0:	629a      	str	r2, [r3, #40]	; 0x28
 80035a2:	4b10      	ldr	r3, [pc, #64]	; (80035e4 <xTaskRemoveFromEventList+0x1a0>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	3301      	adds	r3, #1
 80035a8:	4a0e      	ldr	r2, [pc, #56]	; (80035e4 <xTaskRemoveFromEventList+0x1a0>)
 80035aa:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80035ac:	6a3b      	ldr	r3, [r7, #32]
 80035ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b0:	4b0d      	ldr	r3, [pc, #52]	; (80035e8 <xTaskRemoveFromEventList+0x1a4>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d905      	bls.n	80035c6 <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80035ba:	2301      	movs	r3, #1
 80035bc:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80035be:	4b0b      	ldr	r3, [pc, #44]	; (80035ec <xTaskRemoveFromEventList+0x1a8>)
 80035c0:	2201      	movs	r2, #1
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	e001      	b.n	80035ca <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 80035c6:	2300      	movs	r3, #0
 80035c8:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80035ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	372c      	adds	r7, #44	; 0x2c
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr
 80035d8:	200001c8 	.word	0x200001c8
 80035dc:	200001a8 	.word	0x200001a8
 80035e0:	200000cc 	.word	0x200000cc
 80035e4:	20000160 	.word	0x20000160
 80035e8:	200000c8 	.word	0x200000c8
 80035ec:	200001b4 	.word	0x200001b4

080035f0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80035f8:	4b06      	ldr	r3, [pc, #24]	; (8003614 <vTaskInternalSetTimeOutState+0x24>)
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003600:	4b05      	ldr	r3, [pc, #20]	; (8003618 <vTaskInternalSetTimeOutState+0x28>)
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	605a      	str	r2, [r3, #4]
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	200001b8 	.word	0x200001b8
 8003618:	200001a4 	.word	0x200001a4

0800361c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b088      	sub	sp, #32
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d10a      	bne.n	8003642 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800362c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003630:	f383 8811 	msr	BASEPRI, r3
 8003634:	f3bf 8f6f 	isb	sy
 8003638:	f3bf 8f4f 	dsb	sy
 800363c:	613b      	str	r3, [r7, #16]
    }
 800363e:	bf00      	nop
 8003640:	e7fe      	b.n	8003640 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d10a      	bne.n	800365e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800364c:	f383 8811 	msr	BASEPRI, r3
 8003650:	f3bf 8f6f 	isb	sy
 8003654:	f3bf 8f4f 	dsb	sy
 8003658:	60fb      	str	r3, [r7, #12]
    }
 800365a:	bf00      	nop
 800365c:	e7fe      	b.n	800365c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800365e:	f000 fd53 	bl	8004108 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003662:	4b1f      	ldr	r3, [pc, #124]	; (80036e0 <xTaskCheckForTimeOut+0xc4>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800367a:	d102      	bne.n	8003682 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800367c:	2300      	movs	r3, #0
 800367e:	61fb      	str	r3, [r7, #28]
 8003680:	e026      	b.n	80036d0 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	4b17      	ldr	r3, [pc, #92]	; (80036e4 <xTaskCheckForTimeOut+0xc8>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	429a      	cmp	r2, r3
 800368c:	d00a      	beq.n	80036a4 <xTaskCheckForTimeOut+0x88>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	69ba      	ldr	r2, [r7, #24]
 8003694:	429a      	cmp	r2, r3
 8003696:	d305      	bcc.n	80036a4 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003698:	2301      	movs	r3, #1
 800369a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	2200      	movs	r2, #0
 80036a0:	601a      	str	r2, [r3, #0]
 80036a2:	e015      	b.n	80036d0 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d20b      	bcs.n	80036c6 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	1ad2      	subs	r2, r2, r3
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7ff ff98 	bl	80035f0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80036c0:	2300      	movs	r3, #0
 80036c2:	61fb      	str	r3, [r7, #28]
 80036c4:	e004      	b.n	80036d0 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	2200      	movs	r2, #0
 80036ca:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80036cc:	2301      	movs	r3, #1
 80036ce:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80036d0:	f000 fd4a 	bl	8004168 <vPortExitCritical>

    return xReturn;
 80036d4:	69fb      	ldr	r3, [r7, #28]
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3720      	adds	r7, #32
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	200001a4 	.word	0x200001a4
 80036e4:	200001b8 	.word	0x200001b8

080036e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80036e8:	b480      	push	{r7}
 80036ea:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80036ec:	4b03      	ldr	r3, [pc, #12]	; (80036fc <vTaskMissedYield+0x14>)
 80036ee:	2201      	movs	r2, #1
 80036f0:	601a      	str	r2, [r3, #0]
}
 80036f2:	bf00      	nop
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr
 80036fc:	200001b4 	.word	0x200001b4

08003700 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003708:	f000 f852 	bl	80037b0 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800370c:	4b06      	ldr	r3, [pc, #24]	; (8003728 <prvIdleTask+0x28>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d9f9      	bls.n	8003708 <prvIdleTask+0x8>
            {
                taskYIELD();
 8003714:	4b05      	ldr	r3, [pc, #20]	; (800372c <prvIdleTask+0x2c>)
 8003716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800371a:	601a      	str	r2, [r3, #0]
 800371c:	f3bf 8f4f 	dsb	sy
 8003720:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003724:	e7f0      	b.n	8003708 <prvIdleTask+0x8>
 8003726:	bf00      	nop
 8003728:	200000cc 	.word	0x200000cc
 800372c:	e000ed04 	.word	0xe000ed04

08003730 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003736:	2300      	movs	r3, #0
 8003738:	607b      	str	r3, [r7, #4]
 800373a:	e00c      	b.n	8003756 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	4613      	mov	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4413      	add	r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	4a12      	ldr	r2, [pc, #72]	; (8003790 <prvInitialiseTaskLists+0x60>)
 8003748:	4413      	add	r3, r2
 800374a:	4618      	mov	r0, r3
 800374c:	f7fe fc96 	bl	800207c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3301      	adds	r3, #1
 8003754:	607b      	str	r3, [r7, #4]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2b04      	cmp	r3, #4
 800375a:	d9ef      	bls.n	800373c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800375c:	480d      	ldr	r0, [pc, #52]	; (8003794 <prvInitialiseTaskLists+0x64>)
 800375e:	f7fe fc8d 	bl	800207c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003762:	480d      	ldr	r0, [pc, #52]	; (8003798 <prvInitialiseTaskLists+0x68>)
 8003764:	f7fe fc8a 	bl	800207c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003768:	480c      	ldr	r0, [pc, #48]	; (800379c <prvInitialiseTaskLists+0x6c>)
 800376a:	f7fe fc87 	bl	800207c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800376e:	480c      	ldr	r0, [pc, #48]	; (80037a0 <prvInitialiseTaskLists+0x70>)
 8003770:	f7fe fc84 	bl	800207c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003774:	480b      	ldr	r0, [pc, #44]	; (80037a4 <prvInitialiseTaskLists+0x74>)
 8003776:	f7fe fc81 	bl	800207c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800377a:	4b0b      	ldr	r3, [pc, #44]	; (80037a8 <prvInitialiseTaskLists+0x78>)
 800377c:	4a05      	ldr	r2, [pc, #20]	; (8003794 <prvInitialiseTaskLists+0x64>)
 800377e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003780:	4b0a      	ldr	r3, [pc, #40]	; (80037ac <prvInitialiseTaskLists+0x7c>)
 8003782:	4a05      	ldr	r2, [pc, #20]	; (8003798 <prvInitialiseTaskLists+0x68>)
 8003784:	601a      	str	r2, [r3, #0]
}
 8003786:	bf00      	nop
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	200000cc 	.word	0x200000cc
 8003794:	20000130 	.word	0x20000130
 8003798:	20000144 	.word	0x20000144
 800379c:	20000160 	.word	0x20000160
 80037a0:	20000174 	.word	0x20000174
 80037a4:	2000018c 	.word	0x2000018c
 80037a8:	20000158 	.word	0x20000158
 80037ac:	2000015c 	.word	0x2000015c

080037b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037b6:	e019      	b.n	80037ec <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80037b8:	f000 fca6 	bl	8004108 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037bc:	4b10      	ldr	r3, [pc, #64]	; (8003800 <prvCheckTasksWaitingTermination+0x50>)
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3304      	adds	r3, #4
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7fe fce1 	bl	8002190 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80037ce:	4b0d      	ldr	r3, [pc, #52]	; (8003804 <prvCheckTasksWaitingTermination+0x54>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	3b01      	subs	r3, #1
 80037d4:	4a0b      	ldr	r2, [pc, #44]	; (8003804 <prvCheckTasksWaitingTermination+0x54>)
 80037d6:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80037d8:	4b0b      	ldr	r3, [pc, #44]	; (8003808 <prvCheckTasksWaitingTermination+0x58>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	3b01      	subs	r3, #1
 80037de:	4a0a      	ldr	r2, [pc, #40]	; (8003808 <prvCheckTasksWaitingTermination+0x58>)
 80037e0:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80037e2:	f000 fcc1 	bl	8004168 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 f810 	bl	800380c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037ec:	4b06      	ldr	r3, [pc, #24]	; (8003808 <prvCheckTasksWaitingTermination+0x58>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1e1      	bne.n	80037b8 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80037f4:	bf00      	nop
 80037f6:	bf00      	nop
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	20000174 	.word	0x20000174
 8003804:	200001a0 	.word	0x200001a0
 8003808:	20000188 	.word	0x20000188

0800380c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003818:	4618      	mov	r0, r3
 800381a:	f000 fe11 	bl	8004440 <vPortFree>
            vPortFree( pxTCB );
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 fe0e 	bl	8004440 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003824:	bf00      	nop
 8003826:	3708      	adds	r7, #8
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003830:	4b0a      	ldr	r3, [pc, #40]	; (800385c <prvResetNextTaskUnblockTime+0x30>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d104      	bne.n	8003844 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800383a:	4b09      	ldr	r3, [pc, #36]	; (8003860 <prvResetNextTaskUnblockTime+0x34>)
 800383c:	f04f 32ff 	mov.w	r2, #4294967295
 8003840:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003842:	e005      	b.n	8003850 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003844:	4b05      	ldr	r3, [pc, #20]	; (800385c <prvResetNextTaskUnblockTime+0x30>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a04      	ldr	r2, [pc, #16]	; (8003860 <prvResetNextTaskUnblockTime+0x34>)
 800384e:	6013      	str	r3, [r2, #0]
}
 8003850:	bf00      	nop
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	20000158 	.word	0x20000158
 8003860:	200001c0 	.word	0x200001c0

08003864 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800386a:	4b0b      	ldr	r3, [pc, #44]	; (8003898 <xTaskGetSchedulerState+0x34>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d102      	bne.n	8003878 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003872:	2301      	movs	r3, #1
 8003874:	607b      	str	r3, [r7, #4]
 8003876:	e008      	b.n	800388a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003878:	4b08      	ldr	r3, [pc, #32]	; (800389c <xTaskGetSchedulerState+0x38>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d102      	bne.n	8003886 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003880:	2302      	movs	r3, #2
 8003882:	607b      	str	r3, [r7, #4]
 8003884:	e001      	b.n	800388a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003886:	2300      	movs	r3, #0
 8003888:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800388a:	687b      	ldr	r3, [r7, #4]
    }
 800388c:	4618      	mov	r0, r3
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr
 8003898:	200001ac 	.word	0x200001ac
 800389c:	200001c8 	.word	0x200001c8

080038a0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80038aa:	4b36      	ldr	r3, [pc, #216]	; (8003984 <prvAddCurrentTaskToDelayedList+0xe4>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038b0:	4b35      	ldr	r3, [pc, #212]	; (8003988 <prvAddCurrentTaskToDelayedList+0xe8>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	3304      	adds	r3, #4
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7fe fc6a 	bl	8002190 <uxListRemove>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10b      	bne.n	80038da <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80038c2:	4b31      	ldr	r3, [pc, #196]	; (8003988 <prvAddCurrentTaskToDelayedList+0xe8>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c8:	2201      	movs	r2, #1
 80038ca:	fa02 f303 	lsl.w	r3, r2, r3
 80038ce:	43da      	mvns	r2, r3
 80038d0:	4b2e      	ldr	r3, [pc, #184]	; (800398c <prvAddCurrentTaskToDelayedList+0xec>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4013      	ands	r3, r2
 80038d6:	4a2d      	ldr	r2, [pc, #180]	; (800398c <prvAddCurrentTaskToDelayedList+0xec>)
 80038d8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e0:	d124      	bne.n	800392c <prvAddCurrentTaskToDelayedList+0x8c>
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d021      	beq.n	800392c <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038e8:	4b29      	ldr	r3, [pc, #164]	; (8003990 <prvAddCurrentTaskToDelayedList+0xf0>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	613b      	str	r3, [r7, #16]
 80038ee:	4b26      	ldr	r3, [pc, #152]	; (8003988 <prvAddCurrentTaskToDelayedList+0xe8>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	609a      	str	r2, [r3, #8]
 80038f6:	4b24      	ldr	r3, [pc, #144]	; (8003988 <prvAddCurrentTaskToDelayedList+0xe8>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	6892      	ldr	r2, [r2, #8]
 80038fe:	60da      	str	r2, [r3, #12]
 8003900:	4b21      	ldr	r3, [pc, #132]	; (8003988 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	3204      	adds	r2, #4
 800390a:	605a      	str	r2, [r3, #4]
 800390c:	4b1e      	ldr	r3, [pc, #120]	; (8003988 <prvAddCurrentTaskToDelayedList+0xe8>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	1d1a      	adds	r2, r3, #4
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	609a      	str	r2, [r3, #8]
 8003916:	4b1c      	ldr	r3, [pc, #112]	; (8003988 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a1d      	ldr	r2, [pc, #116]	; (8003990 <prvAddCurrentTaskToDelayedList+0xf0>)
 800391c:	615a      	str	r2, [r3, #20]
 800391e:	4b1c      	ldr	r3, [pc, #112]	; (8003990 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	3301      	adds	r3, #1
 8003924:	4a1a      	ldr	r2, [pc, #104]	; (8003990 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003926:	6013      	str	r3, [r2, #0]
 8003928:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800392a:	e026      	b.n	800397a <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4413      	add	r3, r2
 8003932:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003934:	4b14      	ldr	r3, [pc, #80]	; (8003988 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	429a      	cmp	r2, r3
 8003942:	d209      	bcs.n	8003958 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003944:	4b13      	ldr	r3, [pc, #76]	; (8003994 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	4b0f      	ldr	r3, [pc, #60]	; (8003988 <prvAddCurrentTaskToDelayedList+0xe8>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	3304      	adds	r3, #4
 800394e:	4619      	mov	r1, r3
 8003950:	4610      	mov	r0, r2
 8003952:	f7fe fbe4 	bl	800211e <vListInsert>
}
 8003956:	e010      	b.n	800397a <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003958:	4b0f      	ldr	r3, [pc, #60]	; (8003998 <prvAddCurrentTaskToDelayedList+0xf8>)
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	4b0a      	ldr	r3, [pc, #40]	; (8003988 <prvAddCurrentTaskToDelayedList+0xe8>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	3304      	adds	r3, #4
 8003962:	4619      	mov	r1, r3
 8003964:	4610      	mov	r0, r2
 8003966:	f7fe fbda 	bl	800211e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800396a:	4b0c      	ldr	r3, [pc, #48]	; (800399c <prvAddCurrentTaskToDelayedList+0xfc>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	429a      	cmp	r2, r3
 8003972:	d202      	bcs.n	800397a <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003974:	4a09      	ldr	r2, [pc, #36]	; (800399c <prvAddCurrentTaskToDelayedList+0xfc>)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6013      	str	r3, [r2, #0]
}
 800397a:	bf00      	nop
 800397c:	3718      	adds	r7, #24
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	200001a4 	.word	0x200001a4
 8003988:	200000c8 	.word	0x200000c8
 800398c:	200001a8 	.word	0x200001a8
 8003990:	2000018c 	.word	0x2000018c
 8003994:	2000015c 	.word	0x2000015c
 8003998:	20000158 	.word	0x20000158
 800399c:	200001c0 	.word	0x200001c0

080039a0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80039a6:	2300      	movs	r3, #0
 80039a8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80039aa:	f000 fa47 	bl	8003e3c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80039ae:	4b11      	ldr	r3, [pc, #68]	; (80039f4 <xTimerCreateTimerTask+0x54>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00b      	beq.n	80039ce <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80039b6:	4b10      	ldr	r3, [pc, #64]	; (80039f8 <xTimerCreateTimerTask+0x58>)
 80039b8:	9301      	str	r3, [sp, #4]
 80039ba:	2302      	movs	r3, #2
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	2300      	movs	r3, #0
 80039c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80039c4:	490d      	ldr	r1, [pc, #52]	; (80039fc <xTimerCreateTimerTask+0x5c>)
 80039c6:	480e      	ldr	r0, [pc, #56]	; (8003a00 <xTimerCreateTimerTask+0x60>)
 80039c8:	f7fe fefe 	bl	80027c8 <xTaskCreate>
 80039cc:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d10a      	bne.n	80039ea <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80039d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d8:	f383 8811 	msr	BASEPRI, r3
 80039dc:	f3bf 8f6f 	isb	sy
 80039e0:	f3bf 8f4f 	dsb	sy
 80039e4:	603b      	str	r3, [r7, #0]
    }
 80039e6:	bf00      	nop
 80039e8:	e7fe      	b.n	80039e8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80039ea:	687b      	ldr	r3, [r7, #4]
    }
 80039ec:	4618      	mov	r0, r3
 80039ee:	3708      	adds	r7, #8
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	200001fc 	.word	0x200001fc
 80039f8:	20000200 	.word	0x20000200
 80039fc:	08004744 	.word	0x08004744
 8003a00:	08003aa9 	.word	0x08003aa9

08003a04 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003a10:	e008      	b.n	8003a24 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	68ba      	ldr	r2, [r7, #8]
 8003a18:	4413      	add	r3, r2
 8003a1a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	699a      	ldr	r2, [r3, #24]
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	18d1      	adds	r1, r2, r3
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f000 f8dd 	bl	8003bf0 <prvInsertTimerInActiveList>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1ea      	bne.n	8003a12 <prvReloadTimer+0xe>
        }
    }
 8003a3c:	bf00      	nop
 8003a3e:	bf00      	nop
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
	...

08003a48 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a52:	4b14      	ldr	r3, [pc, #80]	; (8003aa4 <prvProcessExpiredTimer+0x5c>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	3304      	adds	r3, #4
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7fe fb95 	bl	8002190 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a6c:	f003 0304 	and.w	r3, r3, #4
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d005      	beq.n	8003a80 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003a74:	683a      	ldr	r2, [r7, #0]
 8003a76:	6879      	ldr	r1, [r7, #4]
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	f7ff ffc3 	bl	8003a04 <prvReloadTimer>
 8003a7e:	e008      	b.n	8003a92 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a86:	f023 0301 	bic.w	r3, r3, #1
 8003a8a:	b2da      	uxtb	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	68f8      	ldr	r0, [r7, #12]
 8003a98:	4798      	blx	r3
    }
 8003a9a:	bf00      	nop
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	200001f4 	.word	0x200001f4

08003aa8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003ab0:	f107 0308 	add.w	r3, r7, #8
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f000 f857 	bl	8003b68 <prvGetNextExpireTime>
 8003aba:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	4619      	mov	r1, r3
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	f000 f803 	bl	8003acc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003ac6:	f000 f8d5 	bl	8003c74 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003aca:	e7f1      	b.n	8003ab0 <prvTimerTask+0x8>

08003acc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003ad6:	f7ff f9bf 	bl	8002e58 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003ada:	f107 0308 	add.w	r3, r7, #8
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f000 f866 	bl	8003bb0 <prvSampleTimeNow>
 8003ae4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d130      	bne.n	8003b4e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10a      	bne.n	8003b08 <prvProcessTimerOrBlockTask+0x3c>
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d806      	bhi.n	8003b08 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003afa:	f7ff f9bb 	bl	8002e74 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003afe:	68f9      	ldr	r1, [r7, #12]
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f7ff ffa1 	bl	8003a48 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003b06:	e024      	b.n	8003b52 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d008      	beq.n	8003b20 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003b0e:	4b13      	ldr	r3, [pc, #76]	; (8003b5c <prvProcessTimerOrBlockTask+0x90>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d101      	bne.n	8003b1c <prvProcessTimerOrBlockTask+0x50>
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e000      	b.n	8003b1e <prvProcessTimerOrBlockTask+0x52>
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003b20:	4b0f      	ldr	r3, [pc, #60]	; (8003b60 <prvProcessTimerOrBlockTask+0x94>)
 8003b22:	6818      	ldr	r0, [r3, #0]
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	f7fe fe17 	bl	8002760 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003b32:	f7ff f99f 	bl	8002e74 <xTaskResumeAll>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d10a      	bne.n	8003b52 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003b3c:	4b09      	ldr	r3, [pc, #36]	; (8003b64 <prvProcessTimerOrBlockTask+0x98>)
 8003b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b42:	601a      	str	r2, [r3, #0]
 8003b44:	f3bf 8f4f 	dsb	sy
 8003b48:	f3bf 8f6f 	isb	sy
    }
 8003b4c:	e001      	b.n	8003b52 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003b4e:	f7ff f991 	bl	8002e74 <xTaskResumeAll>
    }
 8003b52:	bf00      	nop
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	200001f8 	.word	0x200001f8
 8003b60:	200001fc 	.word	0x200001fc
 8003b64:	e000ed04 	.word	0xe000ed04

08003b68 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003b68:	b480      	push	{r7}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003b70:	4b0e      	ldr	r3, [pc, #56]	; (8003bac <prvGetNextExpireTime+0x44>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <prvGetNextExpireTime+0x16>
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	e000      	b.n	8003b80 <prvGetNextExpireTime+0x18>
 8003b7e:	2200      	movs	r2, #0
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d105      	bne.n	8003b98 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003b8c:	4b07      	ldr	r3, [pc, #28]	; (8003bac <prvGetNextExpireTime+0x44>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	60fb      	str	r3, [r7, #12]
 8003b96:	e001      	b.n	8003b9c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
    }
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3714      	adds	r7, #20
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	200001f4 	.word	0x200001f4

08003bb0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003bb8:	f7ff fa58 	bl	800306c <xTaskGetTickCount>
 8003bbc:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003bbe:	4b0b      	ldr	r3, [pc, #44]	; (8003bec <prvSampleTimeNow+0x3c>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d205      	bcs.n	8003bd4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003bc8:	f000 f912 	bl	8003df0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	601a      	str	r2, [r3, #0]
 8003bd2:	e002      	b.n	8003bda <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003bda:	4a04      	ldr	r2, [pc, #16]	; (8003bec <prvSampleTimeNow+0x3c>)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003be0:	68fb      	ldr	r3, [r7, #12]
    }
 8003be2:	4618      	mov	r0, r3
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	20000204 	.word	0x20000204

08003bf0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
 8003bfc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	68ba      	ldr	r2, [r7, #8]
 8003c06:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003c0e:	68ba      	ldr	r2, [r7, #8]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d812      	bhi.n	8003c3c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	1ad2      	subs	r2, r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d302      	bcc.n	8003c2a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003c24:	2301      	movs	r3, #1
 8003c26:	617b      	str	r3, [r7, #20]
 8003c28:	e01b      	b.n	8003c62 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003c2a:	4b10      	ldr	r3, [pc, #64]	; (8003c6c <prvInsertTimerInActiveList+0x7c>)
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	3304      	adds	r3, #4
 8003c32:	4619      	mov	r1, r3
 8003c34:	4610      	mov	r0, r2
 8003c36:	f7fe fa72 	bl	800211e <vListInsert>
 8003c3a:	e012      	b.n	8003c62 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d206      	bcs.n	8003c52 <prvInsertTimerInActiveList+0x62>
 8003c44:	68ba      	ldr	r2, [r7, #8]
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d302      	bcc.n	8003c52 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	617b      	str	r3, [r7, #20]
 8003c50:	e007      	b.n	8003c62 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003c52:	4b07      	ldr	r3, [pc, #28]	; (8003c70 <prvInsertTimerInActiveList+0x80>)
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	3304      	adds	r3, #4
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	4610      	mov	r0, r2
 8003c5e:	f7fe fa5e 	bl	800211e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003c62:	697b      	ldr	r3, [r7, #20]
    }
 8003c64:	4618      	mov	r0, r3
 8003c66:	3718      	adds	r7, #24
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	200001f8 	.word	0x200001f8
 8003c70:	200001f4 	.word	0x200001f4

08003c74 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b088      	sub	sp, #32
 8003c78:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003c7a:	e0a6      	b.n	8003dca <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f2c0 80a2 	blt.w	8003dc8 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	695b      	ldr	r3, [r3, #20]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d004      	beq.n	8003c9a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	3304      	adds	r3, #4
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7fe fa7b 	bl	8002190 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003c9a:	1d3b      	adds	r3, r7, #4
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7ff ff87 	bl	8003bb0 <prvSampleTimeNow>
 8003ca2:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	2b08      	cmp	r3, #8
 8003caa:	f200 808e 	bhi.w	8003dca <prvProcessReceivedCommands+0x156>
 8003cae:	a201      	add	r2, pc, #4	; (adr r2, 8003cb4 <prvProcessReceivedCommands+0x40>)
 8003cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb4:	08003cd9 	.word	0x08003cd9
 8003cb8:	08003cd9 	.word	0x08003cd9
 8003cbc:	08003d41 	.word	0x08003d41
 8003cc0:	08003d55 	.word	0x08003d55
 8003cc4:	08003d9f 	.word	0x08003d9f
 8003cc8:	08003cd9 	.word	0x08003cd9
 8003ccc:	08003cd9 	.word	0x08003cd9
 8003cd0:	08003d41 	.word	0x08003d41
 8003cd4:	08003d55 	.word	0x08003d55
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cde:	f043 0301 	orr.w	r3, r3, #1
 8003ce2:	b2da      	uxtb	r2, r3
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	18d1      	adds	r1, r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	69f8      	ldr	r0, [r7, #28]
 8003cf8:	f7ff ff7a 	bl	8003bf0 <prvInsertTimerInActiveList>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d063      	beq.n	8003dca <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d08:	f003 0304 	and.w	r3, r3, #4
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d009      	beq.n	8003d24 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	4413      	add	r3, r2
 8003d18:	69ba      	ldr	r2, [r7, #24]
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	69f8      	ldr	r0, [r7, #28]
 8003d1e:	f7ff fe71 	bl	8003a04 <prvReloadTimer>
 8003d22:	e008      	b.n	8003d36 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d2a:	f023 0301 	bic.w	r3, r3, #1
 8003d2e:	b2da      	uxtb	r2, r3
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	69f8      	ldr	r0, [r7, #28]
 8003d3c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003d3e:	e044      	b.n	8003dca <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d46:	f023 0301 	bic.w	r3, r3, #1
 8003d4a:	b2da      	uxtb	r2, r3
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003d52:	e03a      	b.n	8003dca <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d5a:	f043 0301 	orr.w	r3, r3, #1
 8003d5e:	b2da      	uxtb	r2, r3
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d10a      	bne.n	8003d8a <prvProcessReceivedCommands+0x116>
        __asm volatile
 8003d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d78:	f383 8811 	msr	BASEPRI, r3
 8003d7c:	f3bf 8f6f 	isb	sy
 8003d80:	f3bf 8f4f 	dsb	sy
 8003d84:	617b      	str	r3, [r7, #20]
    }
 8003d86:	bf00      	nop
 8003d88:	e7fe      	b.n	8003d88 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	699a      	ldr	r2, [r3, #24]
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	18d1      	adds	r1, r2, r3
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	69f8      	ldr	r0, [r7, #28]
 8003d98:	f7ff ff2a 	bl	8003bf0 <prvInsertTimerInActiveList>
                        break;
 8003d9c:	e015      	b.n	8003dca <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d103      	bne.n	8003db4 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8003dac:	69f8      	ldr	r0, [r7, #28]
 8003dae:	f000 fb47 	bl	8004440 <vPortFree>
 8003db2:	e00a      	b.n	8003dca <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003dba:	f023 0301 	bic.w	r3, r3, #1
 8003dbe:	b2da      	uxtb	r2, r3
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003dc6:	e000      	b.n	8003dca <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003dc8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003dca:	4b08      	ldr	r3, [pc, #32]	; (8003dec <prvProcessReceivedCommands+0x178>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f107 0108 	add.w	r1, r7, #8
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7fe fb07 	bl	80023e8 <xQueueReceive>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f47f af4d 	bne.w	8003c7c <prvProcessReceivedCommands+0x8>
        }
    }
 8003de2:	bf00      	nop
 8003de4:	bf00      	nop
 8003de6:	3720      	adds	r7, #32
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	200001fc 	.word	0x200001fc

08003df0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003df6:	e009      	b.n	8003e0c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003df8:	4b0e      	ldr	r3, [pc, #56]	; (8003e34 <prvSwitchTimerLists+0x44>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003e02:	f04f 31ff 	mov.w	r1, #4294967295
 8003e06:	6838      	ldr	r0, [r7, #0]
 8003e08:	f7ff fe1e 	bl	8003a48 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003e0c:	4b09      	ldr	r3, [pc, #36]	; (8003e34 <prvSwitchTimerLists+0x44>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1f0      	bne.n	8003df8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003e16:	4b07      	ldr	r3, [pc, #28]	; (8003e34 <prvSwitchTimerLists+0x44>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003e1c:	4b06      	ldr	r3, [pc, #24]	; (8003e38 <prvSwitchTimerLists+0x48>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a04      	ldr	r2, [pc, #16]	; (8003e34 <prvSwitchTimerLists+0x44>)
 8003e22:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003e24:	4a04      	ldr	r2, [pc, #16]	; (8003e38 <prvSwitchTimerLists+0x48>)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6013      	str	r3, [r2, #0]
    }
 8003e2a:	bf00      	nop
 8003e2c:	3708      	adds	r7, #8
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	200001f4 	.word	0x200001f4
 8003e38:	200001f8 	.word	0x200001f8

08003e3c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003e40:	f000 f962 	bl	8004108 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003e44:	4b12      	ldr	r3, [pc, #72]	; (8003e90 <prvCheckForValidListAndQueue+0x54>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d11d      	bne.n	8003e88 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003e4c:	4811      	ldr	r0, [pc, #68]	; (8003e94 <prvCheckForValidListAndQueue+0x58>)
 8003e4e:	f7fe f915 	bl	800207c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003e52:	4811      	ldr	r0, [pc, #68]	; (8003e98 <prvCheckForValidListAndQueue+0x5c>)
 8003e54:	f7fe f912 	bl	800207c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003e58:	4b10      	ldr	r3, [pc, #64]	; (8003e9c <prvCheckForValidListAndQueue+0x60>)
 8003e5a:	4a0e      	ldr	r2, [pc, #56]	; (8003e94 <prvCheckForValidListAndQueue+0x58>)
 8003e5c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003e5e:	4b10      	ldr	r3, [pc, #64]	; (8003ea0 <prvCheckForValidListAndQueue+0x64>)
 8003e60:	4a0d      	ldr	r2, [pc, #52]	; (8003e98 <prvCheckForValidListAndQueue+0x5c>)
 8003e62:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003e64:	2200      	movs	r2, #0
 8003e66:	210c      	movs	r1, #12
 8003e68:	200a      	movs	r0, #10
 8003e6a:	f7fe fa4b 	bl	8002304 <xQueueGenericCreate>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	4a07      	ldr	r2, [pc, #28]	; (8003e90 <prvCheckForValidListAndQueue+0x54>)
 8003e72:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003e74:	4b06      	ldr	r3, [pc, #24]	; (8003e90 <prvCheckForValidListAndQueue+0x54>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d005      	beq.n	8003e88 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003e7c:	4b04      	ldr	r3, [pc, #16]	; (8003e90 <prvCheckForValidListAndQueue+0x54>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4908      	ldr	r1, [pc, #32]	; (8003ea4 <prvCheckForValidListAndQueue+0x68>)
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7fe fc1e 	bl	80026c4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003e88:	f000 f96e 	bl	8004168 <vPortExitCritical>
    }
 8003e8c:	bf00      	nop
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	200001fc 	.word	0x200001fc
 8003e94:	200001cc 	.word	0x200001cc
 8003e98:	200001e0 	.word	0x200001e0
 8003e9c:	200001f4 	.word	0x200001f4
 8003ea0:	200001f8 	.word	0x200001f8
 8003ea4:	0800474c 	.word	0x0800474c

08003ea8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	3b04      	subs	r3, #4
 8003eb8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ec0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	3b04      	subs	r3, #4
 8003ec6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	f023 0201 	bic.w	r2, r3, #1
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	3b04      	subs	r3, #4
 8003ed6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003ed8:	4a0c      	ldr	r2, [pc, #48]	; (8003f0c <pxPortInitialiseStack+0x64>)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	3b14      	subs	r3, #20
 8003ee2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	3b04      	subs	r3, #4
 8003eee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f06f 0202 	mvn.w	r2, #2
 8003ef6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	3b20      	subs	r3, #32
 8003efc:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003efe:	68fb      	ldr	r3, [r7, #12]
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3714      	adds	r7, #20
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr
 8003f0c:	08003f11 	.word	0x08003f11

08003f10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003f16:	2300      	movs	r3, #0
 8003f18:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003f1a:	4b12      	ldr	r3, [pc, #72]	; (8003f64 <prvTaskExitError+0x54>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f22:	d00a      	beq.n	8003f3a <prvTaskExitError+0x2a>
        __asm volatile
 8003f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f28:	f383 8811 	msr	BASEPRI, r3
 8003f2c:	f3bf 8f6f 	isb	sy
 8003f30:	f3bf 8f4f 	dsb	sy
 8003f34:	60fb      	str	r3, [r7, #12]
    }
 8003f36:	bf00      	nop
 8003f38:	e7fe      	b.n	8003f38 <prvTaskExitError+0x28>
        __asm volatile
 8003f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3e:	f383 8811 	msr	BASEPRI, r3
 8003f42:	f3bf 8f6f 	isb	sy
 8003f46:	f3bf 8f4f 	dsb	sy
 8003f4a:	60bb      	str	r3, [r7, #8]
    }
 8003f4c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003f4e:	bf00      	nop
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d0fc      	beq.n	8003f50 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003f56:	bf00      	nop
 8003f58:	bf00      	nop
 8003f5a:	3714      	adds	r7, #20
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr
 8003f64:	20000010 	.word	0x20000010
	...

08003f70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003f70:	4b07      	ldr	r3, [pc, #28]	; (8003f90 <pxCurrentTCBConst2>)
 8003f72:	6819      	ldr	r1, [r3, #0]
 8003f74:	6808      	ldr	r0, [r1, #0]
 8003f76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f7a:	f380 8809 	msr	PSP, r0
 8003f7e:	f3bf 8f6f 	isb	sy
 8003f82:	f04f 0000 	mov.w	r0, #0
 8003f86:	f380 8811 	msr	BASEPRI, r0
 8003f8a:	4770      	bx	lr
 8003f8c:	f3af 8000 	nop.w

08003f90 <pxCurrentTCBConst2>:
 8003f90:	200000c8 	.word	0x200000c8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003f94:	bf00      	nop
 8003f96:	bf00      	nop

08003f98 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003f98:	4808      	ldr	r0, [pc, #32]	; (8003fbc <prvPortStartFirstTask+0x24>)
 8003f9a:	6800      	ldr	r0, [r0, #0]
 8003f9c:	6800      	ldr	r0, [r0, #0]
 8003f9e:	f380 8808 	msr	MSP, r0
 8003fa2:	f04f 0000 	mov.w	r0, #0
 8003fa6:	f380 8814 	msr	CONTROL, r0
 8003faa:	b662      	cpsie	i
 8003fac:	b661      	cpsie	f
 8003fae:	f3bf 8f4f 	dsb	sy
 8003fb2:	f3bf 8f6f 	isb	sy
 8003fb6:	df00      	svc	0
 8003fb8:	bf00      	nop
 8003fba:	0000      	.short	0x0000
 8003fbc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003fc0:	bf00      	nop
 8003fc2:	bf00      	nop

08003fc4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b086      	sub	sp, #24
 8003fc8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003fca:	4b46      	ldr	r3, [pc, #280]	; (80040e4 <xPortStartScheduler+0x120>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a46      	ldr	r2, [pc, #280]	; (80040e8 <xPortStartScheduler+0x124>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d10a      	bne.n	8003fea <xPortStartScheduler+0x26>
        __asm volatile
 8003fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd8:	f383 8811 	msr	BASEPRI, r3
 8003fdc:	f3bf 8f6f 	isb	sy
 8003fe0:	f3bf 8f4f 	dsb	sy
 8003fe4:	613b      	str	r3, [r7, #16]
    }
 8003fe6:	bf00      	nop
 8003fe8:	e7fe      	b.n	8003fe8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003fea:	4b3e      	ldr	r3, [pc, #248]	; (80040e4 <xPortStartScheduler+0x120>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a3f      	ldr	r2, [pc, #252]	; (80040ec <xPortStartScheduler+0x128>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d10a      	bne.n	800400a <xPortStartScheduler+0x46>
        __asm volatile
 8003ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff8:	f383 8811 	msr	BASEPRI, r3
 8003ffc:	f3bf 8f6f 	isb	sy
 8004000:	f3bf 8f4f 	dsb	sy
 8004004:	60fb      	str	r3, [r7, #12]
    }
 8004006:	bf00      	nop
 8004008:	e7fe      	b.n	8004008 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800400a:	4b39      	ldr	r3, [pc, #228]	; (80040f0 <xPortStartScheduler+0x12c>)
 800400c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	b2db      	uxtb	r3, r3
 8004014:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	22ff      	movs	r2, #255	; 0xff
 800401a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	b2db      	uxtb	r3, r3
 8004022:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004024:	78fb      	ldrb	r3, [r7, #3]
 8004026:	b2db      	uxtb	r3, r3
 8004028:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800402c:	b2da      	uxtb	r2, r3
 800402e:	4b31      	ldr	r3, [pc, #196]	; (80040f4 <xPortStartScheduler+0x130>)
 8004030:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004032:	4b31      	ldr	r3, [pc, #196]	; (80040f8 <xPortStartScheduler+0x134>)
 8004034:	2207      	movs	r2, #7
 8004036:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004038:	e009      	b.n	800404e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800403a:	4b2f      	ldr	r3, [pc, #188]	; (80040f8 <xPortStartScheduler+0x134>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	3b01      	subs	r3, #1
 8004040:	4a2d      	ldr	r2, [pc, #180]	; (80040f8 <xPortStartScheduler+0x134>)
 8004042:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004044:	78fb      	ldrb	r3, [r7, #3]
 8004046:	b2db      	uxtb	r3, r3
 8004048:	005b      	lsls	r3, r3, #1
 800404a:	b2db      	uxtb	r3, r3
 800404c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800404e:	78fb      	ldrb	r3, [r7, #3]
 8004050:	b2db      	uxtb	r3, r3
 8004052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004056:	2b80      	cmp	r3, #128	; 0x80
 8004058:	d0ef      	beq.n	800403a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800405a:	4b27      	ldr	r3, [pc, #156]	; (80040f8 <xPortStartScheduler+0x134>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f1c3 0307 	rsb	r3, r3, #7
 8004062:	2b04      	cmp	r3, #4
 8004064:	d00a      	beq.n	800407c <xPortStartScheduler+0xb8>
        __asm volatile
 8004066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406a:	f383 8811 	msr	BASEPRI, r3
 800406e:	f3bf 8f6f 	isb	sy
 8004072:	f3bf 8f4f 	dsb	sy
 8004076:	60bb      	str	r3, [r7, #8]
    }
 8004078:	bf00      	nop
 800407a:	e7fe      	b.n	800407a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800407c:	4b1e      	ldr	r3, [pc, #120]	; (80040f8 <xPortStartScheduler+0x134>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	021b      	lsls	r3, r3, #8
 8004082:	4a1d      	ldr	r2, [pc, #116]	; (80040f8 <xPortStartScheduler+0x134>)
 8004084:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004086:	4b1c      	ldr	r3, [pc, #112]	; (80040f8 <xPortStartScheduler+0x134>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800408e:	4a1a      	ldr	r2, [pc, #104]	; (80040f8 <xPortStartScheduler+0x134>)
 8004090:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	b2da      	uxtb	r2, r3
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800409a:	4b18      	ldr	r3, [pc, #96]	; (80040fc <xPortStartScheduler+0x138>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a17      	ldr	r2, [pc, #92]	; (80040fc <xPortStartScheduler+0x138>)
 80040a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80040a4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80040a6:	4b15      	ldr	r3, [pc, #84]	; (80040fc <xPortStartScheduler+0x138>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a14      	ldr	r2, [pc, #80]	; (80040fc <xPortStartScheduler+0x138>)
 80040ac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80040b0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80040b2:	f000 f8db 	bl	800426c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80040b6:	4b12      	ldr	r3, [pc, #72]	; (8004100 <xPortStartScheduler+0x13c>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80040bc:	f000 f8fa 	bl	80042b4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80040c0:	4b10      	ldr	r3, [pc, #64]	; (8004104 <xPortStartScheduler+0x140>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a0f      	ldr	r2, [pc, #60]	; (8004104 <xPortStartScheduler+0x140>)
 80040c6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80040ca:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80040cc:	f7ff ff64 	bl	8003f98 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80040d0:	f7ff f8f2 	bl	80032b8 <vTaskSwitchContext>
    prvTaskExitError();
 80040d4:	f7ff ff1c 	bl	8003f10 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3718      	adds	r7, #24
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	e000ed00 	.word	0xe000ed00
 80040e8:	410fc271 	.word	0x410fc271
 80040ec:	410fc270 	.word	0x410fc270
 80040f0:	e000e400 	.word	0xe000e400
 80040f4:	20000208 	.word	0x20000208
 80040f8:	2000020c 	.word	0x2000020c
 80040fc:	e000ed20 	.word	0xe000ed20
 8004100:	20000010 	.word	0x20000010
 8004104:	e000ef34 	.word	0xe000ef34

08004108 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
        __asm volatile
 800410e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004112:	f383 8811 	msr	BASEPRI, r3
 8004116:	f3bf 8f6f 	isb	sy
 800411a:	f3bf 8f4f 	dsb	sy
 800411e:	607b      	str	r3, [r7, #4]
    }
 8004120:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004122:	4b0f      	ldr	r3, [pc, #60]	; (8004160 <vPortEnterCritical+0x58>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	3301      	adds	r3, #1
 8004128:	4a0d      	ldr	r2, [pc, #52]	; (8004160 <vPortEnterCritical+0x58>)
 800412a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800412c:	4b0c      	ldr	r3, [pc, #48]	; (8004160 <vPortEnterCritical+0x58>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d10f      	bne.n	8004154 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004134:	4b0b      	ldr	r3, [pc, #44]	; (8004164 <vPortEnterCritical+0x5c>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00a      	beq.n	8004154 <vPortEnterCritical+0x4c>
        __asm volatile
 800413e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004142:	f383 8811 	msr	BASEPRI, r3
 8004146:	f3bf 8f6f 	isb	sy
 800414a:	f3bf 8f4f 	dsb	sy
 800414e:	603b      	str	r3, [r7, #0]
    }
 8004150:	bf00      	nop
 8004152:	e7fe      	b.n	8004152 <vPortEnterCritical+0x4a>
    }
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr
 8004160:	20000010 	.word	0x20000010
 8004164:	e000ed04 	.word	0xe000ed04

08004168 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800416e:	4b12      	ldr	r3, [pc, #72]	; (80041b8 <vPortExitCritical+0x50>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10a      	bne.n	800418c <vPortExitCritical+0x24>
        __asm volatile
 8004176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800417a:	f383 8811 	msr	BASEPRI, r3
 800417e:	f3bf 8f6f 	isb	sy
 8004182:	f3bf 8f4f 	dsb	sy
 8004186:	607b      	str	r3, [r7, #4]
    }
 8004188:	bf00      	nop
 800418a:	e7fe      	b.n	800418a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800418c:	4b0a      	ldr	r3, [pc, #40]	; (80041b8 <vPortExitCritical+0x50>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	3b01      	subs	r3, #1
 8004192:	4a09      	ldr	r2, [pc, #36]	; (80041b8 <vPortExitCritical+0x50>)
 8004194:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004196:	4b08      	ldr	r3, [pc, #32]	; (80041b8 <vPortExitCritical+0x50>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d105      	bne.n	80041aa <vPortExitCritical+0x42>
 800419e:	2300      	movs	r3, #0
 80041a0:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80041a8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80041aa:	bf00      	nop
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	20000010 	.word	0x20000010
 80041bc:	00000000 	.word	0x00000000

080041c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80041c0:	f3ef 8009 	mrs	r0, PSP
 80041c4:	f3bf 8f6f 	isb	sy
 80041c8:	4b15      	ldr	r3, [pc, #84]	; (8004220 <pxCurrentTCBConst>)
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	f01e 0f10 	tst.w	lr, #16
 80041d0:	bf08      	it	eq
 80041d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80041d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041da:	6010      	str	r0, [r2, #0]
 80041dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80041e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80041e4:	f380 8811 	msr	BASEPRI, r0
 80041e8:	f3bf 8f4f 	dsb	sy
 80041ec:	f3bf 8f6f 	isb	sy
 80041f0:	f7ff f862 	bl	80032b8 <vTaskSwitchContext>
 80041f4:	f04f 0000 	mov.w	r0, #0
 80041f8:	f380 8811 	msr	BASEPRI, r0
 80041fc:	bc09      	pop	{r0, r3}
 80041fe:	6819      	ldr	r1, [r3, #0]
 8004200:	6808      	ldr	r0, [r1, #0]
 8004202:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004206:	f01e 0f10 	tst.w	lr, #16
 800420a:	bf08      	it	eq
 800420c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004210:	f380 8809 	msr	PSP, r0
 8004214:	f3bf 8f6f 	isb	sy
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	f3af 8000 	nop.w

08004220 <pxCurrentTCBConst>:
 8004220:	200000c8 	.word	0x200000c8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004224:	bf00      	nop
 8004226:	bf00      	nop

08004228 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
        __asm volatile
 800422e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004232:	f383 8811 	msr	BASEPRI, r3
 8004236:	f3bf 8f6f 	isb	sy
 800423a:	f3bf 8f4f 	dsb	sy
 800423e:	607b      	str	r3, [r7, #4]
    }
 8004240:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004242:	f7fe ff23 	bl	800308c <xTaskIncrementTick>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d003      	beq.n	8004254 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800424c:	4b06      	ldr	r3, [pc, #24]	; (8004268 <SysTick_Handler+0x40>)
 800424e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004252:	601a      	str	r2, [r3, #0]
 8004254:	2300      	movs	r3, #0
 8004256:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	f383 8811 	msr	BASEPRI, r3
    }
 800425e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004260:	bf00      	nop
 8004262:	3708      	adds	r7, #8
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	e000ed04 	.word	0xe000ed04

0800426c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800426c:	b480      	push	{r7}
 800426e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004270:	4b0b      	ldr	r3, [pc, #44]	; (80042a0 <vPortSetupTimerInterrupt+0x34>)
 8004272:	2200      	movs	r2, #0
 8004274:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004276:	4b0b      	ldr	r3, [pc, #44]	; (80042a4 <vPortSetupTimerInterrupt+0x38>)
 8004278:	2200      	movs	r2, #0
 800427a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800427c:	4b0a      	ldr	r3, [pc, #40]	; (80042a8 <vPortSetupTimerInterrupt+0x3c>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a0a      	ldr	r2, [pc, #40]	; (80042ac <vPortSetupTimerInterrupt+0x40>)
 8004282:	fba2 2303 	umull	r2, r3, r2, r3
 8004286:	099b      	lsrs	r3, r3, #6
 8004288:	4a09      	ldr	r2, [pc, #36]	; (80042b0 <vPortSetupTimerInterrupt+0x44>)
 800428a:	3b01      	subs	r3, #1
 800428c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800428e:	4b04      	ldr	r3, [pc, #16]	; (80042a0 <vPortSetupTimerInterrupt+0x34>)
 8004290:	2207      	movs	r2, #7
 8004292:	601a      	str	r2, [r3, #0]
}
 8004294:	bf00      	nop
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	e000e010 	.word	0xe000e010
 80042a4:	e000e018 	.word	0xe000e018
 80042a8:	20000000 	.word	0x20000000
 80042ac:	10624dd3 	.word	0x10624dd3
 80042b0:	e000e014 	.word	0xe000e014

080042b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80042b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80042c4 <vPortEnableVFP+0x10>
 80042b8:	6801      	ldr	r1, [r0, #0]
 80042ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80042be:	6001      	str	r1, [r0, #0]
 80042c0:	4770      	bx	lr
 80042c2:	0000      	.short	0x0000
 80042c4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80042c8:	bf00      	nop
 80042ca:	bf00      	nop

080042cc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b08a      	sub	sp, #40	; 0x28
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80042d4:	2300      	movs	r3, #0
 80042d6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80042d8:	f7fe fdbe 	bl	8002e58 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80042dc:	4b53      	ldr	r3, [pc, #332]	; (800442c <pvPortMalloc+0x160>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d101      	bne.n	80042e8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80042e4:	f000 f908 	bl	80044f8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d012      	beq.n	8004314 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80042ee:	2208      	movs	r2, #8
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f003 0307 	and.w	r3, r3, #7
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	3308      	adds	r3, #8
 80042fa:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	43db      	mvns	r3, r3
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	429a      	cmp	r2, r3
 8004304:	d804      	bhi.n	8004310 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	4413      	add	r3, r2
 800430c:	607b      	str	r3, [r7, #4]
 800430e:	e001      	b.n	8004314 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004310:	2300      	movs	r3, #0
 8004312:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	db70      	blt.n	80043fc <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d06d      	beq.n	80043fc <pvPortMalloc+0x130>
 8004320:	4b43      	ldr	r3, [pc, #268]	; (8004430 <pvPortMalloc+0x164>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	429a      	cmp	r2, r3
 8004328:	d868      	bhi.n	80043fc <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800432a:	4b42      	ldr	r3, [pc, #264]	; (8004434 <pvPortMalloc+0x168>)
 800432c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800432e:	4b41      	ldr	r3, [pc, #260]	; (8004434 <pvPortMalloc+0x168>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004334:	e004      	b.n	8004340 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8004336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004338:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800433a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	429a      	cmp	r2, r3
 8004348:	d903      	bls.n	8004352 <pvPortMalloc+0x86>
 800434a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1f1      	bne.n	8004336 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004352:	4b36      	ldr	r3, [pc, #216]	; (800442c <pvPortMalloc+0x160>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004358:	429a      	cmp	r2, r3
 800435a:	d04f      	beq.n	80043fc <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800435c:	6a3b      	ldr	r3, [r7, #32]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2208      	movs	r2, #8
 8004362:	4413      	add	r3, r2
 8004364:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	6a3b      	ldr	r3, [r7, #32]
 800436c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800436e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	1ad2      	subs	r2, r2, r3
 8004376:	2308      	movs	r3, #8
 8004378:	005b      	lsls	r3, r3, #1
 800437a:	429a      	cmp	r2, r3
 800437c:	d91f      	bls.n	80043be <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800437e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4413      	add	r3, r2
 8004384:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	f003 0307 	and.w	r3, r3, #7
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00a      	beq.n	80043a6 <pvPortMalloc+0xda>
        __asm volatile
 8004390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004394:	f383 8811 	msr	BASEPRI, r3
 8004398:	f3bf 8f6f 	isb	sy
 800439c:	f3bf 8f4f 	dsb	sy
 80043a0:	613b      	str	r3, [r7, #16]
    }
 80043a2:	bf00      	nop
 80043a4:	e7fe      	b.n	80043a4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80043a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a8:	685a      	ldr	r2, [r3, #4]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	1ad2      	subs	r2, r2, r3
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80043b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80043b8:	6978      	ldr	r0, [r7, #20]
 80043ba:	f000 f8f9 	bl	80045b0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80043be:	4b1c      	ldr	r3, [pc, #112]	; (8004430 <pvPortMalloc+0x164>)
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	4a19      	ldr	r2, [pc, #100]	; (8004430 <pvPortMalloc+0x164>)
 80043ca:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80043cc:	4b18      	ldr	r3, [pc, #96]	; (8004430 <pvPortMalloc+0x164>)
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	4b19      	ldr	r3, [pc, #100]	; (8004438 <pvPortMalloc+0x16c>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d203      	bcs.n	80043e0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80043d8:	4b15      	ldr	r3, [pc, #84]	; (8004430 <pvPortMalloc+0x164>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a16      	ldr	r2, [pc, #88]	; (8004438 <pvPortMalloc+0x16c>)
 80043de:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80043e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80043e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ea:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80043ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ee:	2200      	movs	r2, #0
 80043f0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80043f2:	4b12      	ldr	r3, [pc, #72]	; (800443c <pvPortMalloc+0x170>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	3301      	adds	r3, #1
 80043f8:	4a10      	ldr	r2, [pc, #64]	; (800443c <pvPortMalloc+0x170>)
 80043fa:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80043fc:	f7fe fd3a 	bl	8002e74 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	f003 0307 	and.w	r3, r3, #7
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00a      	beq.n	8004420 <pvPortMalloc+0x154>
        __asm volatile
 800440a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440e:	f383 8811 	msr	BASEPRI, r3
 8004412:	f3bf 8f6f 	isb	sy
 8004416:	f3bf 8f4f 	dsb	sy
 800441a:	60fb      	str	r3, [r7, #12]
    }
 800441c:	bf00      	nop
 800441e:	e7fe      	b.n	800441e <pvPortMalloc+0x152>
    return pvReturn;
 8004420:	69fb      	ldr	r3, [r7, #28]
}
 8004422:	4618      	mov	r0, r3
 8004424:	3728      	adds	r7, #40	; 0x28
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	20012e18 	.word	0x20012e18
 8004430:	20012e1c 	.word	0x20012e1c
 8004434:	20012e10 	.word	0x20012e10
 8004438:	20012e20 	.word	0x20012e20
 800443c:	20012e24 	.word	0x20012e24

08004440 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b086      	sub	sp, #24
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d049      	beq.n	80044e6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004452:	2308      	movs	r3, #8
 8004454:	425b      	negs	r3, r3
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	4413      	add	r3, r2
 800445a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	2b00      	cmp	r3, #0
 8004466:	db0a      	blt.n	800447e <vPortFree+0x3e>
        __asm volatile
 8004468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800446c:	f383 8811 	msr	BASEPRI, r3
 8004470:	f3bf 8f6f 	isb	sy
 8004474:	f3bf 8f4f 	dsb	sy
 8004478:	60fb      	str	r3, [r7, #12]
    }
 800447a:	bf00      	nop
 800447c:	e7fe      	b.n	800447c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00a      	beq.n	800449c <vPortFree+0x5c>
        __asm volatile
 8004486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800448a:	f383 8811 	msr	BASEPRI, r3
 800448e:	f3bf 8f6f 	isb	sy
 8004492:	f3bf 8f4f 	dsb	sy
 8004496:	60bb      	str	r3, [r7, #8]
    }
 8004498:	bf00      	nop
 800449a:	e7fe      	b.n	800449a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	0fdb      	lsrs	r3, r3, #31
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d01c      	beq.n	80044e6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d118      	bne.n	80044e6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80044c0:	f7fe fcca 	bl	8002e58 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	685a      	ldr	r2, [r3, #4]
 80044c8:	4b09      	ldr	r3, [pc, #36]	; (80044f0 <vPortFree+0xb0>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4413      	add	r3, r2
 80044ce:	4a08      	ldr	r2, [pc, #32]	; (80044f0 <vPortFree+0xb0>)
 80044d0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80044d2:	6938      	ldr	r0, [r7, #16]
 80044d4:	f000 f86c 	bl	80045b0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80044d8:	4b06      	ldr	r3, [pc, #24]	; (80044f4 <vPortFree+0xb4>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	3301      	adds	r3, #1
 80044de:	4a05      	ldr	r2, [pc, #20]	; (80044f4 <vPortFree+0xb4>)
 80044e0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80044e2:	f7fe fcc7 	bl	8002e74 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80044e6:	bf00      	nop
 80044e8:	3718      	adds	r7, #24
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	20012e1c 	.word	0x20012e1c
 80044f4:	20012e28 	.word	0x20012e28

080044f8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80044fe:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004502:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004504:	4b25      	ldr	r3, [pc, #148]	; (800459c <prvHeapInit+0xa4>)
 8004506:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f003 0307 	and.w	r3, r3, #7
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00c      	beq.n	800452c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	3307      	adds	r3, #7
 8004516:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f023 0307 	bic.w	r3, r3, #7
 800451e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004520:	68ba      	ldr	r2, [r7, #8]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	4a1d      	ldr	r2, [pc, #116]	; (800459c <prvHeapInit+0xa4>)
 8004528:	4413      	add	r3, r2
 800452a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004530:	4a1b      	ldr	r2, [pc, #108]	; (80045a0 <prvHeapInit+0xa8>)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004536:	4b1a      	ldr	r3, [pc, #104]	; (80045a0 <prvHeapInit+0xa8>)
 8004538:	2200      	movs	r2, #0
 800453a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	4413      	add	r3, r2
 8004542:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004544:	2208      	movs	r2, #8
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	1a9b      	subs	r3, r3, r2
 800454a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f023 0307 	bic.w	r3, r3, #7
 8004552:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	4a13      	ldr	r2, [pc, #76]	; (80045a4 <prvHeapInit+0xac>)
 8004558:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800455a:	4b12      	ldr	r3, [pc, #72]	; (80045a4 <prvHeapInit+0xac>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2200      	movs	r2, #0
 8004560:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004562:	4b10      	ldr	r3, [pc, #64]	; (80045a4 <prvHeapInit+0xac>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2200      	movs	r2, #0
 8004568:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	1ad2      	subs	r2, r2, r3
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004578:	4b0a      	ldr	r3, [pc, #40]	; (80045a4 <prvHeapInit+0xac>)
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	4a08      	ldr	r2, [pc, #32]	; (80045a8 <prvHeapInit+0xb0>)
 8004586:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	4a07      	ldr	r2, [pc, #28]	; (80045ac <prvHeapInit+0xb4>)
 800458e:	6013      	str	r3, [r2, #0]
}
 8004590:	bf00      	nop
 8004592:	3714      	adds	r7, #20
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr
 800459c:	20000210 	.word	0x20000210
 80045a0:	20012e10 	.word	0x20012e10
 80045a4:	20012e18 	.word	0x20012e18
 80045a8:	20012e20 	.word	0x20012e20
 80045ac:	20012e1c 	.word	0x20012e1c

080045b0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80045b8:	4b28      	ldr	r3, [pc, #160]	; (800465c <prvInsertBlockIntoFreeList+0xac>)
 80045ba:	60fb      	str	r3, [r7, #12]
 80045bc:	e002      	b.n	80045c4 <prvInsertBlockIntoFreeList+0x14>
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	60fb      	str	r3, [r7, #12]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d8f7      	bhi.n	80045be <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	68ba      	ldr	r2, [r7, #8]
 80045d8:	4413      	add	r3, r2
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d108      	bne.n	80045f2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	685a      	ldr	r2, [r3, #4]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	441a      	add	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	441a      	add	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	429a      	cmp	r2, r3
 8004604:	d118      	bne.n	8004638 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	4b15      	ldr	r3, [pc, #84]	; (8004660 <prvInsertBlockIntoFreeList+0xb0>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	429a      	cmp	r2, r3
 8004610:	d00d      	beq.n	800462e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685a      	ldr	r2, [r3, #4]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	441a      	add	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	601a      	str	r2, [r3, #0]
 800462c:	e008      	b.n	8004640 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800462e:	4b0c      	ldr	r3, [pc, #48]	; (8004660 <prvInsertBlockIntoFreeList+0xb0>)
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	601a      	str	r2, [r3, #0]
 8004636:	e003      	b.n	8004640 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	429a      	cmp	r2, r3
 8004646:	d002      	beq.n	800464e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800464e:	bf00      	nop
 8004650:	3714      	adds	r7, #20
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	20012e10 	.word	0x20012e10
 8004660:	20012e18 	.word	0x20012e18

08004664 <__libc_init_array>:
 8004664:	b570      	push	{r4, r5, r6, lr}
 8004666:	4d0d      	ldr	r5, [pc, #52]	; (800469c <__libc_init_array+0x38>)
 8004668:	4c0d      	ldr	r4, [pc, #52]	; (80046a0 <__libc_init_array+0x3c>)
 800466a:	1b64      	subs	r4, r4, r5
 800466c:	10a4      	asrs	r4, r4, #2
 800466e:	2600      	movs	r6, #0
 8004670:	42a6      	cmp	r6, r4
 8004672:	d109      	bne.n	8004688 <__libc_init_array+0x24>
 8004674:	4d0b      	ldr	r5, [pc, #44]	; (80046a4 <__libc_init_array+0x40>)
 8004676:	4c0c      	ldr	r4, [pc, #48]	; (80046a8 <__libc_init_array+0x44>)
 8004678:	f000 f82e 	bl	80046d8 <_init>
 800467c:	1b64      	subs	r4, r4, r5
 800467e:	10a4      	asrs	r4, r4, #2
 8004680:	2600      	movs	r6, #0
 8004682:	42a6      	cmp	r6, r4
 8004684:	d105      	bne.n	8004692 <__libc_init_array+0x2e>
 8004686:	bd70      	pop	{r4, r5, r6, pc}
 8004688:	f855 3b04 	ldr.w	r3, [r5], #4
 800468c:	4798      	blx	r3
 800468e:	3601      	adds	r6, #1
 8004690:	e7ee      	b.n	8004670 <__libc_init_array+0xc>
 8004692:	f855 3b04 	ldr.w	r3, [r5], #4
 8004696:	4798      	blx	r3
 8004698:	3601      	adds	r6, #1
 800469a:	e7f2      	b.n	8004682 <__libc_init_array+0x1e>
 800469c:	08004774 	.word	0x08004774
 80046a0:	08004774 	.word	0x08004774
 80046a4:	08004774 	.word	0x08004774
 80046a8:	08004778 	.word	0x08004778

080046ac <memcpy>:
 80046ac:	440a      	add	r2, r1
 80046ae:	4291      	cmp	r1, r2
 80046b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80046b4:	d100      	bne.n	80046b8 <memcpy+0xc>
 80046b6:	4770      	bx	lr
 80046b8:	b510      	push	{r4, lr}
 80046ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046c2:	4291      	cmp	r1, r2
 80046c4:	d1f9      	bne.n	80046ba <memcpy+0xe>
 80046c6:	bd10      	pop	{r4, pc}

080046c8 <memset>:
 80046c8:	4402      	add	r2, r0
 80046ca:	4603      	mov	r3, r0
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d100      	bne.n	80046d2 <memset+0xa>
 80046d0:	4770      	bx	lr
 80046d2:	f803 1b01 	strb.w	r1, [r3], #1
 80046d6:	e7f9      	b.n	80046cc <memset+0x4>

080046d8 <_init>:
 80046d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046da:	bf00      	nop
 80046dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046de:	bc08      	pop	{r3}
 80046e0:	469e      	mov	lr, r3
 80046e2:	4770      	bx	lr

080046e4 <_fini>:
 80046e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046e6:	bf00      	nop
 80046e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ea:	bc08      	pop	{r3}
 80046ec:	469e      	mov	lr, r3
 80046ee:	4770      	bx	lr
