
MUTEX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ba0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004d30  08004d30  00014d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d78  08004d78  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08004d78  08004d78  00014d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d80  08004d80  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d80  08004d80  00014d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d84  08004d84  00014d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004d88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00012e18  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012e2c  20012e2c  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ef03  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000251b  00000000  00000000  0002ef47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e90  00000000  00000000  00031468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d78  00000000  00000000  000322f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f874  00000000  00000000  00033070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fed6  00000000  00000000  000528e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c628c  00000000  00000000  000627ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00128a46  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c54  00000000  00000000  00128a98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004d18 	.word	0x08004d18

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08004d18 	.word	0x08004d18

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:

//void BUZZER_Task (void *pvParameters);

int main(void)

{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af02      	add	r7, sp, #8

  HAL_Init();
 80004da:	f000 fa91 	bl	8000a00 <HAL_Init>

  SystemClock_Config();
 80004de:	f000 f8ad 	bl	800063c <SystemClock_Config>

  MX_GPIO_Init();
 80004e2:	f000 f909 	bl	80006f8 <MX_GPIO_Init>

  mutexHandle = xSemaphoreCreateMutex();
 80004e6:	2001      	movs	r0, #1
 80004e8:	f001 fe4d 	bl	8002186 <xQueueCreateMutex>
 80004ec:	4603      	mov	r3, r0
 80004ee:	4a11      	ldr	r2, [pc, #68]	; (8000534 <main+0x60>)
 80004f0:	6013      	str	r3, [r2, #0]

  if (mutexHandle == NULL) {
 80004f2:	4b10      	ldr	r3, [pc, #64]	; (8000534 <main+0x60>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d102      	bne.n	8000500 <main+0x2c>

      // Handle mutex creation failure (optional)

      return -1;
 80004fa:	f04f 33ff 	mov.w	r3, #4294967295
 80004fe:	e016      	b.n	800052e <main+0x5a>

  }


  xTaskCreate(LED_Task_1, "LED Task 1", 128, NULL, 2, &ledTaskHandle1);
 8000500:	4b0d      	ldr	r3, [pc, #52]	; (8000538 <main+0x64>)
 8000502:	9301      	str	r3, [sp, #4]
 8000504:	2302      	movs	r3, #2
 8000506:	9300      	str	r3, [sp, #0]
 8000508:	2300      	movs	r3, #0
 800050a:	2280      	movs	r2, #128	; 0x80
 800050c:	490b      	ldr	r1, [pc, #44]	; (800053c <main+0x68>)
 800050e:	480c      	ldr	r0, [pc, #48]	; (8000540 <main+0x6c>)
 8000510:	f002 fad8 	bl	8002ac4 <xTaskCreate>

  xTaskCreate(LED_Task_2,"LED Task 2", 128, NULL, 1, &ledTaskHandle2);
 8000514:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <main+0x70>)
 8000516:	9301      	str	r3, [sp, #4]
 8000518:	2301      	movs	r3, #1
 800051a:	9300      	str	r3, [sp, #0]
 800051c:	2300      	movs	r3, #0
 800051e:	2280      	movs	r2, #128	; 0x80
 8000520:	4909      	ldr	r1, [pc, #36]	; (8000548 <main+0x74>)
 8000522:	480a      	ldr	r0, [pc, #40]	; (800054c <main+0x78>)
 8000524:	f002 face 	bl	8002ac4 <xTaskCreate>

  //xTaskCreate(BUZZER_Task, "BUZZER Task", 128, NULL, 3, &buzzerTaskHandle);

  vTaskStartScheduler();
 8000528:	f002 fd56 	bl	8002fd8 <vTaskStartScheduler>

  while (1)
 800052c:	e7fe      	b.n	800052c <main+0x58>

  {

  }

}
 800052e:	4618      	mov	r0, r3
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	20000038 	.word	0x20000038
 8000538:	20000030 	.word	0x20000030
 800053c:	08004d30 	.word	0x08004d30
 8000540:	08000551 	.word	0x08000551
 8000544:	20000034 	.word	0x20000034
 8000548:	08004d3c 	.word	0x08004d3c
 800054c:	080005c5 	.word	0x080005c5

08000550 <LED_Task_1>:

void LED_Task_1(void *pvParameters) {
 8000550:	b590      	push	{r4, r7, lr}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]

    while (1) {

        xSemaphoreTake(mutexHandle, portMAX_DELAY);
 8000558:	4b15      	ldr	r3, [pc, #84]	; (80005b0 <LED_Task_1+0x60>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f04f 31ff 	mov.w	r1, #4294967295
 8000560:	4618      	mov	r0, r3
 8000562:	f002 f807 	bl	8002574 <xQueueSemaphoreTake>

        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8000566:	2140      	movs	r1, #64	; 0x40
 8000568:	4812      	ldr	r0, [pc, #72]	; (80005b4 <LED_Task_1+0x64>)
 800056a:	f000 fd22 	bl	8000fb2 <HAL_GPIO_TogglePin>

        vTaskPrioritySet(ledTaskHandle2, (uxTaskPriorityGet(ledTaskHandle1) + 1)% configMAX_PRIORITIES); //4
 800056e:	4b12      	ldr	r3, [pc, #72]	; (80005b8 <LED_Task_1+0x68>)
 8000570:	681c      	ldr	r4, [r3, #0]
 8000572:	4b12      	ldr	r3, [pc, #72]	; (80005bc <LED_Task_1+0x6c>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4618      	mov	r0, r3
 8000578:	f002 fc42 	bl	8002e00 <uxTaskPriorityGet>
 800057c:	4603      	mov	r3, r0
 800057e:	1c59      	adds	r1, r3, #1
 8000580:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <LED_Task_1+0x70>)
 8000582:	fba3 2301 	umull	r2, r3, r3, r1
 8000586:	089a      	lsrs	r2, r3, #2
 8000588:	4613      	mov	r3, r2
 800058a:	009b      	lsls	r3, r3, #2
 800058c:	4413      	add	r3, r2
 800058e:	1aca      	subs	r2, r1, r3
 8000590:	4611      	mov	r1, r2
 8000592:	4620      	mov	r0, r4
 8000594:	f002 fc4e 	bl	8002e34 <vTaskPrioritySet>

        xSemaphoreGive(mutexHandle);
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <LED_Task_1+0x60>)
 800059a:	6818      	ldr	r0, [r3, #0]
 800059c:	2300      	movs	r3, #0
 800059e:	2200      	movs	r2, #0
 80005a0:	2100      	movs	r1, #0
 80005a2:	f001 fe09 	bl	80021b8 <xQueueGenericSend>

        vTaskDelay(pdMS_TO_TICKS(500));
 80005a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005aa:	f002 fbf5 	bl	8002d98 <vTaskDelay>
        xSemaphoreTake(mutexHandle, portMAX_DELAY);
 80005ae:	e7d3      	b.n	8000558 <LED_Task_1+0x8>
 80005b0:	20000038 	.word	0x20000038
 80005b4:	40020800 	.word	0x40020800
 80005b8:	20000034 	.word	0x20000034
 80005bc:	20000030 	.word	0x20000030
 80005c0:	cccccccd 	.word	0xcccccccd

080005c4 <LED_Task_2>:
    }

}


void LED_Task_2(void *pvParameters) {
 80005c4:	b590      	push	{r4, r7, lr}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]

    while (1) {

        xSemaphoreTake(mutexHandle, portMAX_DELAY);
 80005cc:	4b16      	ldr	r3, [pc, #88]	; (8000628 <LED_Task_2+0x64>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f04f 31ff 	mov.w	r1, #4294967295
 80005d4:	4618      	mov	r0, r3
 80005d6:	f001 ffcd 	bl	8002574 <xQueueSemaphoreTake>

        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
 80005da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005de:	4813      	ldr	r0, [pc, #76]	; (800062c <LED_Task_2+0x68>)
 80005e0:	f000 fce7 	bl	8000fb2 <HAL_GPIO_TogglePin>

        vTaskPrioritySet(ledTaskHandle1, (uxTaskPriorityGet(ledTaskHandle2) + 1)% configMAX_PRIORITIES); //5
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <LED_Task_2+0x6c>)
 80005e6:	681c      	ldr	r4, [r3, #0]
 80005e8:	4b12      	ldr	r3, [pc, #72]	; (8000634 <LED_Task_2+0x70>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f002 fc07 	bl	8002e00 <uxTaskPriorityGet>
 80005f2:	4603      	mov	r3, r0
 80005f4:	1c59      	adds	r1, r3, #1
 80005f6:	4b10      	ldr	r3, [pc, #64]	; (8000638 <LED_Task_2+0x74>)
 80005f8:	fba3 2301 	umull	r2, r3, r3, r1
 80005fc:	089a      	lsrs	r2, r3, #2
 80005fe:	4613      	mov	r3, r2
 8000600:	009b      	lsls	r3, r3, #2
 8000602:	4413      	add	r3, r2
 8000604:	1aca      	subs	r2, r1, r3
 8000606:	4611      	mov	r1, r2
 8000608:	4620      	mov	r0, r4
 800060a:	f002 fc13 	bl	8002e34 <vTaskPrioritySet>

        xSemaphoreGive(mutexHandle);
 800060e:	4b06      	ldr	r3, [pc, #24]	; (8000628 <LED_Task_2+0x64>)
 8000610:	6818      	ldr	r0, [r3, #0]
 8000612:	2300      	movs	r3, #0
 8000614:	2200      	movs	r2, #0
 8000616:	2100      	movs	r1, #0
 8000618:	f001 fdce 	bl	80021b8 <xQueueGenericSend>

        vTaskDelay(pdMS_TO_TICKS(1000));
 800061c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000620:	f002 fbba 	bl	8002d98 <vTaskDelay>
        xSemaphoreTake(mutexHandle, portMAX_DELAY);
 8000624:	e7d2      	b.n	80005cc <LED_Task_2+0x8>
 8000626:	bf00      	nop
 8000628:	20000038 	.word	0x20000038
 800062c:	40020400 	.word	0x40020400
 8000630:	20000030 	.word	0x20000030
 8000634:	20000034 	.word	0x20000034
 8000638:	cccccccd 	.word	0xcccccccd

0800063c <SystemClock_Config>:
*/


void SystemClock_Config(void)

{
 800063c:	b580      	push	{r7, lr}
 800063e:	b094      	sub	sp, #80	; 0x50
 8000640:	af00      	add	r7, sp, #0

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 0320 	add.w	r3, r7, #32
 8000646:	2230      	movs	r2, #48	; 0x30
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f004 fb5c 	bl	8004d08 <memset>

  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage

  */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000660:	2300      	movs	r3, #0
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	4b22      	ldr	r3, [pc, #136]	; (80006f0 <SystemClock_Config+0xb4>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	4a21      	ldr	r2, [pc, #132]	; (80006f0 <SystemClock_Config+0xb4>)
 800066a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066e:	6413      	str	r3, [r2, #64]	; 0x40
 8000670:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <SystemClock_Config+0xb4>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800067c:	2300      	movs	r3, #0
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	4b1c      	ldr	r3, [pc, #112]	; (80006f4 <SystemClock_Config+0xb8>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a1b      	ldr	r2, [pc, #108]	; (80006f4 <SystemClock_Config+0xb8>)
 8000686:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800068a:	6013      	str	r3, [r2, #0]
 800068c:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <SystemClock_Config+0xb8>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]

  * in the RCC_OscInitTypeDef structure.

  */

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000698:	2302      	movs	r3, #2
 800069a:	623b      	str	r3, [r7, #32]

  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800069c:	2301      	movs	r3, #1
 800069e:	62fb      	str	r3, [r7, #44]	; 0x2c

  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a0:	2310      	movs	r3, #16
 80006a2:	633b      	str	r3, [r7, #48]	; 0x30

  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006a4:	2300      	movs	r3, #0
 80006a6:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a8:	f107 0320 	add.w	r3, r7, #32
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 fc9b 	bl	8000fe8 <HAL_RCC_OscConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x80>

  {

    Error_Handler();
 80006b8:	f000 f89a 	bl	80007f0 <Error_Handler>

  /** Initializes the CPU, AHB and APB buses clocks

  */

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006bc:	230f      	movs	r3, #15
 80006be:	60fb      	str	r3, [r7, #12]

                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006c0:	2300      	movs	r3, #0
 80006c2:	613b      	str	r3, [r7, #16]

  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]

  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61bb      	str	r3, [r7, #24]

  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 fefe 	bl	80014d8 <HAL_RCC_ClockConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0xaa>

  {

    Error_Handler();
 80006e2:	f000 f885 	bl	80007f0 <Error_Handler>

  }

}
 80006e6:	bf00      	nop
 80006e8:	3750      	adds	r7, #80	; 0x50
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40007000 	.word	0x40007000

080006f8 <MX_GPIO_Init>:

  */

static void MX_GPIO_Init(void)

{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b088      	sub	sp, #32
 80006fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fe:	f107 030c 	add.w	r3, r7, #12
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */

  __HAL_RCC_GPIOB_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	4b2b      	ldr	r3, [pc, #172]	; (80007c0 <MX_GPIO_Init+0xc8>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a2a      	ldr	r2, [pc, #168]	; (80007c0 <MX_GPIO_Init+0xc8>)
 8000718:	f043 0302 	orr.w	r3, r3, #2
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b28      	ldr	r3, [pc, #160]	; (80007c0 <MX_GPIO_Init+0xc8>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0302 	and.w	r3, r3, #2
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	68bb      	ldr	r3, [r7, #8]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	4b24      	ldr	r3, [pc, #144]	; (80007c0 <MX_GPIO_Init+0xc8>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a23      	ldr	r2, [pc, #140]	; (80007c0 <MX_GPIO_Init+0xc8>)
 8000734:	f043 0304 	orr.w	r3, r3, #4
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b21      	ldr	r3, [pc, #132]	; (80007c0 <MX_GPIO_Init+0xc8>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0304 	and.w	r3, r3, #4
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	603b      	str	r3, [r7, #0]
 800074a:	4b1d      	ldr	r3, [pc, #116]	; (80007c0 <MX_GPIO_Init+0xc8>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a1c      	ldr	r2, [pc, #112]	; (80007c0 <MX_GPIO_Init+0xc8>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b1a      	ldr	r3, [pc, #104]	; (80007c0 <MX_GPIO_Init+0xc8>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	603b      	str	r3, [r7, #0]
 8000760:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000768:	4816      	ldr	r0, [pc, #88]	; (80007c4 <MX_GPIO_Init+0xcc>)
 800076a:	f000 fc09 	bl	8000f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_9, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000774:	4814      	ldr	r0, [pc, #80]	; (80007c8 <MX_GPIO_Init+0xd0>)
 8000776:	f000 fc03 	bl	8000f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB15 */

  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800077a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800077e:	60fb      	str	r3, [r7, #12]

  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000780:	2301      	movs	r3, #1
 8000782:	613b      	str	r3, [r7, #16]

  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]

  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000788:	2300      	movs	r3, #0
 800078a:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	4619      	mov	r1, r3
 8000792:	480c      	ldr	r0, [pc, #48]	; (80007c4 <MX_GPIO_Init+0xcc>)
 8000794:	f000 fa58 	bl	8000c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC9 */

  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000798:	f44f 7310 	mov.w	r3, #576	; 0x240
 800079c:	60fb      	str	r3, [r7, #12]

  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079e:	2301      	movs	r3, #1
 80007a0:	613b      	str	r3, [r7, #16]

  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]

  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007aa:	f107 030c 	add.w	r3, r7, #12
 80007ae:	4619      	mov	r1, r3
 80007b0:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_GPIO_Init+0xd0>)
 80007b2:	f000 fa49 	bl	8000c48 <HAL_GPIO_Init>

}
 80007b6:	bf00      	nop
 80007b8:	3720      	adds	r7, #32
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40020400 	.word	0x40020400
 80007c8:	40020800 	.word	0x40020800

080007cc <HAL_TIM_PeriodElapsedCallback>:

  */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)

{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */

  if (htim->Instance == TIM6) {
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a04      	ldr	r2, [pc, #16]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d101      	bne.n	80007e2 <HAL_TIM_PeriodElapsedCallback+0x16>

    HAL_IncTick();
 80007de:	f000 f931 	bl	8000a44 <HAL_IncTick>

  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */

}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40001000 	.word	0x40001000

080007f0 <Error_Handler>:

  */

void Error_Handler(void)

{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN Error_Handler_Debug */

  /* USER CODE END Error_Handler_Debug */

}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
	...

08000800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	4b10      	ldr	r3, [pc, #64]	; (800084c <HAL_MspInit+0x4c>)
 800080c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080e:	4a0f      	ldr	r2, [pc, #60]	; (800084c <HAL_MspInit+0x4c>)
 8000810:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000814:	6453      	str	r3, [r2, #68]	; 0x44
 8000816:	4b0d      	ldr	r3, [pc, #52]	; (800084c <HAL_MspInit+0x4c>)
 8000818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	603b      	str	r3, [r7, #0]
 8000826:	4b09      	ldr	r3, [pc, #36]	; (800084c <HAL_MspInit+0x4c>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	4a08      	ldr	r2, [pc, #32]	; (800084c <HAL_MspInit+0x4c>)
 800082c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000830:	6413      	str	r3, [r2, #64]	; 0x40
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <HAL_MspInit+0x4c>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800083e:	bf00      	nop
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	40023800 	.word	0x40023800

08000850 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08e      	sub	sp, #56	; 0x38
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000858:	2300      	movs	r3, #0
 800085a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800085c:	2300      	movs	r3, #0
 800085e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000860:	2300      	movs	r3, #0
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	4b33      	ldr	r3, [pc, #204]	; (8000934 <HAL_InitTick+0xe4>)
 8000866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000868:	4a32      	ldr	r2, [pc, #200]	; (8000934 <HAL_InitTick+0xe4>)
 800086a:	f043 0310 	orr.w	r3, r3, #16
 800086e:	6413      	str	r3, [r2, #64]	; 0x40
 8000870:	4b30      	ldr	r3, [pc, #192]	; (8000934 <HAL_InitTick+0xe4>)
 8000872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000874:	f003 0310 	and.w	r3, r3, #16
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800087c:	f107 0210 	add.w	r2, r7, #16
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	4611      	mov	r1, r2
 8000886:	4618      	mov	r0, r3
 8000888:	f000 fff2 	bl	8001870 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800088c:	6a3b      	ldr	r3, [r7, #32]
 800088e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000892:	2b00      	cmp	r3, #0
 8000894:	d103      	bne.n	800089e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000896:	f000 ffd7 	bl	8001848 <HAL_RCC_GetPCLK1Freq>
 800089a:	6378      	str	r0, [r7, #52]	; 0x34
 800089c:	e004      	b.n	80008a8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800089e:	f000 ffd3 	bl	8001848 <HAL_RCC_GetPCLK1Freq>
 80008a2:	4603      	mov	r3, r0
 80008a4:	005b      	lsls	r3, r3, #1
 80008a6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008aa:	4a23      	ldr	r2, [pc, #140]	; (8000938 <HAL_InitTick+0xe8>)
 80008ac:	fba2 2303 	umull	r2, r3, r2, r3
 80008b0:	0c9b      	lsrs	r3, r3, #18
 80008b2:	3b01      	subs	r3, #1
 80008b4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80008b6:	4b21      	ldr	r3, [pc, #132]	; (800093c <HAL_InitTick+0xec>)
 80008b8:	4a21      	ldr	r2, [pc, #132]	; (8000940 <HAL_InitTick+0xf0>)
 80008ba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80008bc:	4b1f      	ldr	r3, [pc, #124]	; (800093c <HAL_InitTick+0xec>)
 80008be:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008c2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80008c4:	4a1d      	ldr	r2, [pc, #116]	; (800093c <HAL_InitTick+0xec>)
 80008c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008c8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80008ca:	4b1c      	ldr	r3, [pc, #112]	; (800093c <HAL_InitTick+0xec>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d0:	4b1a      	ldr	r3, [pc, #104]	; (800093c <HAL_InitTick+0xec>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d6:	4b19      	ldr	r3, [pc, #100]	; (800093c <HAL_InitTick+0xec>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80008dc:	4817      	ldr	r0, [pc, #92]	; (800093c <HAL_InitTick+0xec>)
 80008de:	f000 fff9 	bl	80018d4 <HAL_TIM_Base_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80008e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d11b      	bne.n	8000928 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80008f0:	4812      	ldr	r0, [pc, #72]	; (800093c <HAL_InitTick+0xec>)
 80008f2:	f001 f849 	bl	8001988 <HAL_TIM_Base_Start_IT>
 80008f6:	4603      	mov	r3, r0
 80008f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80008fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000900:	2b00      	cmp	r3, #0
 8000902:	d111      	bne.n	8000928 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000904:	2036      	movs	r0, #54	; 0x36
 8000906:	f000 f991 	bl	8000c2c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2b0f      	cmp	r3, #15
 800090e:	d808      	bhi.n	8000922 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000910:	2200      	movs	r2, #0
 8000912:	6879      	ldr	r1, [r7, #4]
 8000914:	2036      	movs	r0, #54	; 0x36
 8000916:	f000 f96d 	bl	8000bf4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800091a:	4a0a      	ldr	r2, [pc, #40]	; (8000944 <HAL_InitTick+0xf4>)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	6013      	str	r3, [r2, #0]
 8000920:	e002      	b.n	8000928 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000922:	2301      	movs	r3, #1
 8000924:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000928:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800092c:	4618      	mov	r0, r3
 800092e:	3738      	adds	r7, #56	; 0x38
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40023800 	.word	0x40023800
 8000938:	431bde83 	.word	0x431bde83
 800093c:	2000003c 	.word	0x2000003c
 8000940:	40001000 	.word	0x40001000
 8000944:	20000004 	.word	0x20000004

08000948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800094c:	e7fe      	b.n	800094c <NMI_Handler+0x4>

0800094e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000952:	e7fe      	b.n	8000952 <HardFault_Handler+0x4>

08000954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000958:	e7fe      	b.n	8000958 <MemManage_Handler+0x4>

0800095a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800095e:	e7fe      	b.n	800095e <BusFault_Handler+0x4>

08000960 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000964:	e7fe      	b.n	8000964 <UsageFault_Handler+0x4>

08000966 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000978:	4802      	ldr	r0, [pc, #8]	; (8000984 <TIM6_DAC_IRQHandler+0x10>)
 800097a:	f001 f875 	bl	8001a68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	2000003c 	.word	0x2000003c

08000988 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <SystemInit+0x20>)
 800098e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000992:	4a05      	ldr	r2, [pc, #20]	; (80009a8 <SystemInit+0x20>)
 8000994:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000998:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009b0:	480d      	ldr	r0, [pc, #52]	; (80009e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009b2:	490e      	ldr	r1, [pc, #56]	; (80009ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009b4:	4a0e      	ldr	r2, [pc, #56]	; (80009f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b8:	e002      	b.n	80009c0 <LoopCopyDataInit>

080009ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009be:	3304      	adds	r3, #4

080009c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c4:	d3f9      	bcc.n	80009ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009c6:	4a0b      	ldr	r2, [pc, #44]	; (80009f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009c8:	4c0b      	ldr	r4, [pc, #44]	; (80009f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009cc:	e001      	b.n	80009d2 <LoopFillZerobss>

080009ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d0:	3204      	adds	r2, #4

080009d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d4:	d3fb      	bcc.n	80009ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009d6:	f7ff ffd7 	bl	8000988 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009da:	f004 f963 	bl	8004ca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009de:	f7ff fd79 	bl	80004d4 <main>
  bx  lr    
 80009e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009ec:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80009f0:	08004d88 	.word	0x08004d88
  ldr r2, =_sbss
 80009f4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80009f8:	20012e2c 	.word	0x20012e2c

080009fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009fc:	e7fe      	b.n	80009fc <ADC_IRQHandler>
	...

08000a00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a04:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <HAL_Init+0x40>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a0d      	ldr	r2, [pc, #52]	; (8000a40 <HAL_Init+0x40>)
 8000a0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a10:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <HAL_Init+0x40>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a0a      	ldr	r2, [pc, #40]	; (8000a40 <HAL_Init+0x40>)
 8000a16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a1c:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <HAL_Init+0x40>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a07      	ldr	r2, [pc, #28]	; (8000a40 <HAL_Init+0x40>)
 8000a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a28:	2003      	movs	r0, #3
 8000a2a:	f000 f8d8 	bl	8000bde <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a2e:	200f      	movs	r0, #15
 8000a30:	f7ff ff0e 	bl	8000850 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a34:	f7ff fee4 	bl	8000800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a38:	2300      	movs	r3, #0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40023c00 	.word	0x40023c00

08000a44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <HAL_IncTick+0x20>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_IncTick+0x24>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4413      	add	r3, r2
 8000a54:	4a04      	ldr	r2, [pc, #16]	; (8000a68 <HAL_IncTick+0x24>)
 8000a56:	6013      	str	r3, [r2, #0]
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	20000008 	.word	0x20000008
 8000a68:	20000084 	.word	0x20000084

08000a6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a70:	4b03      	ldr	r3, [pc, #12]	; (8000a80 <HAL_GetTick+0x14>)
 8000a72:	681b      	ldr	r3, [r3, #0]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	20000084 	.word	0x20000084

08000a84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f003 0307 	and.w	r3, r3, #7
 8000a92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a9a:	68ba      	ldr	r2, [r7, #8]
 8000a9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ab6:	4a04      	ldr	r2, [pc, #16]	; (8000ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	60d3      	str	r3, [r2, #12]
}
 8000abc:	bf00      	nop
 8000abe:	3714      	adds	r7, #20
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad0:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	0a1b      	lsrs	r3, r3, #8
 8000ad6:	f003 0307 	and.w	r3, r3, #7
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	db0b      	blt.n	8000b12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	f003 021f 	and.w	r2, r3, #31
 8000b00:	4907      	ldr	r1, [pc, #28]	; (8000b20 <__NVIC_EnableIRQ+0x38>)
 8000b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b06:	095b      	lsrs	r3, r3, #5
 8000b08:	2001      	movs	r0, #1
 8000b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	e000e100 	.word	0xe000e100

08000b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	6039      	str	r1, [r7, #0]
 8000b2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	db0a      	blt.n	8000b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	490c      	ldr	r1, [pc, #48]	; (8000b70 <__NVIC_SetPriority+0x4c>)
 8000b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b42:	0112      	lsls	r2, r2, #4
 8000b44:	b2d2      	uxtb	r2, r2
 8000b46:	440b      	add	r3, r1
 8000b48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b4c:	e00a      	b.n	8000b64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	b2da      	uxtb	r2, r3
 8000b52:	4908      	ldr	r1, [pc, #32]	; (8000b74 <__NVIC_SetPriority+0x50>)
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	f003 030f 	and.w	r3, r3, #15
 8000b5a:	3b04      	subs	r3, #4
 8000b5c:	0112      	lsls	r2, r2, #4
 8000b5e:	b2d2      	uxtb	r2, r2
 8000b60:	440b      	add	r3, r1
 8000b62:	761a      	strb	r2, [r3, #24]
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000e100 	.word	0xe000e100
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b089      	sub	sp, #36	; 0x24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	f003 0307 	and.w	r3, r3, #7
 8000b8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	f1c3 0307 	rsb	r3, r3, #7
 8000b92:	2b04      	cmp	r3, #4
 8000b94:	bf28      	it	cs
 8000b96:	2304      	movcs	r3, #4
 8000b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	3304      	adds	r3, #4
 8000b9e:	2b06      	cmp	r3, #6
 8000ba0:	d902      	bls.n	8000ba8 <NVIC_EncodePriority+0x30>
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	3b03      	subs	r3, #3
 8000ba6:	e000      	b.n	8000baa <NVIC_EncodePriority+0x32>
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bac:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb0:	69bb      	ldr	r3, [r7, #24]
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	43da      	mvns	r2, r3
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	401a      	ands	r2, r3
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bca:	43d9      	mvns	r1, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd0:	4313      	orrs	r3, r2
         );
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3724      	adds	r7, #36	; 0x24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr

08000bde <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000be6:	6878      	ldr	r0, [r7, #4]
 8000be8:	f7ff ff4c 	bl	8000a84 <__NVIC_SetPriorityGrouping>
}
 8000bec:	bf00      	nop
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
 8000c00:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c02:	2300      	movs	r3, #0
 8000c04:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c06:	f7ff ff61 	bl	8000acc <__NVIC_GetPriorityGrouping>
 8000c0a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c0c:	687a      	ldr	r2, [r7, #4]
 8000c0e:	68b9      	ldr	r1, [r7, #8]
 8000c10:	6978      	ldr	r0, [r7, #20]
 8000c12:	f7ff ffb1 	bl	8000b78 <NVIC_EncodePriority>
 8000c16:	4602      	mov	r2, r0
 8000c18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c1c:	4611      	mov	r1, r2
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff ff80 	bl	8000b24 <__NVIC_SetPriority>
}
 8000c24:	bf00      	nop
 8000c26:	3718      	adds	r7, #24
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff ff54 	bl	8000ae8 <__NVIC_EnableIRQ>
}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b089      	sub	sp, #36	; 0x24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c56:	2300      	movs	r3, #0
 8000c58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
 8000c62:	e16b      	b.n	8000f3c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c64:	2201      	movs	r2, #1
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	697a      	ldr	r2, [r7, #20]
 8000c74:	4013      	ands	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	f040 815a 	bne.w	8000f36 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	f003 0303 	and.w	r3, r3, #3
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d005      	beq.n	8000c9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c96:	2b02      	cmp	r3, #2
 8000c98:	d130      	bne.n	8000cfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	2203      	movs	r2, #3
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	43db      	mvns	r3, r3
 8000cac:	69ba      	ldr	r2, [r7, #24]
 8000cae:	4013      	ands	r3, r2
 8000cb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	68da      	ldr	r2, [r3, #12]
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	69ba      	ldr	r2, [r7, #24]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	69ba      	ldr	r2, [r7, #24]
 8000cc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	091b      	lsrs	r3, r3, #4
 8000ce6:	f003 0201 	and.w	r2, r3, #1
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	69ba      	ldr	r2, [r7, #24]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	69ba      	ldr	r2, [r7, #24]
 8000cfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f003 0303 	and.w	r3, r3, #3
 8000d04:	2b03      	cmp	r3, #3
 8000d06:	d017      	beq.n	8000d38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	2203      	movs	r2, #3
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	69ba      	ldr	r2, [r7, #24]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	689a      	ldr	r2, [r3, #8]
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	69ba      	ldr	r2, [r7, #24]
 8000d36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f003 0303 	and.w	r3, r3, #3
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	d123      	bne.n	8000d8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	08da      	lsrs	r2, r3, #3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3208      	adds	r2, #8
 8000d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	f003 0307 	and.w	r3, r3, #7
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	220f      	movs	r2, #15
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	43db      	mvns	r3, r3
 8000d62:	69ba      	ldr	r2, [r7, #24]
 8000d64:	4013      	ands	r3, r2
 8000d66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	691a      	ldr	r2, [r3, #16]
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	08da      	lsrs	r2, r3, #3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	3208      	adds	r2, #8
 8000d86:	69b9      	ldr	r1, [r7, #24]
 8000d88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	2203      	movs	r2, #3
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	4013      	ands	r3, r2
 8000da2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f003 0203 	and.w	r2, r3, #3
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	f000 80b4 	beq.w	8000f36 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	4b60      	ldr	r3, [pc, #384]	; (8000f54 <HAL_GPIO_Init+0x30c>)
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd6:	4a5f      	ldr	r2, [pc, #380]	; (8000f54 <HAL_GPIO_Init+0x30c>)
 8000dd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dde:	4b5d      	ldr	r3, [pc, #372]	; (8000f54 <HAL_GPIO_Init+0x30c>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dea:	4a5b      	ldr	r2, [pc, #364]	; (8000f58 <HAL_GPIO_Init+0x310>)
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	089b      	lsrs	r3, r3, #2
 8000df0:	3302      	adds	r3, #2
 8000df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	f003 0303 	and.w	r3, r3, #3
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	220f      	movs	r2, #15
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	43db      	mvns	r3, r3
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a52      	ldr	r2, [pc, #328]	; (8000f5c <HAL_GPIO_Init+0x314>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d02b      	beq.n	8000e6e <HAL_GPIO_Init+0x226>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a51      	ldr	r2, [pc, #324]	; (8000f60 <HAL_GPIO_Init+0x318>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d025      	beq.n	8000e6a <HAL_GPIO_Init+0x222>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a50      	ldr	r2, [pc, #320]	; (8000f64 <HAL_GPIO_Init+0x31c>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d01f      	beq.n	8000e66 <HAL_GPIO_Init+0x21e>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a4f      	ldr	r2, [pc, #316]	; (8000f68 <HAL_GPIO_Init+0x320>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d019      	beq.n	8000e62 <HAL_GPIO_Init+0x21a>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a4e      	ldr	r2, [pc, #312]	; (8000f6c <HAL_GPIO_Init+0x324>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d013      	beq.n	8000e5e <HAL_GPIO_Init+0x216>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a4d      	ldr	r2, [pc, #308]	; (8000f70 <HAL_GPIO_Init+0x328>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d00d      	beq.n	8000e5a <HAL_GPIO_Init+0x212>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a4c      	ldr	r2, [pc, #304]	; (8000f74 <HAL_GPIO_Init+0x32c>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d007      	beq.n	8000e56 <HAL_GPIO_Init+0x20e>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a4b      	ldr	r2, [pc, #300]	; (8000f78 <HAL_GPIO_Init+0x330>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d101      	bne.n	8000e52 <HAL_GPIO_Init+0x20a>
 8000e4e:	2307      	movs	r3, #7
 8000e50:	e00e      	b.n	8000e70 <HAL_GPIO_Init+0x228>
 8000e52:	2308      	movs	r3, #8
 8000e54:	e00c      	b.n	8000e70 <HAL_GPIO_Init+0x228>
 8000e56:	2306      	movs	r3, #6
 8000e58:	e00a      	b.n	8000e70 <HAL_GPIO_Init+0x228>
 8000e5a:	2305      	movs	r3, #5
 8000e5c:	e008      	b.n	8000e70 <HAL_GPIO_Init+0x228>
 8000e5e:	2304      	movs	r3, #4
 8000e60:	e006      	b.n	8000e70 <HAL_GPIO_Init+0x228>
 8000e62:	2303      	movs	r3, #3
 8000e64:	e004      	b.n	8000e70 <HAL_GPIO_Init+0x228>
 8000e66:	2302      	movs	r3, #2
 8000e68:	e002      	b.n	8000e70 <HAL_GPIO_Init+0x228>
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e000      	b.n	8000e70 <HAL_GPIO_Init+0x228>
 8000e6e:	2300      	movs	r3, #0
 8000e70:	69fa      	ldr	r2, [r7, #28]
 8000e72:	f002 0203 	and.w	r2, r2, #3
 8000e76:	0092      	lsls	r2, r2, #2
 8000e78:	4093      	lsls	r3, r2
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e80:	4935      	ldr	r1, [pc, #212]	; (8000f58 <HAL_GPIO_Init+0x310>)
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	089b      	lsrs	r3, r3, #2
 8000e86:	3302      	adds	r3, #2
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e8e:	4b3b      	ldr	r3, [pc, #236]	; (8000f7c <HAL_GPIO_Init+0x334>)
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	43db      	mvns	r3, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d003      	beq.n	8000eb2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000eb2:	4a32      	ldr	r2, [pc, #200]	; (8000f7c <HAL_GPIO_Init+0x334>)
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000eb8:	4b30      	ldr	r3, [pc, #192]	; (8000f7c <HAL_GPIO_Init+0x334>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d003      	beq.n	8000edc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000edc:	4a27      	ldr	r2, [pc, #156]	; (8000f7c <HAL_GPIO_Init+0x334>)
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ee2:	4b26      	ldr	r3, [pc, #152]	; (8000f7c <HAL_GPIO_Init+0x334>)
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	43db      	mvns	r3, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d003      	beq.n	8000f06 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f06:	4a1d      	ldr	r2, [pc, #116]	; (8000f7c <HAL_GPIO_Init+0x334>)
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f0c:	4b1b      	ldr	r3, [pc, #108]	; (8000f7c <HAL_GPIO_Init+0x334>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	43db      	mvns	r3, r3
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d003      	beq.n	8000f30 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f30:	4a12      	ldr	r2, [pc, #72]	; (8000f7c <HAL_GPIO_Init+0x334>)
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	61fb      	str	r3, [r7, #28]
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	2b0f      	cmp	r3, #15
 8000f40:	f67f ae90 	bls.w	8000c64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f44:	bf00      	nop
 8000f46:	bf00      	nop
 8000f48:	3724      	adds	r7, #36	; 0x24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	40023800 	.word	0x40023800
 8000f58:	40013800 	.word	0x40013800
 8000f5c:	40020000 	.word	0x40020000
 8000f60:	40020400 	.word	0x40020400
 8000f64:	40020800 	.word	0x40020800
 8000f68:	40020c00 	.word	0x40020c00
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	40021400 	.word	0x40021400
 8000f74:	40021800 	.word	0x40021800
 8000f78:	40021c00 	.word	0x40021c00
 8000f7c:	40013c00 	.word	0x40013c00

08000f80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	460b      	mov	r3, r1
 8000f8a:	807b      	strh	r3, [r7, #2]
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f90:	787b      	ldrb	r3, [r7, #1]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d003      	beq.n	8000f9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f96:	887a      	ldrh	r2, [r7, #2]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f9c:	e003      	b.n	8000fa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f9e:	887b      	ldrh	r3, [r7, #2]
 8000fa0:	041a      	lsls	r2, r3, #16
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	619a      	str	r2, [r3, #24]
}
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	b085      	sub	sp, #20
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
 8000fba:	460b      	mov	r3, r1
 8000fbc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	695b      	ldr	r3, [r3, #20]
 8000fc2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fc4:	887a      	ldrh	r2, [r7, #2]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	041a      	lsls	r2, r3, #16
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	43d9      	mvns	r1, r3
 8000fd0:	887b      	ldrh	r3, [r7, #2]
 8000fd2:	400b      	ands	r3, r1
 8000fd4:	431a      	orrs	r2, r3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	619a      	str	r2, [r3, #24]
}
 8000fda:	bf00      	nop
 8000fdc:	3714      	adds	r7, #20
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
	...

08000fe8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d101      	bne.n	8000ffa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e267      	b.n	80014ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	2b00      	cmp	r3, #0
 8001004:	d075      	beq.n	80010f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001006:	4b88      	ldr	r3, [pc, #544]	; (8001228 <HAL_RCC_OscConfig+0x240>)
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	f003 030c 	and.w	r3, r3, #12
 800100e:	2b04      	cmp	r3, #4
 8001010:	d00c      	beq.n	800102c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001012:	4b85      	ldr	r3, [pc, #532]	; (8001228 <HAL_RCC_OscConfig+0x240>)
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800101a:	2b08      	cmp	r3, #8
 800101c:	d112      	bne.n	8001044 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800101e:	4b82      	ldr	r3, [pc, #520]	; (8001228 <HAL_RCC_OscConfig+0x240>)
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001026:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800102a:	d10b      	bne.n	8001044 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800102c:	4b7e      	ldr	r3, [pc, #504]	; (8001228 <HAL_RCC_OscConfig+0x240>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001034:	2b00      	cmp	r3, #0
 8001036:	d05b      	beq.n	80010f0 <HAL_RCC_OscConfig+0x108>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d157      	bne.n	80010f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	e242      	b.n	80014ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800104c:	d106      	bne.n	800105c <HAL_RCC_OscConfig+0x74>
 800104e:	4b76      	ldr	r3, [pc, #472]	; (8001228 <HAL_RCC_OscConfig+0x240>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a75      	ldr	r2, [pc, #468]	; (8001228 <HAL_RCC_OscConfig+0x240>)
 8001054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001058:	6013      	str	r3, [r2, #0]
 800105a:	e01d      	b.n	8001098 <HAL_RCC_OscConfig+0xb0>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001064:	d10c      	bne.n	8001080 <HAL_RCC_OscConfig+0x98>
 8001066:	4b70      	ldr	r3, [pc, #448]	; (8001228 <HAL_RCC_OscConfig+0x240>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a6f      	ldr	r2, [pc, #444]	; (8001228 <HAL_RCC_OscConfig+0x240>)
 800106c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001070:	6013      	str	r3, [r2, #0]
 8001072:	4b6d      	ldr	r3, [pc, #436]	; (8001228 <HAL_RCC_OscConfig+0x240>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a6c      	ldr	r2, [pc, #432]	; (8001228 <HAL_RCC_OscConfig+0x240>)
 8001078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800107c:	6013      	str	r3, [r2, #0]
 800107e:	e00b      	b.n	8001098 <HAL_RCC_OscConfig+0xb0>
 8001080:	4b69      	ldr	r3, [pc, #420]	; (8001228 <HAL_RCC_OscConfig+0x240>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a68      	ldr	r2, [pc, #416]	; (8001228 <HAL_RCC_OscConfig+0x240>)
 8001086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800108a:	6013      	str	r3, [r2, #0]
 800108c:	4b66      	ldr	r3, [pc, #408]	; (8001228 <HAL_RCC_OscConfig+0x240>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a65      	ldr	r2, [pc, #404]	; (8001228 <HAL_RCC_OscConfig+0x240>)
 8001092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001096:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d013      	beq.n	80010c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a0:	f7ff fce4 	bl	8000a6c <HAL_GetTick>
 80010a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010a6:	e008      	b.n	80010ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010a8:	f7ff fce0 	bl	8000a6c <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	2b64      	cmp	r3, #100	; 0x64
 80010b4:	d901      	bls.n	80010ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80010b6:	2303      	movs	r3, #3
 80010b8:	e207      	b.n	80014ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ba:	4b5b      	ldr	r3, [pc, #364]	; (8001228 <HAL_RCC_OscConfig+0x240>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d0f0      	beq.n	80010a8 <HAL_RCC_OscConfig+0xc0>
 80010c6:	e014      	b.n	80010f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c8:	f7ff fcd0 	bl	8000a6c <HAL_GetTick>
 80010cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ce:	e008      	b.n	80010e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010d0:	f7ff fccc 	bl	8000a6c <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	2b64      	cmp	r3, #100	; 0x64
 80010dc:	d901      	bls.n	80010e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010de:	2303      	movs	r3, #3
 80010e0:	e1f3      	b.n	80014ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010e2:	4b51      	ldr	r3, [pc, #324]	; (8001228 <HAL_RCC_OscConfig+0x240>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d1f0      	bne.n	80010d0 <HAL_RCC_OscConfig+0xe8>
 80010ee:	e000      	b.n	80010f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d063      	beq.n	80011c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010fe:	4b4a      	ldr	r3, [pc, #296]	; (8001228 <HAL_RCC_OscConfig+0x240>)
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	f003 030c 	and.w	r3, r3, #12
 8001106:	2b00      	cmp	r3, #0
 8001108:	d00b      	beq.n	8001122 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800110a:	4b47      	ldr	r3, [pc, #284]	; (8001228 <HAL_RCC_OscConfig+0x240>)
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001112:	2b08      	cmp	r3, #8
 8001114:	d11c      	bne.n	8001150 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001116:	4b44      	ldr	r3, [pc, #272]	; (8001228 <HAL_RCC_OscConfig+0x240>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d116      	bne.n	8001150 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001122:	4b41      	ldr	r3, [pc, #260]	; (8001228 <HAL_RCC_OscConfig+0x240>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	2b00      	cmp	r3, #0
 800112c:	d005      	beq.n	800113a <HAL_RCC_OscConfig+0x152>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	68db      	ldr	r3, [r3, #12]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d001      	beq.n	800113a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e1c7      	b.n	80014ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800113a:	4b3b      	ldr	r3, [pc, #236]	; (8001228 <HAL_RCC_OscConfig+0x240>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	691b      	ldr	r3, [r3, #16]
 8001146:	00db      	lsls	r3, r3, #3
 8001148:	4937      	ldr	r1, [pc, #220]	; (8001228 <HAL_RCC_OscConfig+0x240>)
 800114a:	4313      	orrs	r3, r2
 800114c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800114e:	e03a      	b.n	80011c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d020      	beq.n	800119a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001158:	4b34      	ldr	r3, [pc, #208]	; (800122c <HAL_RCC_OscConfig+0x244>)
 800115a:	2201      	movs	r2, #1
 800115c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800115e:	f7ff fc85 	bl	8000a6c <HAL_GetTick>
 8001162:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001164:	e008      	b.n	8001178 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001166:	f7ff fc81 	bl	8000a6c <HAL_GetTick>
 800116a:	4602      	mov	r2, r0
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	2b02      	cmp	r3, #2
 8001172:	d901      	bls.n	8001178 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001174:	2303      	movs	r3, #3
 8001176:	e1a8      	b.n	80014ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001178:	4b2b      	ldr	r3, [pc, #172]	; (8001228 <HAL_RCC_OscConfig+0x240>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 0302 	and.w	r3, r3, #2
 8001180:	2b00      	cmp	r3, #0
 8001182:	d0f0      	beq.n	8001166 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001184:	4b28      	ldr	r3, [pc, #160]	; (8001228 <HAL_RCC_OscConfig+0x240>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	691b      	ldr	r3, [r3, #16]
 8001190:	00db      	lsls	r3, r3, #3
 8001192:	4925      	ldr	r1, [pc, #148]	; (8001228 <HAL_RCC_OscConfig+0x240>)
 8001194:	4313      	orrs	r3, r2
 8001196:	600b      	str	r3, [r1, #0]
 8001198:	e015      	b.n	80011c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800119a:	4b24      	ldr	r3, [pc, #144]	; (800122c <HAL_RCC_OscConfig+0x244>)
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011a0:	f7ff fc64 	bl	8000a6c <HAL_GetTick>
 80011a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011a6:	e008      	b.n	80011ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011a8:	f7ff fc60 	bl	8000a6c <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d901      	bls.n	80011ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e187      	b.n	80014ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ba:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <HAL_RCC_OscConfig+0x240>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d1f0      	bne.n	80011a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0308 	and.w	r3, r3, #8
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d036      	beq.n	8001240 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d016      	beq.n	8001208 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011da:	4b15      	ldr	r3, [pc, #84]	; (8001230 <HAL_RCC_OscConfig+0x248>)
 80011dc:	2201      	movs	r2, #1
 80011de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011e0:	f7ff fc44 	bl	8000a6c <HAL_GetTick>
 80011e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011e6:	e008      	b.n	80011fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011e8:	f7ff fc40 	bl	8000a6c <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d901      	bls.n	80011fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80011f6:	2303      	movs	r3, #3
 80011f8:	e167      	b.n	80014ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011fa:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <HAL_RCC_OscConfig+0x240>)
 80011fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	2b00      	cmp	r3, #0
 8001204:	d0f0      	beq.n	80011e8 <HAL_RCC_OscConfig+0x200>
 8001206:	e01b      	b.n	8001240 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001208:	4b09      	ldr	r3, [pc, #36]	; (8001230 <HAL_RCC_OscConfig+0x248>)
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800120e:	f7ff fc2d 	bl	8000a6c <HAL_GetTick>
 8001212:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001214:	e00e      	b.n	8001234 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001216:	f7ff fc29 	bl	8000a6c <HAL_GetTick>
 800121a:	4602      	mov	r2, r0
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	2b02      	cmp	r3, #2
 8001222:	d907      	bls.n	8001234 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001224:	2303      	movs	r3, #3
 8001226:	e150      	b.n	80014ca <HAL_RCC_OscConfig+0x4e2>
 8001228:	40023800 	.word	0x40023800
 800122c:	42470000 	.word	0x42470000
 8001230:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001234:	4b88      	ldr	r3, [pc, #544]	; (8001458 <HAL_RCC_OscConfig+0x470>)
 8001236:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d1ea      	bne.n	8001216 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 0304 	and.w	r3, r3, #4
 8001248:	2b00      	cmp	r3, #0
 800124a:	f000 8097 	beq.w	800137c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800124e:	2300      	movs	r3, #0
 8001250:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001252:	4b81      	ldr	r3, [pc, #516]	; (8001458 <HAL_RCC_OscConfig+0x470>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d10f      	bne.n	800127e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	60bb      	str	r3, [r7, #8]
 8001262:	4b7d      	ldr	r3, [pc, #500]	; (8001458 <HAL_RCC_OscConfig+0x470>)
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	4a7c      	ldr	r2, [pc, #496]	; (8001458 <HAL_RCC_OscConfig+0x470>)
 8001268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800126c:	6413      	str	r3, [r2, #64]	; 0x40
 800126e:	4b7a      	ldr	r3, [pc, #488]	; (8001458 <HAL_RCC_OscConfig+0x470>)
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001276:	60bb      	str	r3, [r7, #8]
 8001278:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800127a:	2301      	movs	r3, #1
 800127c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800127e:	4b77      	ldr	r3, [pc, #476]	; (800145c <HAL_RCC_OscConfig+0x474>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001286:	2b00      	cmp	r3, #0
 8001288:	d118      	bne.n	80012bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800128a:	4b74      	ldr	r3, [pc, #464]	; (800145c <HAL_RCC_OscConfig+0x474>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a73      	ldr	r2, [pc, #460]	; (800145c <HAL_RCC_OscConfig+0x474>)
 8001290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001294:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001296:	f7ff fbe9 	bl	8000a6c <HAL_GetTick>
 800129a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800129c:	e008      	b.n	80012b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800129e:	f7ff fbe5 	bl	8000a6c <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d901      	bls.n	80012b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80012ac:	2303      	movs	r3, #3
 80012ae:	e10c      	b.n	80014ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012b0:	4b6a      	ldr	r3, [pc, #424]	; (800145c <HAL_RCC_OscConfig+0x474>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d0f0      	beq.n	800129e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d106      	bne.n	80012d2 <HAL_RCC_OscConfig+0x2ea>
 80012c4:	4b64      	ldr	r3, [pc, #400]	; (8001458 <HAL_RCC_OscConfig+0x470>)
 80012c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012c8:	4a63      	ldr	r2, [pc, #396]	; (8001458 <HAL_RCC_OscConfig+0x470>)
 80012ca:	f043 0301 	orr.w	r3, r3, #1
 80012ce:	6713      	str	r3, [r2, #112]	; 0x70
 80012d0:	e01c      	b.n	800130c <HAL_RCC_OscConfig+0x324>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	2b05      	cmp	r3, #5
 80012d8:	d10c      	bne.n	80012f4 <HAL_RCC_OscConfig+0x30c>
 80012da:	4b5f      	ldr	r3, [pc, #380]	; (8001458 <HAL_RCC_OscConfig+0x470>)
 80012dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012de:	4a5e      	ldr	r2, [pc, #376]	; (8001458 <HAL_RCC_OscConfig+0x470>)
 80012e0:	f043 0304 	orr.w	r3, r3, #4
 80012e4:	6713      	str	r3, [r2, #112]	; 0x70
 80012e6:	4b5c      	ldr	r3, [pc, #368]	; (8001458 <HAL_RCC_OscConfig+0x470>)
 80012e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012ea:	4a5b      	ldr	r2, [pc, #364]	; (8001458 <HAL_RCC_OscConfig+0x470>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	6713      	str	r3, [r2, #112]	; 0x70
 80012f2:	e00b      	b.n	800130c <HAL_RCC_OscConfig+0x324>
 80012f4:	4b58      	ldr	r3, [pc, #352]	; (8001458 <HAL_RCC_OscConfig+0x470>)
 80012f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012f8:	4a57      	ldr	r2, [pc, #348]	; (8001458 <HAL_RCC_OscConfig+0x470>)
 80012fa:	f023 0301 	bic.w	r3, r3, #1
 80012fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001300:	4b55      	ldr	r3, [pc, #340]	; (8001458 <HAL_RCC_OscConfig+0x470>)
 8001302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001304:	4a54      	ldr	r2, [pc, #336]	; (8001458 <HAL_RCC_OscConfig+0x470>)
 8001306:	f023 0304 	bic.w	r3, r3, #4
 800130a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d015      	beq.n	8001340 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001314:	f7ff fbaa 	bl	8000a6c <HAL_GetTick>
 8001318:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800131a:	e00a      	b.n	8001332 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800131c:	f7ff fba6 	bl	8000a6c <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	f241 3288 	movw	r2, #5000	; 0x1388
 800132a:	4293      	cmp	r3, r2
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e0cb      	b.n	80014ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001332:	4b49      	ldr	r3, [pc, #292]	; (8001458 <HAL_RCC_OscConfig+0x470>)
 8001334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d0ee      	beq.n	800131c <HAL_RCC_OscConfig+0x334>
 800133e:	e014      	b.n	800136a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001340:	f7ff fb94 	bl	8000a6c <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001346:	e00a      	b.n	800135e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001348:	f7ff fb90 	bl	8000a6c <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	f241 3288 	movw	r2, #5000	; 0x1388
 8001356:	4293      	cmp	r3, r2
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e0b5      	b.n	80014ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800135e:	4b3e      	ldr	r3, [pc, #248]	; (8001458 <HAL_RCC_OscConfig+0x470>)
 8001360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1ee      	bne.n	8001348 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800136a:	7dfb      	ldrb	r3, [r7, #23]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d105      	bne.n	800137c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001370:	4b39      	ldr	r3, [pc, #228]	; (8001458 <HAL_RCC_OscConfig+0x470>)
 8001372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001374:	4a38      	ldr	r2, [pc, #224]	; (8001458 <HAL_RCC_OscConfig+0x470>)
 8001376:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800137a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	2b00      	cmp	r3, #0
 8001382:	f000 80a1 	beq.w	80014c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001386:	4b34      	ldr	r3, [pc, #208]	; (8001458 <HAL_RCC_OscConfig+0x470>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	f003 030c 	and.w	r3, r3, #12
 800138e:	2b08      	cmp	r3, #8
 8001390:	d05c      	beq.n	800144c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	2b02      	cmp	r3, #2
 8001398:	d141      	bne.n	800141e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800139a:	4b31      	ldr	r3, [pc, #196]	; (8001460 <HAL_RCC_OscConfig+0x478>)
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a0:	f7ff fb64 	bl	8000a6c <HAL_GetTick>
 80013a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013a6:	e008      	b.n	80013ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013a8:	f7ff fb60 	bl	8000a6c <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e087      	b.n	80014ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013ba:	4b27      	ldr	r3, [pc, #156]	; (8001458 <HAL_RCC_OscConfig+0x470>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d1f0      	bne.n	80013a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	69da      	ldr	r2, [r3, #28]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a1b      	ldr	r3, [r3, #32]
 80013ce:	431a      	orrs	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d4:	019b      	lsls	r3, r3, #6
 80013d6:	431a      	orrs	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013dc:	085b      	lsrs	r3, r3, #1
 80013de:	3b01      	subs	r3, #1
 80013e0:	041b      	lsls	r3, r3, #16
 80013e2:	431a      	orrs	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e8:	061b      	lsls	r3, r3, #24
 80013ea:	491b      	ldr	r1, [pc, #108]	; (8001458 <HAL_RCC_OscConfig+0x470>)
 80013ec:	4313      	orrs	r3, r2
 80013ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013f0:	4b1b      	ldr	r3, [pc, #108]	; (8001460 <HAL_RCC_OscConfig+0x478>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f6:	f7ff fb39 	bl	8000a6c <HAL_GetTick>
 80013fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013fc:	e008      	b.n	8001410 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013fe:	f7ff fb35 	bl	8000a6c <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d901      	bls.n	8001410 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e05c      	b.n	80014ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001410:	4b11      	ldr	r3, [pc, #68]	; (8001458 <HAL_RCC_OscConfig+0x470>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d0f0      	beq.n	80013fe <HAL_RCC_OscConfig+0x416>
 800141c:	e054      	b.n	80014c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800141e:	4b10      	ldr	r3, [pc, #64]	; (8001460 <HAL_RCC_OscConfig+0x478>)
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001424:	f7ff fb22 	bl	8000a6c <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800142c:	f7ff fb1e 	bl	8000a6c <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b02      	cmp	r3, #2
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e045      	b.n	80014ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800143e:	4b06      	ldr	r3, [pc, #24]	; (8001458 <HAL_RCC_OscConfig+0x470>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d1f0      	bne.n	800142c <HAL_RCC_OscConfig+0x444>
 800144a:	e03d      	b.n	80014c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d107      	bne.n	8001464 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e038      	b.n	80014ca <HAL_RCC_OscConfig+0x4e2>
 8001458:	40023800 	.word	0x40023800
 800145c:	40007000 	.word	0x40007000
 8001460:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001464:	4b1b      	ldr	r3, [pc, #108]	; (80014d4 <HAL_RCC_OscConfig+0x4ec>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d028      	beq.n	80014c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800147c:	429a      	cmp	r2, r3
 800147e:	d121      	bne.n	80014c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800148a:	429a      	cmp	r2, r3
 800148c:	d11a      	bne.n	80014c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800148e:	68fa      	ldr	r2, [r7, #12]
 8001490:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001494:	4013      	ands	r3, r2
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800149a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800149c:	4293      	cmp	r3, r2
 800149e:	d111      	bne.n	80014c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014aa:	085b      	lsrs	r3, r3, #1
 80014ac:	3b01      	subs	r3, #1
 80014ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d107      	bne.n	80014c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d001      	beq.n	80014c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e000      	b.n	80014ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40023800 	.word	0x40023800

080014d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d101      	bne.n	80014ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e0cc      	b.n	8001686 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014ec:	4b68      	ldr	r3, [pc, #416]	; (8001690 <HAL_RCC_ClockConfig+0x1b8>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0307 	and.w	r3, r3, #7
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d90c      	bls.n	8001514 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014fa:	4b65      	ldr	r3, [pc, #404]	; (8001690 <HAL_RCC_ClockConfig+0x1b8>)
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	b2d2      	uxtb	r2, r2
 8001500:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001502:	4b63      	ldr	r3, [pc, #396]	; (8001690 <HAL_RCC_ClockConfig+0x1b8>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	683a      	ldr	r2, [r7, #0]
 800150c:	429a      	cmp	r2, r3
 800150e:	d001      	beq.n	8001514 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e0b8      	b.n	8001686 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d020      	beq.n	8001562 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0304 	and.w	r3, r3, #4
 8001528:	2b00      	cmp	r3, #0
 800152a:	d005      	beq.n	8001538 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800152c:	4b59      	ldr	r3, [pc, #356]	; (8001694 <HAL_RCC_ClockConfig+0x1bc>)
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	4a58      	ldr	r2, [pc, #352]	; (8001694 <HAL_RCC_ClockConfig+0x1bc>)
 8001532:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001536:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0308 	and.w	r3, r3, #8
 8001540:	2b00      	cmp	r3, #0
 8001542:	d005      	beq.n	8001550 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001544:	4b53      	ldr	r3, [pc, #332]	; (8001694 <HAL_RCC_ClockConfig+0x1bc>)
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	4a52      	ldr	r2, [pc, #328]	; (8001694 <HAL_RCC_ClockConfig+0x1bc>)
 800154a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800154e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001550:	4b50      	ldr	r3, [pc, #320]	; (8001694 <HAL_RCC_ClockConfig+0x1bc>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	494d      	ldr	r1, [pc, #308]	; (8001694 <HAL_RCC_ClockConfig+0x1bc>)
 800155e:	4313      	orrs	r3, r2
 8001560:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	2b00      	cmp	r3, #0
 800156c:	d044      	beq.n	80015f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d107      	bne.n	8001586 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001576:	4b47      	ldr	r3, [pc, #284]	; (8001694 <HAL_RCC_ClockConfig+0x1bc>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d119      	bne.n	80015b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e07f      	b.n	8001686 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	2b02      	cmp	r3, #2
 800158c:	d003      	beq.n	8001596 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001592:	2b03      	cmp	r3, #3
 8001594:	d107      	bne.n	80015a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001596:	4b3f      	ldr	r3, [pc, #252]	; (8001694 <HAL_RCC_ClockConfig+0x1bc>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d109      	bne.n	80015b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e06f      	b.n	8001686 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a6:	4b3b      	ldr	r3, [pc, #236]	; (8001694 <HAL_RCC_ClockConfig+0x1bc>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d101      	bne.n	80015b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e067      	b.n	8001686 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015b6:	4b37      	ldr	r3, [pc, #220]	; (8001694 <HAL_RCC_ClockConfig+0x1bc>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f023 0203 	bic.w	r2, r3, #3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	4934      	ldr	r1, [pc, #208]	; (8001694 <HAL_RCC_ClockConfig+0x1bc>)
 80015c4:	4313      	orrs	r3, r2
 80015c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015c8:	f7ff fa50 	bl	8000a6c <HAL_GetTick>
 80015cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ce:	e00a      	b.n	80015e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015d0:	f7ff fa4c 	bl	8000a6c <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	f241 3288 	movw	r2, #5000	; 0x1388
 80015de:	4293      	cmp	r3, r2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e04f      	b.n	8001686 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015e6:	4b2b      	ldr	r3, [pc, #172]	; (8001694 <HAL_RCC_ClockConfig+0x1bc>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f003 020c 	and.w	r2, r3, #12
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d1eb      	bne.n	80015d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015f8:	4b25      	ldr	r3, [pc, #148]	; (8001690 <HAL_RCC_ClockConfig+0x1b8>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0307 	and.w	r3, r3, #7
 8001600:	683a      	ldr	r2, [r7, #0]
 8001602:	429a      	cmp	r2, r3
 8001604:	d20c      	bcs.n	8001620 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001606:	4b22      	ldr	r3, [pc, #136]	; (8001690 <HAL_RCC_ClockConfig+0x1b8>)
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	b2d2      	uxtb	r2, r2
 800160c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800160e:	4b20      	ldr	r3, [pc, #128]	; (8001690 <HAL_RCC_ClockConfig+0x1b8>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	683a      	ldr	r2, [r7, #0]
 8001618:	429a      	cmp	r2, r3
 800161a:	d001      	beq.n	8001620 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e032      	b.n	8001686 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0304 	and.w	r3, r3, #4
 8001628:	2b00      	cmp	r3, #0
 800162a:	d008      	beq.n	800163e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800162c:	4b19      	ldr	r3, [pc, #100]	; (8001694 <HAL_RCC_ClockConfig+0x1bc>)
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	4916      	ldr	r1, [pc, #88]	; (8001694 <HAL_RCC_ClockConfig+0x1bc>)
 800163a:	4313      	orrs	r3, r2
 800163c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0308 	and.w	r3, r3, #8
 8001646:	2b00      	cmp	r3, #0
 8001648:	d009      	beq.n	800165e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800164a:	4b12      	ldr	r3, [pc, #72]	; (8001694 <HAL_RCC_ClockConfig+0x1bc>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	691b      	ldr	r3, [r3, #16]
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	490e      	ldr	r1, [pc, #56]	; (8001694 <HAL_RCC_ClockConfig+0x1bc>)
 800165a:	4313      	orrs	r3, r2
 800165c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800165e:	f000 f821 	bl	80016a4 <HAL_RCC_GetSysClockFreq>
 8001662:	4602      	mov	r2, r0
 8001664:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <HAL_RCC_ClockConfig+0x1bc>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	091b      	lsrs	r3, r3, #4
 800166a:	f003 030f 	and.w	r3, r3, #15
 800166e:	490a      	ldr	r1, [pc, #40]	; (8001698 <HAL_RCC_ClockConfig+0x1c0>)
 8001670:	5ccb      	ldrb	r3, [r1, r3]
 8001672:	fa22 f303 	lsr.w	r3, r2, r3
 8001676:	4a09      	ldr	r2, [pc, #36]	; (800169c <HAL_RCC_ClockConfig+0x1c4>)
 8001678:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800167a:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <HAL_RCC_ClockConfig+0x1c8>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff f8e6 	bl	8000850 <HAL_InitTick>

  return HAL_OK;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40023c00 	.word	0x40023c00
 8001694:	40023800 	.word	0x40023800
 8001698:	08004d60 	.word	0x08004d60
 800169c:	20000000 	.word	0x20000000
 80016a0:	20000004 	.word	0x20000004

080016a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016a8:	b090      	sub	sp, #64	; 0x40
 80016aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80016ac:	2300      	movs	r3, #0
 80016ae:	637b      	str	r3, [r7, #52]	; 0x34
 80016b0:	2300      	movs	r3, #0
 80016b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016b4:	2300      	movs	r3, #0
 80016b6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80016b8:	2300      	movs	r3, #0
 80016ba:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016bc:	4b59      	ldr	r3, [pc, #356]	; (8001824 <HAL_RCC_GetSysClockFreq+0x180>)
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f003 030c 	and.w	r3, r3, #12
 80016c4:	2b08      	cmp	r3, #8
 80016c6:	d00d      	beq.n	80016e4 <HAL_RCC_GetSysClockFreq+0x40>
 80016c8:	2b08      	cmp	r3, #8
 80016ca:	f200 80a1 	bhi.w	8001810 <HAL_RCC_GetSysClockFreq+0x16c>
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d002      	beq.n	80016d8 <HAL_RCC_GetSysClockFreq+0x34>
 80016d2:	2b04      	cmp	r3, #4
 80016d4:	d003      	beq.n	80016de <HAL_RCC_GetSysClockFreq+0x3a>
 80016d6:	e09b      	b.n	8001810 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016d8:	4b53      	ldr	r3, [pc, #332]	; (8001828 <HAL_RCC_GetSysClockFreq+0x184>)
 80016da:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80016dc:	e09b      	b.n	8001816 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016de:	4b53      	ldr	r3, [pc, #332]	; (800182c <HAL_RCC_GetSysClockFreq+0x188>)
 80016e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80016e2:	e098      	b.n	8001816 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016e4:	4b4f      	ldr	r3, [pc, #316]	; (8001824 <HAL_RCC_GetSysClockFreq+0x180>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016ec:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016ee:	4b4d      	ldr	r3, [pc, #308]	; (8001824 <HAL_RCC_GetSysClockFreq+0x180>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d028      	beq.n	800174c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016fa:	4b4a      	ldr	r3, [pc, #296]	; (8001824 <HAL_RCC_GetSysClockFreq+0x180>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	099b      	lsrs	r3, r3, #6
 8001700:	2200      	movs	r2, #0
 8001702:	623b      	str	r3, [r7, #32]
 8001704:	627a      	str	r2, [r7, #36]	; 0x24
 8001706:	6a3b      	ldr	r3, [r7, #32]
 8001708:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800170c:	2100      	movs	r1, #0
 800170e:	4b47      	ldr	r3, [pc, #284]	; (800182c <HAL_RCC_GetSysClockFreq+0x188>)
 8001710:	fb03 f201 	mul.w	r2, r3, r1
 8001714:	2300      	movs	r3, #0
 8001716:	fb00 f303 	mul.w	r3, r0, r3
 800171a:	4413      	add	r3, r2
 800171c:	4a43      	ldr	r2, [pc, #268]	; (800182c <HAL_RCC_GetSysClockFreq+0x188>)
 800171e:	fba0 1202 	umull	r1, r2, r0, r2
 8001722:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001724:	460a      	mov	r2, r1
 8001726:	62ba      	str	r2, [r7, #40]	; 0x28
 8001728:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800172a:	4413      	add	r3, r2
 800172c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800172e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001730:	2200      	movs	r2, #0
 8001732:	61bb      	str	r3, [r7, #24]
 8001734:	61fa      	str	r2, [r7, #28]
 8001736:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800173a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800173e:	f7fe fd47 	bl	80001d0 <__aeabi_uldivmod>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4613      	mov	r3, r2
 8001748:	63fb      	str	r3, [r7, #60]	; 0x3c
 800174a:	e053      	b.n	80017f4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800174c:	4b35      	ldr	r3, [pc, #212]	; (8001824 <HAL_RCC_GetSysClockFreq+0x180>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	099b      	lsrs	r3, r3, #6
 8001752:	2200      	movs	r2, #0
 8001754:	613b      	str	r3, [r7, #16]
 8001756:	617a      	str	r2, [r7, #20]
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800175e:	f04f 0b00 	mov.w	fp, #0
 8001762:	4652      	mov	r2, sl
 8001764:	465b      	mov	r3, fp
 8001766:	f04f 0000 	mov.w	r0, #0
 800176a:	f04f 0100 	mov.w	r1, #0
 800176e:	0159      	lsls	r1, r3, #5
 8001770:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001774:	0150      	lsls	r0, r2, #5
 8001776:	4602      	mov	r2, r0
 8001778:	460b      	mov	r3, r1
 800177a:	ebb2 080a 	subs.w	r8, r2, sl
 800177e:	eb63 090b 	sbc.w	r9, r3, fp
 8001782:	f04f 0200 	mov.w	r2, #0
 8001786:	f04f 0300 	mov.w	r3, #0
 800178a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800178e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001792:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001796:	ebb2 0408 	subs.w	r4, r2, r8
 800179a:	eb63 0509 	sbc.w	r5, r3, r9
 800179e:	f04f 0200 	mov.w	r2, #0
 80017a2:	f04f 0300 	mov.w	r3, #0
 80017a6:	00eb      	lsls	r3, r5, #3
 80017a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017ac:	00e2      	lsls	r2, r4, #3
 80017ae:	4614      	mov	r4, r2
 80017b0:	461d      	mov	r5, r3
 80017b2:	eb14 030a 	adds.w	r3, r4, sl
 80017b6:	603b      	str	r3, [r7, #0]
 80017b8:	eb45 030b 	adc.w	r3, r5, fp
 80017bc:	607b      	str	r3, [r7, #4]
 80017be:	f04f 0200 	mov.w	r2, #0
 80017c2:	f04f 0300 	mov.w	r3, #0
 80017c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017ca:	4629      	mov	r1, r5
 80017cc:	028b      	lsls	r3, r1, #10
 80017ce:	4621      	mov	r1, r4
 80017d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017d4:	4621      	mov	r1, r4
 80017d6:	028a      	lsls	r2, r1, #10
 80017d8:	4610      	mov	r0, r2
 80017da:	4619      	mov	r1, r3
 80017dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017de:	2200      	movs	r2, #0
 80017e0:	60bb      	str	r3, [r7, #8]
 80017e2:	60fa      	str	r2, [r7, #12]
 80017e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017e8:	f7fe fcf2 	bl	80001d0 <__aeabi_uldivmod>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4613      	mov	r3, r2
 80017f2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017f4:	4b0b      	ldr	r3, [pc, #44]	; (8001824 <HAL_RCC_GetSysClockFreq+0x180>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	0c1b      	lsrs	r3, r3, #16
 80017fa:	f003 0303 	and.w	r3, r3, #3
 80017fe:	3301      	adds	r3, #1
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001804:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001808:	fbb2 f3f3 	udiv	r3, r2, r3
 800180c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800180e:	e002      	b.n	8001816 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001810:	4b05      	ldr	r3, [pc, #20]	; (8001828 <HAL_RCC_GetSysClockFreq+0x184>)
 8001812:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001814:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001818:	4618      	mov	r0, r3
 800181a:	3740      	adds	r7, #64	; 0x40
 800181c:	46bd      	mov	sp, r7
 800181e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001822:	bf00      	nop
 8001824:	40023800 	.word	0x40023800
 8001828:	00f42400 	.word	0x00f42400
 800182c:	017d7840 	.word	0x017d7840

08001830 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001834:	4b03      	ldr	r3, [pc, #12]	; (8001844 <HAL_RCC_GetHCLKFreq+0x14>)
 8001836:	681b      	ldr	r3, [r3, #0]
}
 8001838:	4618      	mov	r0, r3
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	20000000 	.word	0x20000000

08001848 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800184c:	f7ff fff0 	bl	8001830 <HAL_RCC_GetHCLKFreq>
 8001850:	4602      	mov	r2, r0
 8001852:	4b05      	ldr	r3, [pc, #20]	; (8001868 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	0a9b      	lsrs	r3, r3, #10
 8001858:	f003 0307 	and.w	r3, r3, #7
 800185c:	4903      	ldr	r1, [pc, #12]	; (800186c <HAL_RCC_GetPCLK1Freq+0x24>)
 800185e:	5ccb      	ldrb	r3, [r1, r3]
 8001860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001864:	4618      	mov	r0, r3
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40023800 	.word	0x40023800
 800186c:	08004d70 	.word	0x08004d70

08001870 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	220f      	movs	r2, #15
 800187e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001880:	4b12      	ldr	r3, [pc, #72]	; (80018cc <HAL_RCC_GetClockConfig+0x5c>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f003 0203 	and.w	r2, r3, #3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800188c:	4b0f      	ldr	r3, [pc, #60]	; (80018cc <HAL_RCC_GetClockConfig+0x5c>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001898:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <HAL_RCC_GetClockConfig+0x5c>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80018a4:	4b09      	ldr	r3, [pc, #36]	; (80018cc <HAL_RCC_GetClockConfig+0x5c>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	08db      	lsrs	r3, r3, #3
 80018aa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80018b2:	4b07      	ldr	r3, [pc, #28]	; (80018d0 <HAL_RCC_GetClockConfig+0x60>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0207 	and.w	r2, r3, #7
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	601a      	str	r2, [r3, #0]
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	40023800 	.word	0x40023800
 80018d0:	40023c00 	.word	0x40023c00

080018d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e041      	b.n	800196a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d106      	bne.n	8001900 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f000 f839 	bl	8001972 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2202      	movs	r2, #2
 8001904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3304      	adds	r3, #4
 8001910:	4619      	mov	r1, r3
 8001912:	4610      	mov	r0, r2
 8001914:	f000 f9d8 	bl	8001cc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
	...

08001988 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001996:	b2db      	uxtb	r3, r3
 8001998:	2b01      	cmp	r3, #1
 800199a:	d001      	beq.n	80019a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e04e      	b.n	8001a3e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2202      	movs	r2, #2
 80019a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	68da      	ldr	r2, [r3, #12]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f042 0201 	orr.w	r2, r2, #1
 80019b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a23      	ldr	r2, [pc, #140]	; (8001a4c <HAL_TIM_Base_Start_IT+0xc4>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d022      	beq.n	8001a08 <HAL_TIM_Base_Start_IT+0x80>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019ca:	d01d      	beq.n	8001a08 <HAL_TIM_Base_Start_IT+0x80>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a1f      	ldr	r2, [pc, #124]	; (8001a50 <HAL_TIM_Base_Start_IT+0xc8>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d018      	beq.n	8001a08 <HAL_TIM_Base_Start_IT+0x80>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a1e      	ldr	r2, [pc, #120]	; (8001a54 <HAL_TIM_Base_Start_IT+0xcc>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d013      	beq.n	8001a08 <HAL_TIM_Base_Start_IT+0x80>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a1c      	ldr	r2, [pc, #112]	; (8001a58 <HAL_TIM_Base_Start_IT+0xd0>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d00e      	beq.n	8001a08 <HAL_TIM_Base_Start_IT+0x80>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a1b      	ldr	r2, [pc, #108]	; (8001a5c <HAL_TIM_Base_Start_IT+0xd4>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d009      	beq.n	8001a08 <HAL_TIM_Base_Start_IT+0x80>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a19      	ldr	r2, [pc, #100]	; (8001a60 <HAL_TIM_Base_Start_IT+0xd8>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d004      	beq.n	8001a08 <HAL_TIM_Base_Start_IT+0x80>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a18      	ldr	r2, [pc, #96]	; (8001a64 <HAL_TIM_Base_Start_IT+0xdc>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d111      	bne.n	8001a2c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2b06      	cmp	r3, #6
 8001a18:	d010      	beq.n	8001a3c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f042 0201 	orr.w	r2, r2, #1
 8001a28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a2a:	e007      	b.n	8001a3c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f042 0201 	orr.w	r2, r2, #1
 8001a3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3714      	adds	r7, #20
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	40010000 	.word	0x40010000
 8001a50:	40000400 	.word	0x40000400
 8001a54:	40000800 	.word	0x40000800
 8001a58:	40000c00 	.word	0x40000c00
 8001a5c:	40010400 	.word	0x40010400
 8001a60:	40014000 	.word	0x40014000
 8001a64:	40001800 	.word	0x40001800

08001a68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	691b      	ldr	r3, [r3, #16]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d122      	bne.n	8001ac4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d11b      	bne.n	8001ac4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f06f 0202 	mvn.w	r2, #2
 8001a94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	f003 0303 	and.w	r3, r3, #3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d003      	beq.n	8001ab2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 f8ee 	bl	8001c8c <HAL_TIM_IC_CaptureCallback>
 8001ab0:	e005      	b.n	8001abe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f000 f8e0 	bl	8001c78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 f8f1 	bl	8001ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	f003 0304 	and.w	r3, r3, #4
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	d122      	bne.n	8001b18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	f003 0304 	and.w	r3, r3, #4
 8001adc:	2b04      	cmp	r3, #4
 8001ade:	d11b      	bne.n	8001b18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f06f 0204 	mvn.w	r2, #4
 8001ae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2202      	movs	r2, #2
 8001aee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d003      	beq.n	8001b06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 f8c4 	bl	8001c8c <HAL_TIM_IC_CaptureCallback>
 8001b04:	e005      	b.n	8001b12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 f8b6 	bl	8001c78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f000 f8c7 	bl	8001ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	f003 0308 	and.w	r3, r3, #8
 8001b22:	2b08      	cmp	r3, #8
 8001b24:	d122      	bne.n	8001b6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	f003 0308 	and.w	r3, r3, #8
 8001b30:	2b08      	cmp	r3, #8
 8001b32:	d11b      	bne.n	8001b6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f06f 0208 	mvn.w	r2, #8
 8001b3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2204      	movs	r2, #4
 8001b42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	f003 0303 	and.w	r3, r3, #3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 f89a 	bl	8001c8c <HAL_TIM_IC_CaptureCallback>
 8001b58:	e005      	b.n	8001b66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 f88c 	bl	8001c78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 f89d 	bl	8001ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	691b      	ldr	r3, [r3, #16]
 8001b72:	f003 0310 	and.w	r3, r3, #16
 8001b76:	2b10      	cmp	r3, #16
 8001b78:	d122      	bne.n	8001bc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	f003 0310 	and.w	r3, r3, #16
 8001b84:	2b10      	cmp	r3, #16
 8001b86:	d11b      	bne.n	8001bc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f06f 0210 	mvn.w	r2, #16
 8001b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2208      	movs	r2, #8
 8001b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 f870 	bl	8001c8c <HAL_TIM_IC_CaptureCallback>
 8001bac:	e005      	b.n	8001bba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 f862 	bl	8001c78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 f873 	bl	8001ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d10e      	bne.n	8001bec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d107      	bne.n	8001bec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f06f 0201 	mvn.w	r2, #1
 8001be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f7fe fdf0 	bl	80007cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bf6:	2b80      	cmp	r3, #128	; 0x80
 8001bf8:	d10e      	bne.n	8001c18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c04:	2b80      	cmp	r3, #128	; 0x80
 8001c06:	d107      	bne.n	8001c18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 f902 	bl	8001e1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c22:	2b40      	cmp	r3, #64	; 0x40
 8001c24:	d10e      	bne.n	8001c44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c30:	2b40      	cmp	r3, #64	; 0x40
 8001c32:	d107      	bne.n	8001c44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 f838 	bl	8001cb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	f003 0320 	and.w	r3, r3, #32
 8001c4e:	2b20      	cmp	r3, #32
 8001c50:	d10e      	bne.n	8001c70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	f003 0320 	and.w	r3, r3, #32
 8001c5c:	2b20      	cmp	r3, #32
 8001c5e:	d107      	bne.n	8001c70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f06f 0220 	mvn.w	r2, #32
 8001c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 f8cc 	bl	8001e08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c70:	bf00      	nop
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a40      	ldr	r2, [pc, #256]	; (8001ddc <TIM_Base_SetConfig+0x114>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d013      	beq.n	8001d08 <TIM_Base_SetConfig+0x40>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ce6:	d00f      	beq.n	8001d08 <TIM_Base_SetConfig+0x40>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a3d      	ldr	r2, [pc, #244]	; (8001de0 <TIM_Base_SetConfig+0x118>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d00b      	beq.n	8001d08 <TIM_Base_SetConfig+0x40>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a3c      	ldr	r2, [pc, #240]	; (8001de4 <TIM_Base_SetConfig+0x11c>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d007      	beq.n	8001d08 <TIM_Base_SetConfig+0x40>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a3b      	ldr	r2, [pc, #236]	; (8001de8 <TIM_Base_SetConfig+0x120>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d003      	beq.n	8001d08 <TIM_Base_SetConfig+0x40>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a3a      	ldr	r2, [pc, #232]	; (8001dec <TIM_Base_SetConfig+0x124>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d108      	bne.n	8001d1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a2f      	ldr	r2, [pc, #188]	; (8001ddc <TIM_Base_SetConfig+0x114>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d02b      	beq.n	8001d7a <TIM_Base_SetConfig+0xb2>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d28:	d027      	beq.n	8001d7a <TIM_Base_SetConfig+0xb2>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a2c      	ldr	r2, [pc, #176]	; (8001de0 <TIM_Base_SetConfig+0x118>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d023      	beq.n	8001d7a <TIM_Base_SetConfig+0xb2>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a2b      	ldr	r2, [pc, #172]	; (8001de4 <TIM_Base_SetConfig+0x11c>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d01f      	beq.n	8001d7a <TIM_Base_SetConfig+0xb2>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a2a      	ldr	r2, [pc, #168]	; (8001de8 <TIM_Base_SetConfig+0x120>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d01b      	beq.n	8001d7a <TIM_Base_SetConfig+0xb2>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a29      	ldr	r2, [pc, #164]	; (8001dec <TIM_Base_SetConfig+0x124>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d017      	beq.n	8001d7a <TIM_Base_SetConfig+0xb2>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a28      	ldr	r2, [pc, #160]	; (8001df0 <TIM_Base_SetConfig+0x128>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d013      	beq.n	8001d7a <TIM_Base_SetConfig+0xb2>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a27      	ldr	r2, [pc, #156]	; (8001df4 <TIM_Base_SetConfig+0x12c>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d00f      	beq.n	8001d7a <TIM_Base_SetConfig+0xb2>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a26      	ldr	r2, [pc, #152]	; (8001df8 <TIM_Base_SetConfig+0x130>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d00b      	beq.n	8001d7a <TIM_Base_SetConfig+0xb2>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a25      	ldr	r2, [pc, #148]	; (8001dfc <TIM_Base_SetConfig+0x134>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d007      	beq.n	8001d7a <TIM_Base_SetConfig+0xb2>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a24      	ldr	r2, [pc, #144]	; (8001e00 <TIM_Base_SetConfig+0x138>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d003      	beq.n	8001d7a <TIM_Base_SetConfig+0xb2>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a23      	ldr	r2, [pc, #140]	; (8001e04 <TIM_Base_SetConfig+0x13c>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d108      	bne.n	8001d8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	68fa      	ldr	r2, [r7, #12]
 8001d9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a0a      	ldr	r2, [pc, #40]	; (8001ddc <TIM_Base_SetConfig+0x114>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d003      	beq.n	8001dc0 <TIM_Base_SetConfig+0xf8>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a0c      	ldr	r2, [pc, #48]	; (8001dec <TIM_Base_SetConfig+0x124>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d103      	bne.n	8001dc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	691a      	ldr	r2, [r3, #16]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	615a      	str	r2, [r3, #20]
}
 8001dce:	bf00      	nop
 8001dd0:	3714      	adds	r7, #20
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	40010000 	.word	0x40010000
 8001de0:	40000400 	.word	0x40000400
 8001de4:	40000800 	.word	0x40000800
 8001de8:	40000c00 	.word	0x40000c00
 8001dec:	40010400 	.word	0x40010400
 8001df0:	40014000 	.word	0x40014000
 8001df4:	40014400 	.word	0x40014400
 8001df8:	40014800 	.word	0x40014800
 8001dfc:	40001800 	.word	0x40001800
 8001e00:	40001c00 	.word	0x40001c00
 8001e04:	40002000 	.word	0x40002000

08001e08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f103 0208 	add.w	r2, r3, #8
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f04f 32ff 	mov.w	r2, #4294967295
 8001e48:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f103 0208 	add.w	r2, r3, #8
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f103 0208 	add.w	r2, r3, #8
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001e7e:	bf00      	nop
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr

08001e8a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b085      	sub	sp, #20
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
 8001e92:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea0:	d103      	bne.n	8001eaa <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	e00c      	b.n	8001ec4 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	3308      	adds	r3, #8
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	e002      	b.n	8001eb8 <vListInsert+0x2e>
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	68ba      	ldr	r2, [r7, #8]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d2f6      	bcs.n	8001eb2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	1c5a      	adds	r2, r3, #1
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	601a      	str	r2, [r3, #0]
}
 8001ef0:	bf00      	nop
 8001ef2:	3714      	adds	r7, #20
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	6892      	ldr	r2, [r2, #8]
 8001f12:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	6852      	ldr	r2, [r2, #4]
 8001f1c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d103      	bne.n	8001f30 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	1e5a      	subs	r2, r3, #1
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3714      	adds	r7, #20
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d10a      	bne.n	8001f7e <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f6c:	f383 8811 	msr	BASEPRI, r3
 8001f70:	f3bf 8f6f 	isb	sy
 8001f74:	f3bf 8f4f 	dsb	sy
 8001f78:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8001f7a:	bf00      	nop
 8001f7c:	e7fe      	b.n	8001f7c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d05d      	beq.n	8002040 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d059      	beq.n	8002040 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f94:	2100      	movs	r1, #0
 8001f96:	fba3 2302 	umull	r2, r3, r3, r2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d000      	beq.n	8001fa0 <xQueueGenericReset+0x50>
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d14c      	bne.n	8002040 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8001fa6:	f002 fbcf 	bl	8004748 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb2:	6939      	ldr	r1, [r7, #16]
 8001fb4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001fb6:	fb01 f303 	mul.w	r3, r1, r3
 8001fba:	441a      	add	r2, r3
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	6939      	ldr	r1, [r7, #16]
 8001fda:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001fdc:	fb01 f303 	mul.w	r3, r1, r3
 8001fe0:	441a      	add	r2, r3
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	22ff      	movs	r2, #255	; 0xff
 8001fea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	22ff      	movs	r2, #255	; 0xff
 8001ff2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d114      	bne.n	8002026 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d01a      	beq.n	800203a <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	3310      	adds	r3, #16
 8002008:	4618      	mov	r0, r3
 800200a:	f001 fb2d 	bl	8003668 <xTaskRemoveFromEventList>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d012      	beq.n	800203a <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002014:	4b15      	ldr	r3, [pc, #84]	; (800206c <xQueueGenericReset+0x11c>)
 8002016:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	f3bf 8f4f 	dsb	sy
 8002020:	f3bf 8f6f 	isb	sy
 8002024:	e009      	b.n	800203a <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	3310      	adds	r3, #16
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff ff00 	bl	8001e30 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	3324      	adds	r3, #36	; 0x24
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff fefb 	bl	8001e30 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800203a:	f002 fbb5 	bl	80047a8 <vPortExitCritical>
 800203e:	e001      	b.n	8002044 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d10a      	bne.n	8002060 <xQueueGenericReset+0x110>
        __asm volatile
 800204a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800204e:	f383 8811 	msr	BASEPRI, r3
 8002052:	f3bf 8f6f 	isb	sy
 8002056:	f3bf 8f4f 	dsb	sy
 800205a:	60bb      	str	r3, [r7, #8]
    }
 800205c:	bf00      	nop
 800205e:	e7fe      	b.n	800205e <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002060:	697b      	ldr	r3, [r7, #20]
}
 8002062:	4618      	mov	r0, r3
 8002064:	3718      	adds	r7, #24
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	e000ed04 	.word	0xe000ed04

08002070 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002070:	b580      	push	{r7, lr}
 8002072:	b08a      	sub	sp, #40	; 0x28
 8002074:	af02      	add	r7, sp, #8
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	4613      	mov	r3, r2
 800207c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800207e:	2300      	movs	r3, #0
 8002080:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d02e      	beq.n	80020e6 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002088:	2100      	movs	r1, #0
 800208a:	68ba      	ldr	r2, [r7, #8]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	fba3 2302 	umull	r2, r3, r3, r2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d000      	beq.n	8002098 <xQueueGenericCreate+0x28>
 8002096:	2101      	movs	r1, #1
 8002098:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800209a:	2b00      	cmp	r3, #0
 800209c:	d123      	bne.n	80020e6 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	68ba      	ldr	r2, [r7, #8]
 80020a2:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80020a6:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80020aa:	d81c      	bhi.n	80020e6 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	68ba      	ldr	r2, [r7, #8]
 80020b0:	fb02 f303 	mul.w	r3, r2, r3
 80020b4:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	3350      	adds	r3, #80	; 0x50
 80020ba:	4618      	mov	r0, r3
 80020bc:	f002 fc26 	bl	800490c <pvPortMalloc>
 80020c0:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d01c      	beq.n	8002102 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	3350      	adds	r3, #80	; 0x50
 80020d0:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80020d2:	79fa      	ldrb	r2, [r7, #7]
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	9300      	str	r3, [sp, #0]
 80020d8:	4613      	mov	r3, r2
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	68b9      	ldr	r1, [r7, #8]
 80020de:	68f8      	ldr	r0, [r7, #12]
 80020e0:	f000 f814 	bl	800210c <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80020e4:	e00d      	b.n	8002102 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d10a      	bne.n	8002102 <xQueueGenericCreate+0x92>
        __asm volatile
 80020ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020f0:	f383 8811 	msr	BASEPRI, r3
 80020f4:	f3bf 8f6f 	isb	sy
 80020f8:	f3bf 8f4f 	dsb	sy
 80020fc:	613b      	str	r3, [r7, #16]
    }
 80020fe:	bf00      	nop
 8002100:	e7fe      	b.n	8002100 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002102:	69fb      	ldr	r3, [r7, #28]
    }
 8002104:	4618      	mov	r0, r3
 8002106:	3720      	adds	r7, #32
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
 8002118:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d103      	bne.n	8002128 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	e002      	b.n	800212e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	68ba      	ldr	r2, [r7, #8]
 8002138:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800213a:	2101      	movs	r1, #1
 800213c:	69b8      	ldr	r0, [r7, #24]
 800213e:	f7ff ff07 	bl	8001f50 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	78fa      	ldrb	r2, [r7, #3]
 8002146:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800214a:	bf00      	nop
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8002152:	b580      	push	{r7, lr}
 8002154:	b082      	sub	sp, #8
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d00e      	beq.n	800217e <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002172:	2300      	movs	r3, #0
 8002174:	2200      	movs	r2, #0
 8002176:	2100      	movs	r1, #0
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f000 f81d 	bl	80021b8 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 800217e:	bf00      	nop
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8002186:	b580      	push	{r7, lr}
 8002188:	b086      	sub	sp, #24
 800218a:	af00      	add	r7, sp, #0
 800218c:	4603      	mov	r3, r0
 800218e:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002190:	2301      	movs	r3, #1
 8002192:	617b      	str	r3, [r7, #20]
 8002194:	2300      	movs	r3, #0
 8002196:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002198:	79fb      	ldrb	r3, [r7, #7]
 800219a:	461a      	mov	r2, r3
 800219c:	6939      	ldr	r1, [r7, #16]
 800219e:	6978      	ldr	r0, [r7, #20]
 80021a0:	f7ff ff66 	bl	8002070 <xQueueGenericCreate>
 80021a4:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f7ff ffd3 	bl	8002152 <prvInitialiseMutex>

        return xNewQueue;
 80021ac:	68fb      	ldr	r3, [r7, #12]
    }
 80021ae:	4618      	mov	r0, r3
 80021b0:	3718      	adds	r7, #24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
	...

080021b8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08e      	sub	sp, #56	; 0x38
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
 80021c4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80021c6:	2300      	movs	r3, #0
 80021c8:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80021ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d10a      	bne.n	80021ea <xQueueGenericSend+0x32>
        __asm volatile
 80021d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021d8:	f383 8811 	msr	BASEPRI, r3
 80021dc:	f3bf 8f6f 	isb	sy
 80021e0:	f3bf 8f4f 	dsb	sy
 80021e4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80021e6:	bf00      	nop
 80021e8:	e7fe      	b.n	80021e8 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d103      	bne.n	80021f8 <xQueueGenericSend+0x40>
 80021f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d101      	bne.n	80021fc <xQueueGenericSend+0x44>
 80021f8:	2301      	movs	r3, #1
 80021fa:	e000      	b.n	80021fe <xQueueGenericSend+0x46>
 80021fc:	2300      	movs	r3, #0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10a      	bne.n	8002218 <xQueueGenericSend+0x60>
        __asm volatile
 8002202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002206:	f383 8811 	msr	BASEPRI, r3
 800220a:	f3bf 8f6f 	isb	sy
 800220e:	f3bf 8f4f 	dsb	sy
 8002212:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002214:	bf00      	nop
 8002216:	e7fe      	b.n	8002216 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	2b02      	cmp	r3, #2
 800221c:	d103      	bne.n	8002226 <xQueueGenericSend+0x6e>
 800221e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002222:	2b01      	cmp	r3, #1
 8002224:	d101      	bne.n	800222a <xQueueGenericSend+0x72>
 8002226:	2301      	movs	r3, #1
 8002228:	e000      	b.n	800222c <xQueueGenericSend+0x74>
 800222a:	2300      	movs	r3, #0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d10a      	bne.n	8002246 <xQueueGenericSend+0x8e>
        __asm volatile
 8002230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002234:	f383 8811 	msr	BASEPRI, r3
 8002238:	f3bf 8f6f 	isb	sy
 800223c:	f3bf 8f4f 	dsb	sy
 8002240:	623b      	str	r3, [r7, #32]
    }
 8002242:	bf00      	nop
 8002244:	e7fe      	b.n	8002244 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002246:	f001 fc1f 	bl	8003a88 <xTaskGetSchedulerState>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d102      	bne.n	8002256 <xQueueGenericSend+0x9e>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <xQueueGenericSend+0xa2>
 8002256:	2301      	movs	r3, #1
 8002258:	e000      	b.n	800225c <xQueueGenericSend+0xa4>
 800225a:	2300      	movs	r3, #0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d10a      	bne.n	8002276 <xQueueGenericSend+0xbe>
        __asm volatile
 8002260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002264:	f383 8811 	msr	BASEPRI, r3
 8002268:	f3bf 8f6f 	isb	sy
 800226c:	f3bf 8f4f 	dsb	sy
 8002270:	61fb      	str	r3, [r7, #28]
    }
 8002272:	bf00      	nop
 8002274:	e7fe      	b.n	8002274 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002276:	f002 fa67 	bl	8004748 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800227a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800227c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800227e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002282:	429a      	cmp	r2, r3
 8002284:	d302      	bcc.n	800228c <xQueueGenericSend+0xd4>
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	2b02      	cmp	r3, #2
 800228a:	d129      	bne.n	80022e0 <xQueueGenericSend+0x128>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800228c:	683a      	ldr	r2, [r7, #0]
 800228e:	68b9      	ldr	r1, [r7, #8]
 8002290:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002292:	f000 fa85 	bl	80027a0 <prvCopyDataToQueue>
 8002296:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800229a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229c:	2b00      	cmp	r3, #0
 800229e:	d010      	beq.n	80022c2 <xQueueGenericSend+0x10a>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80022a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a2:	3324      	adds	r3, #36	; 0x24
 80022a4:	4618      	mov	r0, r3
 80022a6:	f001 f9df 	bl	8003668 <xTaskRemoveFromEventList>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d013      	beq.n	80022d8 <xQueueGenericSend+0x120>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 80022b0:	4b3f      	ldr	r3, [pc, #252]	; (80023b0 <xQueueGenericSend+0x1f8>)
 80022b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	f3bf 8f4f 	dsb	sy
 80022bc:	f3bf 8f6f 	isb	sy
 80022c0:	e00a      	b.n	80022d8 <xQueueGenericSend+0x120>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 80022c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d007      	beq.n	80022d8 <xQueueGenericSend+0x120>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 80022c8:	4b39      	ldr	r3, [pc, #228]	; (80023b0 <xQueueGenericSend+0x1f8>)
 80022ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	f3bf 8f4f 	dsb	sy
 80022d4:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80022d8:	f002 fa66 	bl	80047a8 <vPortExitCritical>
                return pdPASS;
 80022dc:	2301      	movs	r3, #1
 80022de:	e063      	b.n	80023a8 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d103      	bne.n	80022ee <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80022e6:	f002 fa5f 	bl	80047a8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80022ea:	2300      	movs	r3, #0
 80022ec:	e05c      	b.n	80023a8 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 80022ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d106      	bne.n	8002302 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80022f4:	f107 0314 	add.w	r3, r7, #20
 80022f8:	4618      	mov	r0, r3
 80022fa:	f001 fa8b 	bl	8003814 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80022fe:	2301      	movs	r3, #1
 8002300:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002302:	f002 fa51 	bl	80047a8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002306:	f000 feb9 	bl	800307c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800230a:	f002 fa1d 	bl	8004748 <vPortEnterCritical>
 800230e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002310:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002314:	b25b      	sxtb	r3, r3
 8002316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800231a:	d103      	bne.n	8002324 <xQueueGenericSend+0x16c>
 800231c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800231e:	2200      	movs	r2, #0
 8002320:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002326:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800232a:	b25b      	sxtb	r3, r3
 800232c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002330:	d103      	bne.n	800233a <xQueueGenericSend+0x182>
 8002332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002334:	2200      	movs	r2, #0
 8002336:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800233a:	f002 fa35 	bl	80047a8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800233e:	1d3a      	adds	r2, r7, #4
 8002340:	f107 0314 	add.w	r3, r7, #20
 8002344:	4611      	mov	r1, r2
 8002346:	4618      	mov	r0, r3
 8002348:	f001 fa7a 	bl	8003840 <xTaskCheckForTimeOut>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d124      	bne.n	800239c <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002352:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002354:	f000 fb1c 	bl	8002990 <prvIsQueueFull>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d018      	beq.n	8002390 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800235e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002360:	3310      	adds	r3, #16
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	4611      	mov	r1, r2
 8002366:	4618      	mov	r0, r3
 8002368:	f001 f914 	bl	8003594 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800236c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800236e:	f000 faa7 	bl	80028c0 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002372:	f000 fe91 	bl	8003098 <xTaskResumeAll>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	f47f af7c 	bne.w	8002276 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 800237e:	4b0c      	ldr	r3, [pc, #48]	; (80023b0 <xQueueGenericSend+0x1f8>)
 8002380:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	f3bf 8f4f 	dsb	sy
 800238a:	f3bf 8f6f 	isb	sy
 800238e:	e772      	b.n	8002276 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002390:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002392:	f000 fa95 	bl	80028c0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002396:	f000 fe7f 	bl	8003098 <xTaskResumeAll>
 800239a:	e76c      	b.n	8002276 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800239c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800239e:	f000 fa8f 	bl	80028c0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80023a2:	f000 fe79 	bl	8003098 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80023a6:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3738      	adds	r7, #56	; 0x38
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	e000ed04 	.word	0xe000ed04

080023b4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b08c      	sub	sp, #48	; 0x30
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80023c0:	2300      	movs	r3, #0
 80023c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80023c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10a      	bne.n	80023e4 <xQueueReceive+0x30>
        __asm volatile
 80023ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023d2:	f383 8811 	msr	BASEPRI, r3
 80023d6:	f3bf 8f6f 	isb	sy
 80023da:	f3bf 8f4f 	dsb	sy
 80023de:	623b      	str	r3, [r7, #32]
    }
 80023e0:	bf00      	nop
 80023e2:	e7fe      	b.n	80023e2 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d103      	bne.n	80023f2 <xQueueReceive+0x3e>
 80023ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <xQueueReceive+0x42>
 80023f2:	2301      	movs	r3, #1
 80023f4:	e000      	b.n	80023f8 <xQueueReceive+0x44>
 80023f6:	2300      	movs	r3, #0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10a      	bne.n	8002412 <xQueueReceive+0x5e>
        __asm volatile
 80023fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002400:	f383 8811 	msr	BASEPRI, r3
 8002404:	f3bf 8f6f 	isb	sy
 8002408:	f3bf 8f4f 	dsb	sy
 800240c:	61fb      	str	r3, [r7, #28]
    }
 800240e:	bf00      	nop
 8002410:	e7fe      	b.n	8002410 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002412:	f001 fb39 	bl	8003a88 <xTaskGetSchedulerState>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d102      	bne.n	8002422 <xQueueReceive+0x6e>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <xQueueReceive+0x72>
 8002422:	2301      	movs	r3, #1
 8002424:	e000      	b.n	8002428 <xQueueReceive+0x74>
 8002426:	2300      	movs	r3, #0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10a      	bne.n	8002442 <xQueueReceive+0x8e>
        __asm volatile
 800242c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002430:	f383 8811 	msr	BASEPRI, r3
 8002434:	f3bf 8f6f 	isb	sy
 8002438:	f3bf 8f4f 	dsb	sy
 800243c:	61bb      	str	r3, [r7, #24]
    }
 800243e:	bf00      	nop
 8002440:	e7fe      	b.n	8002440 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002442:	f002 f981 	bl	8004748 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800244a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244e:	2b00      	cmp	r3, #0
 8002450:	d01f      	beq.n	8002492 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002452:	68b9      	ldr	r1, [r7, #8]
 8002454:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002456:	f000 fa0d 	bl	8002874 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	1e5a      	subs	r2, r3, #1
 800245e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002460:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00f      	beq.n	800248a <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800246a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800246c:	3310      	adds	r3, #16
 800246e:	4618      	mov	r0, r3
 8002470:	f001 f8fa 	bl	8003668 <xTaskRemoveFromEventList>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d007      	beq.n	800248a <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800247a:	4b3d      	ldr	r3, [pc, #244]	; (8002570 <xQueueReceive+0x1bc>)
 800247c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002480:	601a      	str	r2, [r3, #0]
 8002482:	f3bf 8f4f 	dsb	sy
 8002486:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800248a:	f002 f98d 	bl	80047a8 <vPortExitCritical>
                return pdPASS;
 800248e:	2301      	movs	r3, #1
 8002490:	e069      	b.n	8002566 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d103      	bne.n	80024a0 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002498:	f002 f986 	bl	80047a8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800249c:	2300      	movs	r3, #0
 800249e:	e062      	b.n	8002566 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80024a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d106      	bne.n	80024b4 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80024a6:	f107 0310 	add.w	r3, r7, #16
 80024aa:	4618      	mov	r0, r3
 80024ac:	f001 f9b2 	bl	8003814 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80024b0:	2301      	movs	r3, #1
 80024b2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80024b4:	f002 f978 	bl	80047a8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80024b8:	f000 fde0 	bl	800307c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80024bc:	f002 f944 	bl	8004748 <vPortEnterCritical>
 80024c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024c6:	b25b      	sxtb	r3, r3
 80024c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024cc:	d103      	bne.n	80024d6 <xQueueReceive+0x122>
 80024ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024dc:	b25b      	sxtb	r3, r3
 80024de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e2:	d103      	bne.n	80024ec <xQueueReceive+0x138>
 80024e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80024ec:	f002 f95c 	bl	80047a8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80024f0:	1d3a      	adds	r2, r7, #4
 80024f2:	f107 0310 	add.w	r3, r7, #16
 80024f6:	4611      	mov	r1, r2
 80024f8:	4618      	mov	r0, r3
 80024fa:	f001 f9a1 	bl	8003840 <xTaskCheckForTimeOut>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d123      	bne.n	800254c <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002504:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002506:	f000 fa2d 	bl	8002964 <prvIsQueueEmpty>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d017      	beq.n	8002540 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002512:	3324      	adds	r3, #36	; 0x24
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	4611      	mov	r1, r2
 8002518:	4618      	mov	r0, r3
 800251a:	f001 f83b 	bl	8003594 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800251e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002520:	f000 f9ce 	bl	80028c0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002524:	f000 fdb8 	bl	8003098 <xTaskResumeAll>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d189      	bne.n	8002442 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800252e:	4b10      	ldr	r3, [pc, #64]	; (8002570 <xQueueReceive+0x1bc>)
 8002530:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	f3bf 8f4f 	dsb	sy
 800253a:	f3bf 8f6f 	isb	sy
 800253e:	e780      	b.n	8002442 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002540:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002542:	f000 f9bd 	bl	80028c0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002546:	f000 fda7 	bl	8003098 <xTaskResumeAll>
 800254a:	e77a      	b.n	8002442 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800254c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800254e:	f000 f9b7 	bl	80028c0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002552:	f000 fda1 	bl	8003098 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002556:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002558:	f000 fa04 	bl	8002964 <prvIsQueueEmpty>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	f43f af6f 	beq.w	8002442 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002564:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002566:	4618      	mov	r0, r3
 8002568:	3730      	adds	r7, #48	; 0x30
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	e000ed04 	.word	0xe000ed04

08002574 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b08c      	sub	sp, #48	; 0x30
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800257e:	2300      	movs	r3, #0
 8002580:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	627b      	str	r3, [r7, #36]	; 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8002586:	2300      	movs	r3, #0
 8002588:	62bb      	str	r3, [r7, #40]	; 0x28
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800258a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258c:	2b00      	cmp	r3, #0
 800258e:	d10a      	bne.n	80025a6 <xQueueSemaphoreTake+0x32>
        __asm volatile
 8002590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002594:	f383 8811 	msr	BASEPRI, r3
 8002598:	f3bf 8f6f 	isb	sy
 800259c:	f3bf 8f4f 	dsb	sy
 80025a0:	61bb      	str	r3, [r7, #24]
    }
 80025a2:	bf00      	nop
 80025a4:	e7fe      	b.n	80025a4 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00a      	beq.n	80025c4 <xQueueSemaphoreTake+0x50>
        __asm volatile
 80025ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b2:	f383 8811 	msr	BASEPRI, r3
 80025b6:	f3bf 8f6f 	isb	sy
 80025ba:	f3bf 8f4f 	dsb	sy
 80025be:	617b      	str	r3, [r7, #20]
    }
 80025c0:	bf00      	nop
 80025c2:	e7fe      	b.n	80025c2 <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80025c4:	f001 fa60 	bl	8003a88 <xTaskGetSchedulerState>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d102      	bne.n	80025d4 <xQueueSemaphoreTake+0x60>
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d101      	bne.n	80025d8 <xQueueSemaphoreTake+0x64>
 80025d4:	2301      	movs	r3, #1
 80025d6:	e000      	b.n	80025da <xQueueSemaphoreTake+0x66>
 80025d8:	2300      	movs	r3, #0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10a      	bne.n	80025f4 <xQueueSemaphoreTake+0x80>
        __asm volatile
 80025de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e2:	f383 8811 	msr	BASEPRI, r3
 80025e6:	f3bf 8f6f 	isb	sy
 80025ea:	f3bf 8f4f 	dsb	sy
 80025ee:	613b      	str	r3, [r7, #16]
    }
 80025f0:	bf00      	nop
 80025f2:	e7fe      	b.n	80025f2 <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80025f4:	f002 f8a8 	bl	8004748 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80025f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025fc:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80025fe:	6a3b      	ldr	r3, [r7, #32]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d024      	beq.n	800264e <xQueueSemaphoreTake+0xda>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002604:	6a3b      	ldr	r3, [r7, #32]
 8002606:	1e5a      	subs	r2, r3, #1
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800260c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d104      	bne.n	800261e <xQueueSemaphoreTake+0xaa>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002614:	f001 fc50 	bl	8003eb8 <pvTaskIncrementMutexHeldCount>
 8002618:	4602      	mov	r2, r0
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00f      	beq.n	8002646 <xQueueSemaphoreTake+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	3310      	adds	r3, #16
 800262a:	4618      	mov	r0, r3
 800262c:	f001 f81c 	bl	8003668 <xTaskRemoveFromEventList>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d007      	beq.n	8002646 <xQueueSemaphoreTake+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002636:	4b4d      	ldr	r3, [pc, #308]	; (800276c <xQueueSemaphoreTake+0x1f8>)
 8002638:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	f3bf 8f4f 	dsb	sy
 8002642:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002646:	f002 f8af 	bl	80047a8 <vPortExitCritical>
                return pdPASS;
 800264a:	2301      	movs	r3, #1
 800264c:	e089      	b.n	8002762 <xQueueSemaphoreTake+0x1ee>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d103      	bne.n	800265c <xQueueSemaphoreTake+0xe8>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8002654:	f002 f8a8 	bl	80047a8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002658:	2300      	movs	r3, #0
 800265a:	e082      	b.n	8002762 <xQueueSemaphoreTake+0x1ee>
                }
                else if( xEntryTimeSet == pdFALSE )
 800265c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800265e:	2b00      	cmp	r3, #0
 8002660:	d106      	bne.n	8002670 <xQueueSemaphoreTake+0xfc>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002662:	f107 0308 	add.w	r3, r7, #8
 8002666:	4618      	mov	r0, r3
 8002668:	f001 f8d4 	bl	8003814 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800266c:	2301      	movs	r3, #1
 800266e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002670:	f002 f89a 	bl	80047a8 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002674:	f000 fd02 	bl	800307c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002678:	f002 f866 	bl	8004748 <vPortEnterCritical>
 800267c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002682:	b25b      	sxtb	r3, r3
 8002684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002688:	d103      	bne.n	8002692 <xQueueSemaphoreTake+0x11e>
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002698:	b25b      	sxtb	r3, r3
 800269a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800269e:	d103      	bne.n	80026a8 <xQueueSemaphoreTake+0x134>
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026a8:	f002 f87e 	bl	80047a8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80026ac:	463a      	mov	r2, r7
 80026ae:	f107 0308 	add.w	r3, r7, #8
 80026b2:	4611      	mov	r1, r2
 80026b4:	4618      	mov	r0, r3
 80026b6:	f001 f8c3 	bl	8003840 <xTaskCheckForTimeOut>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d132      	bne.n	8002726 <xQueueSemaphoreTake+0x1b2>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80026c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80026c2:	f000 f94f 	bl	8002964 <prvIsQueueEmpty>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d026      	beq.n	800271a <xQueueSemaphoreTake+0x1a6>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d109      	bne.n	80026e8 <xQueueSemaphoreTake+0x174>
                    {
                        taskENTER_CRITICAL();
 80026d4:	f002 f838 	bl	8004748 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	4618      	mov	r0, r3
 80026de:	f001 f9f1 	bl	8003ac4 <xTaskPriorityInherit>
 80026e2:	62b8      	str	r0, [r7, #40]	; 0x28
                        }
                        taskEXIT_CRITICAL();
 80026e4:	f002 f860 	bl	80047a8 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80026e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ea:	3324      	adds	r3, #36	; 0x24
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	4611      	mov	r1, r2
 80026f0:	4618      	mov	r0, r3
 80026f2:	f000 ff4f 	bl	8003594 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80026f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80026f8:	f000 f8e2 	bl	80028c0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80026fc:	f000 fccc 	bl	8003098 <xTaskResumeAll>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	f47f af76 	bne.w	80025f4 <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 8002708:	4b18      	ldr	r3, [pc, #96]	; (800276c <xQueueSemaphoreTake+0x1f8>)
 800270a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	f3bf 8f4f 	dsb	sy
 8002714:	f3bf 8f6f 	isb	sy
 8002718:	e76c      	b.n	80025f4 <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 800271a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800271c:	f000 f8d0 	bl	80028c0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002720:	f000 fcba 	bl	8003098 <xTaskResumeAll>
 8002724:	e766      	b.n	80025f4 <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8002726:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002728:	f000 f8ca 	bl	80028c0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800272c:	f000 fcb4 	bl	8003098 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002730:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002732:	f000 f917 	bl	8002964 <prvIsQueueEmpty>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	f43f af5b 	beq.w	80025f4 <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 800273e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00d      	beq.n	8002760 <xQueueSemaphoreTake+0x1ec>
                    {
                        taskENTER_CRITICAL();
 8002744:	f002 f800 	bl	8004748 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002748:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800274a:	f000 f811 	bl	8002770 <prvGetDisinheritPriorityAfterTimeout>
 800274e:	61f8      	str	r0, [r7, #28]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	69f9      	ldr	r1, [r7, #28]
 8002756:	4618      	mov	r0, r3
 8002758:	f001 faf6 	bl	8003d48 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 800275c:	f002 f824 	bl	80047a8 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002760:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002762:	4618      	mov	r0, r3
 8002764:	3730      	adds	r7, #48	; 0x30
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	e000ed04 	.word	0xe000ed04

08002770 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277c:	2b00      	cmp	r3, #0
 800277e:	d006      	beq.n	800278e <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f1c3 0305 	rsb	r3, r3, #5
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	e001      	b.n	8002792 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800278e:	2300      	movs	r3, #0
 8002790:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8002792:	68fb      	ldr	r3, [r7, #12]
    }
 8002794:	4618      	mov	r0, r3
 8002796:	3714      	adds	r7, #20
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80027ac:	2300      	movs	r3, #0
 80027ae:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b4:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d10d      	bne.n	80027da <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d14d      	bne.n	8002862 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f001 fa18 	bl	8003c00 <xTaskPriorityDisinherit>
 80027d0:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	609a      	str	r2, [r3, #8]
 80027d8:	e043      	b.n	8002862 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d119      	bne.n	8002814 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6858      	ldr	r0, [r3, #4]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e8:	461a      	mov	r2, r3
 80027ea:	68b9      	ldr	r1, [r7, #8]
 80027ec:	f002 fa7e 	bl	8004cec <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f8:	441a      	add	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	429a      	cmp	r2, r3
 8002808:	d32b      	bcc.n	8002862 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	605a      	str	r2, [r3, #4]
 8002812:	e026      	b.n	8002862 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	68d8      	ldr	r0, [r3, #12]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281c:	461a      	mov	r2, r3
 800281e:	68b9      	ldr	r1, [r7, #8]
 8002820:	f002 fa64 	bl	8004cec <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	68da      	ldr	r2, [r3, #12]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282c:	425b      	negs	r3, r3
 800282e:	441a      	add	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	68da      	ldr	r2, [r3, #12]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	429a      	cmp	r2, r3
 800283e:	d207      	bcs.n	8002850 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002848:	425b      	negs	r3, r3
 800284a:	441a      	add	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b02      	cmp	r3, #2
 8002854:	d105      	bne.n	8002862 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d002      	beq.n	8002862 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	3b01      	subs	r3, #1
 8002860:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1c5a      	adds	r2, r3, #1
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800286a:	697b      	ldr	r3, [r7, #20]
}
 800286c:	4618      	mov	r0, r3
 800286e:	3718      	adds	r7, #24
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	2b00      	cmp	r3, #0
 8002884:	d018      	beq.n	80028b8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68da      	ldr	r2, [r3, #12]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	441a      	add	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	68da      	ldr	r2, [r3, #12]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	429a      	cmp	r2, r3
 800289e:	d303      	bcc.n	80028a8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68d9      	ldr	r1, [r3, #12]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b0:	461a      	mov	r2, r3
 80028b2:	6838      	ldr	r0, [r7, #0]
 80028b4:	f002 fa1a 	bl	8004cec <memcpy>
    }
}
 80028b8:	bf00      	nop
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80028c8:	f001 ff3e 	bl	8004748 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028d2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80028d4:	e011      	b.n	80028fa <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d012      	beq.n	8002904 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	3324      	adds	r3, #36	; 0x24
 80028e2:	4618      	mov	r0, r3
 80028e4:	f000 fec0 	bl	8003668 <xTaskRemoveFromEventList>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80028ee:	f001 f80d 	bl	800390c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80028f2:	7bfb      	ldrb	r3, [r7, #15]
 80028f4:	3b01      	subs	r3, #1
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80028fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	dce9      	bgt.n	80028d6 <prvUnlockQueue+0x16>
 8002902:	e000      	b.n	8002906 <prvUnlockQueue+0x46>
                    break;
 8002904:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	22ff      	movs	r2, #255	; 0xff
 800290a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800290e:	f001 ff4b 	bl	80047a8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002912:	f001 ff19 	bl	8004748 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800291c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800291e:	e011      	b.n	8002944 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d012      	beq.n	800294e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3310      	adds	r3, #16
 800292c:	4618      	mov	r0, r3
 800292e:	f000 fe9b 	bl	8003668 <xTaskRemoveFromEventList>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002938:	f000 ffe8 	bl	800390c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800293c:	7bbb      	ldrb	r3, [r7, #14]
 800293e:	3b01      	subs	r3, #1
 8002940:	b2db      	uxtb	r3, r3
 8002942:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002944:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002948:	2b00      	cmp	r3, #0
 800294a:	dce9      	bgt.n	8002920 <prvUnlockQueue+0x60>
 800294c:	e000      	b.n	8002950 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800294e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	22ff      	movs	r2, #255	; 0xff
 8002954:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002958:	f001 ff26 	bl	80047a8 <vPortExitCritical>
}
 800295c:	bf00      	nop
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800296c:	f001 feec 	bl	8004748 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002974:	2b00      	cmp	r3, #0
 8002976:	d102      	bne.n	800297e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002978:	2301      	movs	r3, #1
 800297a:	60fb      	str	r3, [r7, #12]
 800297c:	e001      	b.n	8002982 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800297e:	2300      	movs	r3, #0
 8002980:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002982:	f001 ff11 	bl	80047a8 <vPortExitCritical>

    return xReturn;
 8002986:	68fb      	ldr	r3, [r7, #12]
}
 8002988:	4618      	mov	r0, r3
 800298a:	3710      	adds	r7, #16
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002998:	f001 fed6 	bl	8004748 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d102      	bne.n	80029ae <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80029a8:	2301      	movs	r3, #1
 80029aa:	60fb      	str	r3, [r7, #12]
 80029ac:	e001      	b.n	80029b2 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80029ae:	2300      	movs	r3, #0
 80029b0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80029b2:	f001 fef9 	bl	80047a8 <vPortExitCritical>

    return xReturn;
 80029b6:	68fb      	ldr	r3, [r7, #12]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80029c0:	b480      	push	{r7}
 80029c2:	b087      	sub	sp, #28
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80029ca:	2300      	movs	r3, #0
 80029cc:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d10a      	bne.n	80029ea <vQueueAddToRegistry+0x2a>
        __asm volatile
 80029d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d8:	f383 8811 	msr	BASEPRI, r3
 80029dc:	f3bf 8f6f 	isb	sy
 80029e0:	f3bf 8f4f 	dsb	sy
 80029e4:	60fb      	str	r3, [r7, #12]
    }
 80029e6:	bf00      	nop
 80029e8:	e7fe      	b.n	80029e8 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d024      	beq.n	8002a3a <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80029f0:	2300      	movs	r3, #0
 80029f2:	617b      	str	r3, [r7, #20]
 80029f4:	e01e      	b.n	8002a34 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80029f6:	4a18      	ldr	r2, [pc, #96]	; (8002a58 <vQueueAddToRegistry+0x98>)
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	4413      	add	r3, r2
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d105      	bne.n	8002a12 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	4a13      	ldr	r2, [pc, #76]	; (8002a58 <vQueueAddToRegistry+0x98>)
 8002a0c:	4413      	add	r3, r2
 8002a0e:	613b      	str	r3, [r7, #16]
                    break;
 8002a10:	e013      	b.n	8002a3a <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d10a      	bne.n	8002a2e <vQueueAddToRegistry+0x6e>
 8002a18:	4a0f      	ldr	r2, [pc, #60]	; (8002a58 <vQueueAddToRegistry+0x98>)
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d104      	bne.n	8002a2e <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	4a0b      	ldr	r2, [pc, #44]	; (8002a58 <vQueueAddToRegistry+0x98>)
 8002a2a:	4413      	add	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	3301      	adds	r3, #1
 8002a32:	617b      	str	r3, [r7, #20]
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	2b07      	cmp	r3, #7
 8002a38:	d9dd      	bls.n	80029f6 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d005      	beq.n	8002a4c <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8002a4c:	bf00      	nop
 8002a4e:	371c      	adds	r7, #28
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr
 8002a58:	20000088 	.word	0x20000088

08002a5c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002a6c:	f001 fe6c 	bl	8004748 <vPortEnterCritical>
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a76:	b25b      	sxtb	r3, r3
 8002a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a7c:	d103      	bne.n	8002a86 <vQueueWaitForMessageRestricted+0x2a>
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a8c:	b25b      	sxtb	r3, r3
 8002a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a92:	d103      	bne.n	8002a9c <vQueueWaitForMessageRestricted+0x40>
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a9c:	f001 fe84 	bl	80047a8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d106      	bne.n	8002ab6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	3324      	adds	r3, #36	; 0x24
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	68b9      	ldr	r1, [r7, #8]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f000 fd93 	bl	80035dc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002ab6:	6978      	ldr	r0, [r7, #20]
 8002ab8:	f7ff ff02 	bl	80028c0 <prvUnlockQueue>
    }
 8002abc:	bf00      	nop
 8002abe:	3718      	adds	r7, #24
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b08c      	sub	sp, #48	; 0x30
 8002ac8:	af04      	add	r7, sp, #16
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	603b      	str	r3, [r7, #0]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002ad4:	88fb      	ldrh	r3, [r7, #6]
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f001 ff17 	bl	800490c <pvPortMalloc>
 8002ade:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d013      	beq.n	8002b0e <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002ae6:	2060      	movs	r0, #96	; 0x60
 8002ae8:	f001 ff10 	bl	800490c <pvPortMalloc>
 8002aec:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d008      	beq.n	8002b06 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002af4:	2260      	movs	r2, #96	; 0x60
 8002af6:	2100      	movs	r1, #0
 8002af8:	69f8      	ldr	r0, [r7, #28]
 8002afa:	f002 f905 	bl	8004d08 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	631a      	str	r2, [r3, #48]	; 0x30
 8002b04:	e005      	b.n	8002b12 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002b06:	6978      	ldr	r0, [r7, #20]
 8002b08:	f001 ffba 	bl	8004a80 <vPortFree>
 8002b0c:	e001      	b.n	8002b12 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d013      	beq.n	8002b40 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002b18:	88fa      	ldrh	r2, [r7, #6]
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	9303      	str	r3, [sp, #12]
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	9302      	str	r3, [sp, #8]
 8002b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b24:	9301      	str	r3, [sp, #4]
 8002b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	68b9      	ldr	r1, [r7, #8]
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 f80e 	bl	8002b50 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002b34:	69f8      	ldr	r0, [r7, #28]
 8002b36:	f000 f899 	bl	8002c6c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	61bb      	str	r3, [r7, #24]
 8002b3e:	e002      	b.n	8002b46 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002b40:	f04f 33ff 	mov.w	r3, #4294967295
 8002b44:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002b46:	69bb      	ldr	r3, [r7, #24]
    }
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3720      	adds	r7, #32
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b088      	sub	sp, #32
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
 8002b5c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b60:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	461a      	mov	r2, r3
 8002b68:	21a5      	movs	r1, #165	; 0xa5
 8002b6a:	f002 f8cd 	bl	8004d08 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4413      	add	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	f023 0307 	bic.w	r3, r3, #7
 8002b86:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	f003 0307 	and.w	r3, r3, #7
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00a      	beq.n	8002ba8 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b96:	f383 8811 	msr	BASEPRI, r3
 8002b9a:	f3bf 8f6f 	isb	sy
 8002b9e:	f3bf 8f4f 	dsb	sy
 8002ba2:	617b      	str	r3, [r7, #20]
    }
 8002ba4:	bf00      	nop
 8002ba6:	e7fe      	b.n	8002ba6 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d01e      	beq.n	8002bec <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61fb      	str	r3, [r7, #28]
 8002bb2:	e012      	b.n	8002bda <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002bb4:	68ba      	ldr	r2, [r7, #8]
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	4413      	add	r3, r2
 8002bba:	7819      	ldrb	r1, [r3, #0]
 8002bbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	3334      	adds	r3, #52	; 0x34
 8002bc4:	460a      	mov	r2, r1
 8002bc6:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002bc8:	68ba      	ldr	r2, [r7, #8]
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	4413      	add	r3, r2
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d006      	beq.n	8002be2 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	61fb      	str	r3, [r7, #28]
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	2b13      	cmp	r3, #19
 8002bde:	d9e9      	bls.n	8002bb4 <prvInitialiseNewTask+0x64>
 8002be0:	e000      	b.n	8002be4 <prvInitialiseNewTask+0x94>
            {
                break;
 8002be2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	d90a      	bls.n	8002c08 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8002bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf6:	f383 8811 	msr	BASEPRI, r3
 8002bfa:	f3bf 8f6f 	isb	sy
 8002bfe:	f3bf 8f4f 	dsb	sy
 8002c02:	613b      	str	r3, [r7, #16]
    }
 8002c04:	bf00      	nop
 8002c06:	e7fe      	b.n	8002c06 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c0a:	2b04      	cmp	r3, #4
 8002c0c:	d901      	bls.n	8002c12 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002c0e:	2304      	movs	r3, #4
 8002c10:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c16:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c1c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c20:	3304      	adds	r3, #4
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff f924 	bl	8001e70 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2a:	3318      	adds	r3, #24
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff f91f 	bl	8001e70 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c36:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c3a:	f1c3 0205 	rsb	r2, r3, #5
 8002c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c40:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c46:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	68f9      	ldr	r1, [r7, #12]
 8002c4c:	69b8      	ldr	r0, [r7, #24]
 8002c4e:	f001 fc4b 	bl	80044e8 <pxPortInitialiseStack>
 8002c52:	4602      	mov	r2, r0
 8002c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c56:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d002      	beq.n	8002c64 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c62:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002c64:	bf00      	nop
 8002c66:	3720      	adds	r7, #32
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002c74:	f001 fd68 	bl	8004748 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002c78:	4b40      	ldr	r3, [pc, #256]	; (8002d7c <prvAddNewTaskToReadyList+0x110>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	4a3f      	ldr	r2, [pc, #252]	; (8002d7c <prvAddNewTaskToReadyList+0x110>)
 8002c80:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002c82:	4b3f      	ldr	r3, [pc, #252]	; (8002d80 <prvAddNewTaskToReadyList+0x114>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d109      	bne.n	8002c9e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002c8a:	4a3d      	ldr	r2, [pc, #244]	; (8002d80 <prvAddNewTaskToReadyList+0x114>)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002c90:	4b3a      	ldr	r3, [pc, #232]	; (8002d7c <prvAddNewTaskToReadyList+0x110>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d110      	bne.n	8002cba <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002c98:	f000 fe5c 	bl	8003954 <prvInitialiseTaskLists>
 8002c9c:	e00d      	b.n	8002cba <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002c9e:	4b39      	ldr	r3, [pc, #228]	; (8002d84 <prvAddNewTaskToReadyList+0x118>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d109      	bne.n	8002cba <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002ca6:	4b36      	ldr	r3, [pc, #216]	; (8002d80 <prvAddNewTaskToReadyList+0x114>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d802      	bhi.n	8002cba <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002cb4:	4a32      	ldr	r2, [pc, #200]	; (8002d80 <prvAddNewTaskToReadyList+0x114>)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002cba:	4b33      	ldr	r3, [pc, #204]	; (8002d88 <prvAddNewTaskToReadyList+0x11c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	4a31      	ldr	r2, [pc, #196]	; (8002d88 <prvAddNewTaskToReadyList+0x11c>)
 8002cc2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002cc4:	4b30      	ldr	r3, [pc, #192]	; (8002d88 <prvAddNewTaskToReadyList+0x11c>)
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	649a      	str	r2, [r3, #72]	; 0x48
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	409a      	lsls	r2, r3
 8002cd4:	4b2d      	ldr	r3, [pc, #180]	; (8002d8c <prvAddNewTaskToReadyList+0x120>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	4a2c      	ldr	r2, [pc, #176]	; (8002d8c <prvAddNewTaskToReadyList+0x120>)
 8002cdc:	6013      	str	r3, [r2, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ce2:	492b      	ldr	r1, [pc, #172]	; (8002d90 <prvAddNewTaskToReadyList+0x124>)
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4413      	add	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	440b      	add	r3, r1
 8002cee:	3304      	adds	r3, #4
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	609a      	str	r2, [r3, #8]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	689a      	ldr	r2, [r3, #8]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	60da      	str	r2, [r3, #12]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	3204      	adds	r2, #4
 8002d0a:	605a      	str	r2, [r3, #4]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	1d1a      	adds	r2, r3, #4
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	609a      	str	r2, [r3, #8]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d18:	4613      	mov	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	4413      	add	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4a1b      	ldr	r2, [pc, #108]	; (8002d90 <prvAddNewTaskToReadyList+0x124>)
 8002d22:	441a      	add	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	615a      	str	r2, [r3, #20]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d2c:	4918      	ldr	r1, [pc, #96]	; (8002d90 <prvAddNewTaskToReadyList+0x124>)
 8002d2e:	4613      	mov	r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	4413      	add	r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	440b      	add	r3, r1
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	1c59      	adds	r1, r3, #1
 8002d3c:	4814      	ldr	r0, [pc, #80]	; (8002d90 <prvAddNewTaskToReadyList+0x124>)
 8002d3e:	4613      	mov	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	4413      	add	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4403      	add	r3, r0
 8002d48:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002d4a:	f001 fd2d 	bl	80047a8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002d4e:	4b0d      	ldr	r3, [pc, #52]	; (8002d84 <prvAddNewTaskToReadyList+0x118>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00e      	beq.n	8002d74 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002d56:	4b0a      	ldr	r3, [pc, #40]	; (8002d80 <prvAddNewTaskToReadyList+0x114>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d207      	bcs.n	8002d74 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002d64:	4b0b      	ldr	r3, [pc, #44]	; (8002d94 <prvAddNewTaskToReadyList+0x128>)
 8002d66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d6a:	601a      	str	r2, [r3, #0]
 8002d6c:	f3bf 8f4f 	dsb	sy
 8002d70:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002d74:	bf00      	nop
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	200001a0 	.word	0x200001a0
 8002d80:	200000c8 	.word	0x200000c8
 8002d84:	200001ac 	.word	0x200001ac
 8002d88:	200001bc 	.word	0x200001bc
 8002d8c:	200001a8 	.word	0x200001a8
 8002d90:	200000cc 	.word	0x200000cc
 8002d94:	e000ed04 	.word	0xe000ed04

08002d98 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002da0:	2300      	movs	r3, #0
 8002da2:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d017      	beq.n	8002dda <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002daa:	4b13      	ldr	r3, [pc, #76]	; (8002df8 <vTaskDelay+0x60>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00a      	beq.n	8002dc8 <vTaskDelay+0x30>
        __asm volatile
 8002db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db6:	f383 8811 	msr	BASEPRI, r3
 8002dba:	f3bf 8f6f 	isb	sy
 8002dbe:	f3bf 8f4f 	dsb	sy
 8002dc2:	60bb      	str	r3, [r7, #8]
    }
 8002dc4:	bf00      	nop
 8002dc6:	e7fe      	b.n	8002dc6 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002dc8:	f000 f958 	bl	800307c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002dcc:	2100      	movs	r1, #0
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f001 f886 	bl	8003ee0 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002dd4:	f000 f960 	bl	8003098 <xTaskResumeAll>
 8002dd8:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d107      	bne.n	8002df0 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8002de0:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <vTaskDelay+0x64>)
 8002de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	f3bf 8f4f 	dsb	sy
 8002dec:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002df0:	bf00      	nop
 8002df2:	3710      	adds	r7, #16
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	200001c8 	.word	0x200001c8
 8002dfc:	e000ed04 	.word	0xe000ed04

08002e00 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

    UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
    {
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
        TCB_t const * pxTCB;
        UBaseType_t uxReturn;

        taskENTER_CRITICAL();
 8002e08:	f001 fc9e 	bl	8004748 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the task
             * that called uxTaskPriorityGet() that is being queried. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d102      	bne.n	8002e18 <uxTaskPriorityGet+0x18>
 8002e12:	4b07      	ldr	r3, [pc, #28]	; (8002e30 <uxTaskPriorityGet+0x30>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	e000      	b.n	8002e1a <uxTaskPriorityGet+0x1a>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	60fb      	str	r3, [r7, #12]
            uxReturn = pxTCB->uxPriority;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e20:	60bb      	str	r3, [r7, #8]
        }
        taskEXIT_CRITICAL();
 8002e22:	f001 fcc1 	bl	80047a8 <vPortExitCritical>

        return uxReturn;
 8002e26:	68bb      	ldr	r3, [r7, #8]
    }
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3710      	adds	r7, #16
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	200000c8 	.word	0x200000c8

08002e34 <vTaskPrioritySet>:

#if ( INCLUDE_vTaskPrioritySet == 1 )

    void vTaskPrioritySet( TaskHandle_t xTask,
                           UBaseType_t uxNewPriority )
    {
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b088      	sub	sp, #32
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
        BaseType_t xYieldRequired = pdFALSE;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61fb      	str	r3, [r7, #28]

        configASSERT( uxNewPriority < configMAX_PRIORITIES );
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	2b04      	cmp	r3, #4
 8002e46:	d90a      	bls.n	8002e5e <vTaskPrioritySet+0x2a>
        __asm volatile
 8002e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e4c:	f383 8811 	msr	BASEPRI, r3
 8002e50:	f3bf 8f6f 	isb	sy
 8002e54:	f3bf 8f4f 	dsb	sy
 8002e58:	60bb      	str	r3, [r7, #8]
    }
 8002e5a:	bf00      	nop
 8002e5c:	e7fe      	b.n	8002e5c <vTaskPrioritySet+0x28>

        /* Ensure the new priority is valid. */
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	2b04      	cmp	r3, #4
 8002e62:	d901      	bls.n	8002e68 <vTaskPrioritySet+0x34>
        {
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002e64:	2304      	movs	r3, #4
 8002e66:	603b      	str	r3, [r7, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8002e68:	f001 fc6e 	bl	8004748 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being changed. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d102      	bne.n	8002e78 <vTaskPrioritySet+0x44>
 8002e72:	4b55      	ldr	r3, [pc, #340]	; (8002fc8 <vTaskPrioritySet+0x194>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	e000      	b.n	8002e7a <vTaskPrioritySet+0x46>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	61bb      	str	r3, [r7, #24]

            traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

            #if ( configUSE_MUTEXES == 1 )
            {
                uxCurrentBasePriority = pxTCB->uxBasePriority;
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e80:	617b      	str	r3, [r7, #20]
            {
                uxCurrentBasePriority = pxTCB->uxPriority;
            }
            #endif

            if( uxCurrentBasePriority != uxNewPriority )
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	f000 8098 	beq.w	8002fbc <vTaskPrioritySet+0x188>
            {
                /* The priority change may have readied a task of higher
                 * priority than the calling task. */
                if( uxNewPriority > uxCurrentBasePriority )
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d90d      	bls.n	8002eb0 <vTaskPrioritySet+0x7c>
                {
                    if( pxTCB != pxCurrentTCB )
 8002e94:	4b4c      	ldr	r3, [pc, #304]	; (8002fc8 <vTaskPrioritySet+0x194>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d00f      	beq.n	8002ebe <vTaskPrioritySet+0x8a>
                    {
                        /* The priority of a task other than the currently
                         * running task is being raised.  Is the priority being
                         * raised above that of the running task? */
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8002e9e:	4b4a      	ldr	r3, [pc, #296]	; (8002fc8 <vTaskPrioritySet+0x194>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d309      	bcc.n	8002ebe <vTaskPrioritySet+0x8a>
                        {
                            xYieldRequired = pdTRUE;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	61fb      	str	r3, [r7, #28]
 8002eae:	e006      	b.n	8002ebe <vTaskPrioritySet+0x8a>
                        /* The priority of the running task is being raised,
                         * but the running task must already be the highest
                         * priority task able to run so no yield is required. */
                    }
                }
                else if( pxTCB == pxCurrentTCB )
 8002eb0:	4b45      	ldr	r3, [pc, #276]	; (8002fc8 <vTaskPrioritySet+0x194>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d101      	bne.n	8002ebe <vTaskPrioritySet+0x8a>
                {
                    /* Setting the priority of the running task down means
                     * there may now be another task of higher priority that
                     * is ready to execute. */
                    xYieldRequired = pdTRUE;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	61fb      	str	r3, [r7, #28]
                }

                /* Remember the ready list the task might be referenced from
                 * before its uxPriority member is changed so the
                 * taskRESET_READY_PRIORITY() macro can function correctly. */
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec2:	613b      	str	r3, [r7, #16]

                #if ( configUSE_MUTEXES == 1 )
                {
                    /* Only change the priority being used if the task is not
                     * currently using an inherited priority. */
                    if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d102      	bne.n	8002ed6 <vTaskPrioritySet+0xa2>
                    {
                        pxTCB->uxPriority = uxNewPriority;
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	62da      	str	r2, [r3, #44]	; 0x2c
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The base priority gets set whatever. */
                    pxTCB->uxBasePriority = uxNewPriority;
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	651a      	str	r2, [r3, #80]	; 0x50
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                /* Only reset the event list item value if the value is not
                 * being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	db04      	blt.n	8002eee <vTaskPrioritySet+0xba>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	f1c3 0205 	rsb	r2, r3, #5
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	619a      	str	r2, [r3, #24]

                /* If the task is in the blocked or suspended list we need do
                 * nothing more than change its priority variable. However, if
                 * the task is in a ready list it needs to be removed and placed
                 * in the list appropriate to its new priority. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	6959      	ldr	r1, [r3, #20]
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4a33      	ldr	r2, [pc, #204]	; (8002fcc <vTaskPrioritySet+0x198>)
 8002efe:	4413      	add	r3, r2
 8002f00:	4299      	cmp	r1, r3
 8002f02:	d150      	bne.n	8002fa6 <vTaskPrioritySet+0x172>
                {
                    /* The task is currently in its ready list - remove before
                     * adding it to its new ready list.  As we are in a critical
                     * section we can do this even if the scheduler is suspended. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	3304      	adds	r3, #4
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7fe fff7 	bl	8001efc <uxListRemove>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d109      	bne.n	8002f28 <vTaskPrioritySet+0xf4>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8002f14:	2201      	movs	r2, #1
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1c:	43da      	mvns	r2, r3
 8002f1e:	4b2c      	ldr	r3, [pc, #176]	; (8002fd0 <vTaskPrioritySet+0x19c>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4013      	ands	r3, r2
 8002f24:	4a2a      	ldr	r2, [pc, #168]	; (8002fd0 <vTaskPrioritySet+0x19c>)
 8002f26:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    prvAddTaskToReadyList( pxTCB );
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	409a      	lsls	r2, r3
 8002f30:	4b27      	ldr	r3, [pc, #156]	; (8002fd0 <vTaskPrioritySet+0x19c>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	4a26      	ldr	r2, [pc, #152]	; (8002fd0 <vTaskPrioritySet+0x19c>)
 8002f38:	6013      	str	r3, [r2, #0]
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f3e:	4923      	ldr	r1, [pc, #140]	; (8002fcc <vTaskPrioritySet+0x198>)
 8002f40:	4613      	mov	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4413      	add	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	3304      	adds	r3, #4
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	60fb      	str	r3, [r7, #12]
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	609a      	str	r2, [r3, #8]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	689a      	ldr	r2, [r3, #8]
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	60da      	str	r2, [r3, #12]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	3204      	adds	r2, #4
 8002f66:	605a      	str	r2, [r3, #4]
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	1d1a      	adds	r2, r3, #4
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	609a      	str	r2, [r3, #8]
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f74:	4613      	mov	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	4a13      	ldr	r2, [pc, #76]	; (8002fcc <vTaskPrioritySet+0x198>)
 8002f7e:	441a      	add	r2, r3
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	615a      	str	r2, [r3, #20]
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f88:	4910      	ldr	r1, [pc, #64]	; (8002fcc <vTaskPrioritySet+0x198>)
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4413      	add	r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	440b      	add	r3, r1
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	1c59      	adds	r1, r3, #1
 8002f98:	480c      	ldr	r0, [pc, #48]	; (8002fcc <vTaskPrioritySet+0x198>)
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	4413      	add	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4403      	add	r3, r0
 8002fa4:	6019      	str	r1, [r3, #0]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xYieldRequired != pdFALSE )
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d007      	beq.n	8002fbc <vTaskPrioritySet+0x188>
                {
                    taskYIELD_IF_USING_PREEMPTION();
 8002fac:	4b09      	ldr	r3, [pc, #36]	; (8002fd4 <vTaskPrioritySet+0x1a0>)
 8002fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	f3bf 8f4f 	dsb	sy
 8002fb8:	f3bf 8f6f 	isb	sy
                /* Remove compiler warning about unused variables when the port
                 * optimised task selection is not being used. */
                ( void ) uxPriorityUsedOnEntry;
            }
        }
        taskEXIT_CRITICAL();
 8002fbc:	f001 fbf4 	bl	80047a8 <vPortExitCritical>
    }
 8002fc0:	bf00      	nop
 8002fc2:	3720      	adds	r7, #32
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	200000c8 	.word	0x200000c8
 8002fcc:	200000cc 	.word	0x200000cc
 8002fd0:	200001a8 	.word	0x200001a8
 8002fd4:	e000ed04 	.word	0xe000ed04

08002fd8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002fde:	4b20      	ldr	r3, [pc, #128]	; (8003060 <vTaskStartScheduler+0x88>)
 8002fe0:	9301      	str	r3, [sp, #4]
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	9300      	str	r3, [sp, #0]
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	2282      	movs	r2, #130	; 0x82
 8002fea:	491e      	ldr	r1, [pc, #120]	; (8003064 <vTaskStartScheduler+0x8c>)
 8002fec:	481e      	ldr	r0, [pc, #120]	; (8003068 <vTaskStartScheduler+0x90>)
 8002fee:	f7ff fd69 	bl	8002ac4 <xTaskCreate>
 8002ff2:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d102      	bne.n	8003000 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002ffa:	f000 fff1 	bl	8003fe0 <xTimerCreateTimerTask>
 8002ffe:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d116      	bne.n	8003034 <vTaskStartScheduler+0x5c>
        __asm volatile
 8003006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800300a:	f383 8811 	msr	BASEPRI, r3
 800300e:	f3bf 8f6f 	isb	sy
 8003012:	f3bf 8f4f 	dsb	sy
 8003016:	60bb      	str	r3, [r7, #8]
    }
 8003018:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800301a:	4b14      	ldr	r3, [pc, #80]	; (800306c <vTaskStartScheduler+0x94>)
 800301c:	f04f 32ff 	mov.w	r2, #4294967295
 8003020:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003022:	4b13      	ldr	r3, [pc, #76]	; (8003070 <vTaskStartScheduler+0x98>)
 8003024:	2201      	movs	r2, #1
 8003026:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003028:	4b12      	ldr	r3, [pc, #72]	; (8003074 <vTaskStartScheduler+0x9c>)
 800302a:	2200      	movs	r2, #0
 800302c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800302e:	f001 fae9 	bl	8004604 <xPortStartScheduler>
 8003032:	e00e      	b.n	8003052 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800303a:	d10a      	bne.n	8003052 <vTaskStartScheduler+0x7a>
        __asm volatile
 800303c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003040:	f383 8811 	msr	BASEPRI, r3
 8003044:	f3bf 8f6f 	isb	sy
 8003048:	f3bf 8f4f 	dsb	sy
 800304c:	607b      	str	r3, [r7, #4]
    }
 800304e:	bf00      	nop
 8003050:	e7fe      	b.n	8003050 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003052:	4b09      	ldr	r3, [pc, #36]	; (8003078 <vTaskStartScheduler+0xa0>)
 8003054:	681b      	ldr	r3, [r3, #0]
}
 8003056:	bf00      	nop
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	200001c4 	.word	0x200001c4
 8003064:	08004d48 	.word	0x08004d48
 8003068:	08003925 	.word	0x08003925
 800306c:	200001c0 	.word	0x200001c0
 8003070:	200001ac 	.word	0x200001ac
 8003074:	200001a4 	.word	0x200001a4
 8003078:	2000000c 	.word	0x2000000c

0800307c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003080:	4b04      	ldr	r3, [pc, #16]	; (8003094 <vTaskSuspendAll+0x18>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	3301      	adds	r3, #1
 8003086:	4a03      	ldr	r2, [pc, #12]	; (8003094 <vTaskSuspendAll+0x18>)
 8003088:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800308a:	bf00      	nop
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	200001c8 	.word	0x200001c8

08003098 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b088      	sub	sp, #32
 800309c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800309e:	2300      	movs	r3, #0
 80030a0:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80030a2:	2300      	movs	r3, #0
 80030a4:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80030a6:	4b71      	ldr	r3, [pc, #452]	; (800326c <xTaskResumeAll+0x1d4>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d10a      	bne.n	80030c4 <xTaskResumeAll+0x2c>
        __asm volatile
 80030ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b2:	f383 8811 	msr	BASEPRI, r3
 80030b6:	f3bf 8f6f 	isb	sy
 80030ba:	f3bf 8f4f 	dsb	sy
 80030be:	607b      	str	r3, [r7, #4]
    }
 80030c0:	bf00      	nop
 80030c2:	e7fe      	b.n	80030c2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80030c4:	f001 fb40 	bl	8004748 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80030c8:	4b68      	ldr	r3, [pc, #416]	; (800326c <xTaskResumeAll+0x1d4>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	3b01      	subs	r3, #1
 80030ce:	4a67      	ldr	r2, [pc, #412]	; (800326c <xTaskResumeAll+0x1d4>)
 80030d0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030d2:	4b66      	ldr	r3, [pc, #408]	; (800326c <xTaskResumeAll+0x1d4>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f040 80c0 	bne.w	800325c <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80030dc:	4b64      	ldr	r3, [pc, #400]	; (8003270 <xTaskResumeAll+0x1d8>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f000 80bb 	beq.w	800325c <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030e6:	e08a      	b.n	80031fe <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030e8:	4b62      	ldr	r3, [pc, #392]	; (8003274 <xTaskResumeAll+0x1dc>)
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f4:	613b      	str	r3, [r7, #16]
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	69db      	ldr	r3, [r3, #28]
 80030fa:	69fa      	ldr	r2, [r7, #28]
 80030fc:	6a12      	ldr	r2, [r2, #32]
 80030fe:	609a      	str	r2, [r3, #8]
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	6a1b      	ldr	r3, [r3, #32]
 8003104:	69fa      	ldr	r2, [r7, #28]
 8003106:	69d2      	ldr	r2, [r2, #28]
 8003108:	605a      	str	r2, [r3, #4]
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	685a      	ldr	r2, [r3, #4]
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	3318      	adds	r3, #24
 8003112:	429a      	cmp	r2, r3
 8003114:	d103      	bne.n	800311e <xTaskResumeAll+0x86>
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	6a1a      	ldr	r2, [r3, #32]
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	605a      	str	r2, [r3, #4]
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	2200      	movs	r2, #0
 8003122:	629a      	str	r2, [r3, #40]	; 0x28
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	1e5a      	subs	r2, r3, #1
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	60fb      	str	r3, [r7, #12]
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	69fa      	ldr	r2, [r7, #28]
 800313a:	68d2      	ldr	r2, [r2, #12]
 800313c:	609a      	str	r2, [r3, #8]
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	69fa      	ldr	r2, [r7, #28]
 8003144:	6892      	ldr	r2, [r2, #8]
 8003146:	605a      	str	r2, [r3, #4]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	3304      	adds	r3, #4
 8003150:	429a      	cmp	r2, r3
 8003152:	d103      	bne.n	800315c <xTaskResumeAll+0xc4>
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	68da      	ldr	r2, [r3, #12]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	605a      	str	r2, [r3, #4]
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	2200      	movs	r2, #0
 8003160:	615a      	str	r2, [r3, #20]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	1e5a      	subs	r2, r3, #1
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003170:	2201      	movs	r2, #1
 8003172:	409a      	lsls	r2, r3
 8003174:	4b40      	ldr	r3, [pc, #256]	; (8003278 <xTaskResumeAll+0x1e0>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4313      	orrs	r3, r2
 800317a:	4a3f      	ldr	r2, [pc, #252]	; (8003278 <xTaskResumeAll+0x1e0>)
 800317c:	6013      	str	r3, [r2, #0]
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003182:	493e      	ldr	r1, [pc, #248]	; (800327c <xTaskResumeAll+0x1e4>)
 8003184:	4613      	mov	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4413      	add	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	440b      	add	r3, r1
 800318e:	3304      	adds	r3, #4
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	60bb      	str	r3, [r7, #8]
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	68ba      	ldr	r2, [r7, #8]
 8003198:	609a      	str	r2, [r3, #8]
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	689a      	ldr	r2, [r3, #8]
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	60da      	str	r2, [r3, #12]
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	69fa      	ldr	r2, [r7, #28]
 80031a8:	3204      	adds	r2, #4
 80031aa:	605a      	str	r2, [r3, #4]
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	1d1a      	adds	r2, r3, #4
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	609a      	str	r2, [r3, #8]
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031b8:	4613      	mov	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4413      	add	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4a2e      	ldr	r2, [pc, #184]	; (800327c <xTaskResumeAll+0x1e4>)
 80031c2:	441a      	add	r2, r3
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	615a      	str	r2, [r3, #20]
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031cc:	492b      	ldr	r1, [pc, #172]	; (800327c <xTaskResumeAll+0x1e4>)
 80031ce:	4613      	mov	r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	4413      	add	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	440b      	add	r3, r1
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	1c59      	adds	r1, r3, #1
 80031dc:	4827      	ldr	r0, [pc, #156]	; (800327c <xTaskResumeAll+0x1e4>)
 80031de:	4613      	mov	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4403      	add	r3, r0
 80031e8:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ee:	4b24      	ldr	r3, [pc, #144]	; (8003280 <xTaskResumeAll+0x1e8>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d302      	bcc.n	80031fe <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 80031f8:	4b22      	ldr	r3, [pc, #136]	; (8003284 <xTaskResumeAll+0x1ec>)
 80031fa:	2201      	movs	r2, #1
 80031fc:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031fe:	4b1d      	ldr	r3, [pc, #116]	; (8003274 <xTaskResumeAll+0x1dc>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	f47f af70 	bne.w	80030e8 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800320e:	f000 fc1f 	bl	8003a50 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003212:	4b1d      	ldr	r3, [pc, #116]	; (8003288 <xTaskResumeAll+0x1f0>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d010      	beq.n	8003240 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800321e:	f000 f847 	bl	80032b0 <xTaskIncrementTick>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d002      	beq.n	800322e <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8003228:	4b16      	ldr	r3, [pc, #88]	; (8003284 <xTaskResumeAll+0x1ec>)
 800322a:	2201      	movs	r2, #1
 800322c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	3b01      	subs	r3, #1
 8003232:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1f1      	bne.n	800321e <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 800323a:	4b13      	ldr	r3, [pc, #76]	; (8003288 <xTaskResumeAll+0x1f0>)
 800323c:	2200      	movs	r2, #0
 800323e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003240:	4b10      	ldr	r3, [pc, #64]	; (8003284 <xTaskResumeAll+0x1ec>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d009      	beq.n	800325c <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8003248:	2301      	movs	r3, #1
 800324a:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800324c:	4b0f      	ldr	r3, [pc, #60]	; (800328c <xTaskResumeAll+0x1f4>)
 800324e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003252:	601a      	str	r2, [r3, #0]
 8003254:	f3bf 8f4f 	dsb	sy
 8003258:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800325c:	f001 faa4 	bl	80047a8 <vPortExitCritical>

    return xAlreadyYielded;
 8003260:	69bb      	ldr	r3, [r7, #24]
}
 8003262:	4618      	mov	r0, r3
 8003264:	3720      	adds	r7, #32
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	200001c8 	.word	0x200001c8
 8003270:	200001a0 	.word	0x200001a0
 8003274:	20000160 	.word	0x20000160
 8003278:	200001a8 	.word	0x200001a8
 800327c:	200000cc 	.word	0x200000cc
 8003280:	200000c8 	.word	0x200000c8
 8003284:	200001b4 	.word	0x200001b4
 8003288:	200001b0 	.word	0x200001b0
 800328c:	e000ed04 	.word	0xe000ed04

08003290 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003296:	4b05      	ldr	r3, [pc, #20]	; (80032ac <xTaskGetTickCount+0x1c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800329c:	687b      	ldr	r3, [r7, #4]
}
 800329e:	4618      	mov	r0, r3
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	200001a4 	.word	0x200001a4

080032b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08a      	sub	sp, #40	; 0x28
 80032b4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80032b6:	2300      	movs	r3, #0
 80032b8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032ba:	4b7d      	ldr	r3, [pc, #500]	; (80034b0 <xTaskIncrementTick+0x200>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f040 80ec 	bne.w	800349c <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80032c4:	4b7b      	ldr	r3, [pc, #492]	; (80034b4 <xTaskIncrementTick+0x204>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	3301      	adds	r3, #1
 80032ca:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80032cc:	4a79      	ldr	r2, [pc, #484]	; (80034b4 <xTaskIncrementTick+0x204>)
 80032ce:	6a3b      	ldr	r3, [r7, #32]
 80032d0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80032d2:	6a3b      	ldr	r3, [r7, #32]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d120      	bne.n	800331a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80032d8:	4b77      	ldr	r3, [pc, #476]	; (80034b8 <xTaskIncrementTick+0x208>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00a      	beq.n	80032f8 <xTaskIncrementTick+0x48>
        __asm volatile
 80032e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e6:	f383 8811 	msr	BASEPRI, r3
 80032ea:	f3bf 8f6f 	isb	sy
 80032ee:	f3bf 8f4f 	dsb	sy
 80032f2:	607b      	str	r3, [r7, #4]
    }
 80032f4:	bf00      	nop
 80032f6:	e7fe      	b.n	80032f6 <xTaskIncrementTick+0x46>
 80032f8:	4b6f      	ldr	r3, [pc, #444]	; (80034b8 <xTaskIncrementTick+0x208>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	61fb      	str	r3, [r7, #28]
 80032fe:	4b6f      	ldr	r3, [pc, #444]	; (80034bc <xTaskIncrementTick+0x20c>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a6d      	ldr	r2, [pc, #436]	; (80034b8 <xTaskIncrementTick+0x208>)
 8003304:	6013      	str	r3, [r2, #0]
 8003306:	4a6d      	ldr	r2, [pc, #436]	; (80034bc <xTaskIncrementTick+0x20c>)
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	6013      	str	r3, [r2, #0]
 800330c:	4b6c      	ldr	r3, [pc, #432]	; (80034c0 <xTaskIncrementTick+0x210>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	3301      	adds	r3, #1
 8003312:	4a6b      	ldr	r2, [pc, #428]	; (80034c0 <xTaskIncrementTick+0x210>)
 8003314:	6013      	str	r3, [r2, #0]
 8003316:	f000 fb9b 	bl	8003a50 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800331a:	4b6a      	ldr	r3, [pc, #424]	; (80034c4 <xTaskIncrementTick+0x214>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6a3a      	ldr	r2, [r7, #32]
 8003320:	429a      	cmp	r2, r3
 8003322:	f0c0 80a6 	bcc.w	8003472 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003326:	4b64      	ldr	r3, [pc, #400]	; (80034b8 <xTaskIncrementTick+0x208>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d104      	bne.n	800333a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003330:	4b64      	ldr	r3, [pc, #400]	; (80034c4 <xTaskIncrementTick+0x214>)
 8003332:	f04f 32ff 	mov.w	r2, #4294967295
 8003336:	601a      	str	r2, [r3, #0]
                    break;
 8003338:	e09b      	b.n	8003472 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800333a:	4b5f      	ldr	r3, [pc, #380]	; (80034b8 <xTaskIncrementTick+0x208>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800334a:	6a3a      	ldr	r2, [r7, #32]
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	429a      	cmp	r2, r3
 8003350:	d203      	bcs.n	800335a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003352:	4a5c      	ldr	r2, [pc, #368]	; (80034c4 <xTaskIncrementTick+0x214>)
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003358:	e08b      	b.n	8003472 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	613b      	str	r3, [r7, #16]
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	68d2      	ldr	r2, [r2, #12]
 8003368:	609a      	str	r2, [r3, #8]
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	6892      	ldr	r2, [r2, #8]
 8003372:	605a      	str	r2, [r3, #4]
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	685a      	ldr	r2, [r3, #4]
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	3304      	adds	r3, #4
 800337c:	429a      	cmp	r2, r3
 800337e:	d103      	bne.n	8003388 <xTaskIncrementTick+0xd8>
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	68da      	ldr	r2, [r3, #12]
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	605a      	str	r2, [r3, #4]
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	2200      	movs	r2, #0
 800338c:	615a      	str	r2, [r3, #20]
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	1e5a      	subs	r2, r3, #1
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339c:	2b00      	cmp	r3, #0
 800339e:	d01e      	beq.n	80033de <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a4:	60fb      	str	r3, [r7, #12]
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	6a12      	ldr	r2, [r2, #32]
 80033ae:	609a      	str	r2, [r3, #8]
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	69d2      	ldr	r2, [r2, #28]
 80033b8:	605a      	str	r2, [r3, #4]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	685a      	ldr	r2, [r3, #4]
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	3318      	adds	r3, #24
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d103      	bne.n	80033ce <xTaskIncrementTick+0x11e>
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	6a1a      	ldr	r2, [r3, #32]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	605a      	str	r2, [r3, #4]
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	2200      	movs	r2, #0
 80033d2:	629a      	str	r2, [r3, #40]	; 0x28
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	1e5a      	subs	r2, r3, #1
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e2:	2201      	movs	r2, #1
 80033e4:	409a      	lsls	r2, r3
 80033e6:	4b38      	ldr	r3, [pc, #224]	; (80034c8 <xTaskIncrementTick+0x218>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	4a36      	ldr	r2, [pc, #216]	; (80034c8 <xTaskIncrementTick+0x218>)
 80033ee:	6013      	str	r3, [r2, #0]
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033f4:	4935      	ldr	r1, [pc, #212]	; (80034cc <xTaskIncrementTick+0x21c>)
 80033f6:	4613      	mov	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4413      	add	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	440b      	add	r3, r1
 8003400:	3304      	adds	r3, #4
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	60bb      	str	r3, [r7, #8]
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	68ba      	ldr	r2, [r7, #8]
 800340a:	609a      	str	r2, [r3, #8]
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	60da      	str	r2, [r3, #12]
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	3204      	adds	r2, #4
 800341c:	605a      	str	r2, [r3, #4]
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	1d1a      	adds	r2, r3, #4
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	609a      	str	r2, [r3, #8]
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800342a:	4613      	mov	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	4413      	add	r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4a26      	ldr	r2, [pc, #152]	; (80034cc <xTaskIncrementTick+0x21c>)
 8003434:	441a      	add	r2, r3
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	615a      	str	r2, [r3, #20]
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800343e:	4923      	ldr	r1, [pc, #140]	; (80034cc <xTaskIncrementTick+0x21c>)
 8003440:	4613      	mov	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4413      	add	r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	440b      	add	r3, r1
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	1c59      	adds	r1, r3, #1
 800344e:	481f      	ldr	r0, [pc, #124]	; (80034cc <xTaskIncrementTick+0x21c>)
 8003450:	4613      	mov	r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4413      	add	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4403      	add	r3, r0
 800345a:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003460:	4b1b      	ldr	r3, [pc, #108]	; (80034d0 <xTaskIncrementTick+0x220>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003466:	429a      	cmp	r2, r3
 8003468:	f67f af5d 	bls.w	8003326 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 800346c:	2301      	movs	r3, #1
 800346e:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003470:	e759      	b.n	8003326 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003472:	4b17      	ldr	r3, [pc, #92]	; (80034d0 <xTaskIncrementTick+0x220>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003478:	4914      	ldr	r1, [pc, #80]	; (80034cc <xTaskIncrementTick+0x21c>)
 800347a:	4613      	mov	r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	4413      	add	r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	440b      	add	r3, r1
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d901      	bls.n	800348e <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 800348a:	2301      	movs	r3, #1
 800348c:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800348e:	4b11      	ldr	r3, [pc, #68]	; (80034d4 <xTaskIncrementTick+0x224>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d007      	beq.n	80034a6 <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8003496:	2301      	movs	r3, #1
 8003498:	627b      	str	r3, [r7, #36]	; 0x24
 800349a:	e004      	b.n	80034a6 <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800349c:	4b0e      	ldr	r3, [pc, #56]	; (80034d8 <xTaskIncrementTick+0x228>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	3301      	adds	r3, #1
 80034a2:	4a0d      	ldr	r2, [pc, #52]	; (80034d8 <xTaskIncrementTick+0x228>)
 80034a4:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80034a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3728      	adds	r7, #40	; 0x28
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	200001c8 	.word	0x200001c8
 80034b4:	200001a4 	.word	0x200001a4
 80034b8:	20000158 	.word	0x20000158
 80034bc:	2000015c 	.word	0x2000015c
 80034c0:	200001b8 	.word	0x200001b8
 80034c4:	200001c0 	.word	0x200001c0
 80034c8:	200001a8 	.word	0x200001a8
 80034cc:	200000cc 	.word	0x200000cc
 80034d0:	200000c8 	.word	0x200000c8
 80034d4:	200001b4 	.word	0x200001b4
 80034d8:	200001b0 	.word	0x200001b0

080034dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80034dc:	b480      	push	{r7}
 80034de:	b087      	sub	sp, #28
 80034e0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80034e2:	4b27      	ldr	r3, [pc, #156]	; (8003580 <vTaskSwitchContext+0xa4>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d003      	beq.n	80034f2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80034ea:	4b26      	ldr	r3, [pc, #152]	; (8003584 <vTaskSwitchContext+0xa8>)
 80034ec:	2201      	movs	r2, #1
 80034ee:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80034f0:	e03f      	b.n	8003572 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80034f2:	4b24      	ldr	r3, [pc, #144]	; (8003584 <vTaskSwitchContext+0xa8>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034f8:	4b23      	ldr	r3, [pc, #140]	; (8003588 <vTaskSwitchContext+0xac>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	fab3 f383 	clz	r3, r3
 8003504:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003506:	7afb      	ldrb	r3, [r7, #11]
 8003508:	f1c3 031f 	rsb	r3, r3, #31
 800350c:	617b      	str	r3, [r7, #20]
 800350e:	491f      	ldr	r1, [pc, #124]	; (800358c <vTaskSwitchContext+0xb0>)
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	4613      	mov	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	4413      	add	r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	440b      	add	r3, r1
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10a      	bne.n	8003538 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003526:	f383 8811 	msr	BASEPRI, r3
 800352a:	f3bf 8f6f 	isb	sy
 800352e:	f3bf 8f4f 	dsb	sy
 8003532:	607b      	str	r3, [r7, #4]
    }
 8003534:	bf00      	nop
 8003536:	e7fe      	b.n	8003536 <vTaskSwitchContext+0x5a>
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	4613      	mov	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4413      	add	r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	4a12      	ldr	r2, [pc, #72]	; (800358c <vTaskSwitchContext+0xb0>)
 8003544:	4413      	add	r3, r2
 8003546:	613b      	str	r3, [r7, #16]
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	685a      	ldr	r2, [r3, #4]
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	605a      	str	r2, [r3, #4]
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	685a      	ldr	r2, [r3, #4]
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	3308      	adds	r3, #8
 800355a:	429a      	cmp	r2, r3
 800355c:	d104      	bne.n	8003568 <vTaskSwitchContext+0x8c>
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	605a      	str	r2, [r3, #4]
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	4a08      	ldr	r2, [pc, #32]	; (8003590 <vTaskSwitchContext+0xb4>)
 8003570:	6013      	str	r3, [r2, #0]
}
 8003572:	bf00      	nop
 8003574:	371c      	adds	r7, #28
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	200001c8 	.word	0x200001c8
 8003584:	200001b4 	.word	0x200001b4
 8003588:	200001a8 	.word	0x200001a8
 800358c:	200000cc 	.word	0x200000cc
 8003590:	200000c8 	.word	0x200000c8

08003594 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10a      	bne.n	80035ba <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80035a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a8:	f383 8811 	msr	BASEPRI, r3
 80035ac:	f3bf 8f6f 	isb	sy
 80035b0:	f3bf 8f4f 	dsb	sy
 80035b4:	60fb      	str	r3, [r7, #12]
    }
 80035b6:	bf00      	nop
 80035b8:	e7fe      	b.n	80035b8 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80035ba:	4b07      	ldr	r3, [pc, #28]	; (80035d8 <vTaskPlaceOnEventList+0x44>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	3318      	adds	r3, #24
 80035c0:	4619      	mov	r1, r3
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7fe fc61 	bl	8001e8a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80035c8:	2101      	movs	r1, #1
 80035ca:	6838      	ldr	r0, [r7, #0]
 80035cc:	f000 fc88 	bl	8003ee0 <prvAddCurrentTaskToDelayedList>
}
 80035d0:	bf00      	nop
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	200000c8 	.word	0x200000c8

080035dc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10a      	bne.n	8003604 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80035ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f2:	f383 8811 	msr	BASEPRI, r3
 80035f6:	f3bf 8f6f 	isb	sy
 80035fa:	f3bf 8f4f 	dsb	sy
 80035fe:	613b      	str	r3, [r7, #16]
    }
 8003600:	bf00      	nop
 8003602:	e7fe      	b.n	8003602 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	617b      	str	r3, [r7, #20]
 800360a:	4b16      	ldr	r3, [pc, #88]	; (8003664 <vTaskPlaceOnEventListRestricted+0x88>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	697a      	ldr	r2, [r7, #20]
 8003610:	61da      	str	r2, [r3, #28]
 8003612:	4b14      	ldr	r3, [pc, #80]	; (8003664 <vTaskPlaceOnEventListRestricted+0x88>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	6892      	ldr	r2, [r2, #8]
 800361a:	621a      	str	r2, [r3, #32]
 800361c:	4b11      	ldr	r3, [pc, #68]	; (8003664 <vTaskPlaceOnEventListRestricted+0x88>)
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	3218      	adds	r2, #24
 8003626:	605a      	str	r2, [r3, #4]
 8003628:	4b0e      	ldr	r3, [pc, #56]	; (8003664 <vTaskPlaceOnEventListRestricted+0x88>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f103 0218 	add.w	r2, r3, #24
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	609a      	str	r2, [r3, #8]
 8003634:	4b0b      	ldr	r3, [pc, #44]	; (8003664 <vTaskPlaceOnEventListRestricted+0x88>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	629a      	str	r2, [r3, #40]	; 0x28
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	1c5a      	adds	r2, r3, #1
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d002      	beq.n	8003652 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 800364c:	f04f 33ff 	mov.w	r3, #4294967295
 8003650:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003652:	6879      	ldr	r1, [r7, #4]
 8003654:	68b8      	ldr	r0, [r7, #8]
 8003656:	f000 fc43 	bl	8003ee0 <prvAddCurrentTaskToDelayedList>
    }
 800365a:	bf00      	nop
 800365c:	3718      	adds	r7, #24
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	200000c8 	.word	0x200000c8

08003668 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003668:	b480      	push	{r7}
 800366a:	b08b      	sub	sp, #44	; 0x2c
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003678:	6a3b      	ldr	r3, [r7, #32]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10a      	bne.n	8003694 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800367e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003682:	f383 8811 	msr	BASEPRI, r3
 8003686:	f3bf 8f6f 	isb	sy
 800368a:	f3bf 8f4f 	dsb	sy
 800368e:	60fb      	str	r3, [r7, #12]
    }
 8003690:	bf00      	nop
 8003692:	e7fe      	b.n	8003692 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003694:	6a3b      	ldr	r3, [r7, #32]
 8003696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003698:	61fb      	str	r3, [r7, #28]
 800369a:	6a3b      	ldr	r3, [r7, #32]
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	6a3a      	ldr	r2, [r7, #32]
 80036a0:	6a12      	ldr	r2, [r2, #32]
 80036a2:	609a      	str	r2, [r3, #8]
 80036a4:	6a3b      	ldr	r3, [r7, #32]
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	6a3a      	ldr	r2, [r7, #32]
 80036aa:	69d2      	ldr	r2, [r2, #28]
 80036ac:	605a      	str	r2, [r3, #4]
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	6a3b      	ldr	r3, [r7, #32]
 80036b4:	3318      	adds	r3, #24
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d103      	bne.n	80036c2 <xTaskRemoveFromEventList+0x5a>
 80036ba:	6a3b      	ldr	r3, [r7, #32]
 80036bc:	6a1a      	ldr	r2, [r3, #32]
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	605a      	str	r2, [r3, #4]
 80036c2:	6a3b      	ldr	r3, [r7, #32]
 80036c4:	2200      	movs	r2, #0
 80036c6:	629a      	str	r2, [r3, #40]	; 0x28
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	1e5a      	subs	r2, r3, #1
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036d2:	4b4a      	ldr	r3, [pc, #296]	; (80037fc <xTaskRemoveFromEventList+0x194>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d15e      	bne.n	8003798 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80036da:	6a3b      	ldr	r3, [r7, #32]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	617b      	str	r3, [r7, #20]
 80036e0:	6a3b      	ldr	r3, [r7, #32]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	6a3a      	ldr	r2, [r7, #32]
 80036e6:	68d2      	ldr	r2, [r2, #12]
 80036e8:	609a      	str	r2, [r3, #8]
 80036ea:	6a3b      	ldr	r3, [r7, #32]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	6a3a      	ldr	r2, [r7, #32]
 80036f0:	6892      	ldr	r2, [r2, #8]
 80036f2:	605a      	str	r2, [r3, #4]
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	6a3b      	ldr	r3, [r7, #32]
 80036fa:	3304      	adds	r3, #4
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d103      	bne.n	8003708 <xTaskRemoveFromEventList+0xa0>
 8003700:	6a3b      	ldr	r3, [r7, #32]
 8003702:	68da      	ldr	r2, [r3, #12]
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	605a      	str	r2, [r3, #4]
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	2200      	movs	r2, #0
 800370c:	615a      	str	r2, [r3, #20]
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	1e5a      	subs	r2, r3, #1
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003718:	6a3b      	ldr	r3, [r7, #32]
 800371a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371c:	2201      	movs	r2, #1
 800371e:	409a      	lsls	r2, r3
 8003720:	4b37      	ldr	r3, [pc, #220]	; (8003800 <xTaskRemoveFromEventList+0x198>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4313      	orrs	r3, r2
 8003726:	4a36      	ldr	r2, [pc, #216]	; (8003800 <xTaskRemoveFromEventList+0x198>)
 8003728:	6013      	str	r3, [r2, #0]
 800372a:	6a3b      	ldr	r3, [r7, #32]
 800372c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800372e:	4935      	ldr	r1, [pc, #212]	; (8003804 <xTaskRemoveFromEventList+0x19c>)
 8003730:	4613      	mov	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4413      	add	r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	440b      	add	r3, r1
 800373a:	3304      	adds	r3, #4
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	613b      	str	r3, [r7, #16]
 8003740:	6a3b      	ldr	r3, [r7, #32]
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	609a      	str	r2, [r3, #8]
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	689a      	ldr	r2, [r3, #8]
 800374a:	6a3b      	ldr	r3, [r7, #32]
 800374c:	60da      	str	r2, [r3, #12]
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	6a3a      	ldr	r2, [r7, #32]
 8003754:	3204      	adds	r2, #4
 8003756:	605a      	str	r2, [r3, #4]
 8003758:	6a3b      	ldr	r3, [r7, #32]
 800375a:	1d1a      	adds	r2, r3, #4
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	609a      	str	r2, [r3, #8]
 8003760:	6a3b      	ldr	r3, [r7, #32]
 8003762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003764:	4613      	mov	r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	4413      	add	r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	4a25      	ldr	r2, [pc, #148]	; (8003804 <xTaskRemoveFromEventList+0x19c>)
 800376e:	441a      	add	r2, r3
 8003770:	6a3b      	ldr	r3, [r7, #32]
 8003772:	615a      	str	r2, [r3, #20]
 8003774:	6a3b      	ldr	r3, [r7, #32]
 8003776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003778:	4922      	ldr	r1, [pc, #136]	; (8003804 <xTaskRemoveFromEventList+0x19c>)
 800377a:	4613      	mov	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4413      	add	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	440b      	add	r3, r1
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	1c59      	adds	r1, r3, #1
 8003788:	481e      	ldr	r0, [pc, #120]	; (8003804 <xTaskRemoveFromEventList+0x19c>)
 800378a:	4613      	mov	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	4413      	add	r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	4403      	add	r3, r0
 8003794:	6019      	str	r1, [r3, #0]
 8003796:	e01b      	b.n	80037d0 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003798:	4b1b      	ldr	r3, [pc, #108]	; (8003808 <xTaskRemoveFromEventList+0x1a0>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	61bb      	str	r3, [r7, #24]
 800379e:	6a3b      	ldr	r3, [r7, #32]
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	61da      	str	r2, [r3, #28]
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	6a3b      	ldr	r3, [r7, #32]
 80037aa:	621a      	str	r2, [r3, #32]
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	6a3a      	ldr	r2, [r7, #32]
 80037b2:	3218      	adds	r2, #24
 80037b4:	605a      	str	r2, [r3, #4]
 80037b6:	6a3b      	ldr	r3, [r7, #32]
 80037b8:	f103 0218 	add.w	r2, r3, #24
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	609a      	str	r2, [r3, #8]
 80037c0:	6a3b      	ldr	r3, [r7, #32]
 80037c2:	4a11      	ldr	r2, [pc, #68]	; (8003808 <xTaskRemoveFromEventList+0x1a0>)
 80037c4:	629a      	str	r2, [r3, #40]	; 0x28
 80037c6:	4b10      	ldr	r3, [pc, #64]	; (8003808 <xTaskRemoveFromEventList+0x1a0>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	3301      	adds	r3, #1
 80037cc:	4a0e      	ldr	r2, [pc, #56]	; (8003808 <xTaskRemoveFromEventList+0x1a0>)
 80037ce:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80037d0:	6a3b      	ldr	r3, [r7, #32]
 80037d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037d4:	4b0d      	ldr	r3, [pc, #52]	; (800380c <xTaskRemoveFromEventList+0x1a4>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037da:	429a      	cmp	r2, r3
 80037dc:	d905      	bls.n	80037ea <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80037de:	2301      	movs	r3, #1
 80037e0:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80037e2:	4b0b      	ldr	r3, [pc, #44]	; (8003810 <xTaskRemoveFromEventList+0x1a8>)
 80037e4:	2201      	movs	r2, #1
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	e001      	b.n	80037ee <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 80037ea:	2300      	movs	r3, #0
 80037ec:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80037ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	372c      	adds	r7, #44	; 0x2c
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr
 80037fc:	200001c8 	.word	0x200001c8
 8003800:	200001a8 	.word	0x200001a8
 8003804:	200000cc 	.word	0x200000cc
 8003808:	20000160 	.word	0x20000160
 800380c:	200000c8 	.word	0x200000c8
 8003810:	200001b4 	.word	0x200001b4

08003814 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800381c:	4b06      	ldr	r3, [pc, #24]	; (8003838 <vTaskInternalSetTimeOutState+0x24>)
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003824:	4b05      	ldr	r3, [pc, #20]	; (800383c <vTaskInternalSetTimeOutState+0x28>)
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	605a      	str	r2, [r3, #4]
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr
 8003838:	200001b8 	.word	0x200001b8
 800383c:	200001a4 	.word	0x200001a4

08003840 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b088      	sub	sp, #32
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d10a      	bne.n	8003866 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003854:	f383 8811 	msr	BASEPRI, r3
 8003858:	f3bf 8f6f 	isb	sy
 800385c:	f3bf 8f4f 	dsb	sy
 8003860:	613b      	str	r3, [r7, #16]
    }
 8003862:	bf00      	nop
 8003864:	e7fe      	b.n	8003864 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d10a      	bne.n	8003882 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800386c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003870:	f383 8811 	msr	BASEPRI, r3
 8003874:	f3bf 8f6f 	isb	sy
 8003878:	f3bf 8f4f 	dsb	sy
 800387c:	60fb      	str	r3, [r7, #12]
    }
 800387e:	bf00      	nop
 8003880:	e7fe      	b.n	8003880 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003882:	f000 ff61 	bl	8004748 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003886:	4b1f      	ldr	r3, [pc, #124]	; (8003904 <xTaskCheckForTimeOut+0xc4>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800389e:	d102      	bne.n	80038a6 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80038a0:	2300      	movs	r3, #0
 80038a2:	61fb      	str	r3, [r7, #28]
 80038a4:	e026      	b.n	80038f4 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	4b17      	ldr	r3, [pc, #92]	; (8003908 <xTaskCheckForTimeOut+0xc8>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d00a      	beq.n	80038c8 <xTaskCheckForTimeOut+0x88>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d305      	bcc.n	80038c8 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80038bc:	2301      	movs	r3, #1
 80038be:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	2200      	movs	r2, #0
 80038c4:	601a      	str	r2, [r3, #0]
 80038c6:	e015      	b.n	80038f4 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d20b      	bcs.n	80038ea <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	1ad2      	subs	r2, r2, r3
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7ff ff98 	bl	8003814 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80038e4:	2300      	movs	r3, #0
 80038e6:	61fb      	str	r3, [r7, #28]
 80038e8:	e004      	b.n	80038f4 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	2200      	movs	r2, #0
 80038ee:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80038f0:	2301      	movs	r3, #1
 80038f2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80038f4:	f000 ff58 	bl	80047a8 <vPortExitCritical>

    return xReturn;
 80038f8:	69fb      	ldr	r3, [r7, #28]
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3720      	adds	r7, #32
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	200001a4 	.word	0x200001a4
 8003908:	200001b8 	.word	0x200001b8

0800390c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800390c:	b480      	push	{r7}
 800390e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003910:	4b03      	ldr	r3, [pc, #12]	; (8003920 <vTaskMissedYield+0x14>)
 8003912:	2201      	movs	r2, #1
 8003914:	601a      	str	r2, [r3, #0]
}
 8003916:	bf00      	nop
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr
 8003920:	200001b4 	.word	0x200001b4

08003924 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800392c:	f000 f852 	bl	80039d4 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003930:	4b06      	ldr	r3, [pc, #24]	; (800394c <prvIdleTask+0x28>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d9f9      	bls.n	800392c <prvIdleTask+0x8>
            {
                taskYIELD();
 8003938:	4b05      	ldr	r3, [pc, #20]	; (8003950 <prvIdleTask+0x2c>)
 800393a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800393e:	601a      	str	r2, [r3, #0]
 8003940:	f3bf 8f4f 	dsb	sy
 8003944:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003948:	e7f0      	b.n	800392c <prvIdleTask+0x8>
 800394a:	bf00      	nop
 800394c:	200000cc 	.word	0x200000cc
 8003950:	e000ed04 	.word	0xe000ed04

08003954 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800395a:	2300      	movs	r3, #0
 800395c:	607b      	str	r3, [r7, #4]
 800395e:	e00c      	b.n	800397a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	4613      	mov	r3, r2
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	4413      	add	r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	4a12      	ldr	r2, [pc, #72]	; (80039b4 <prvInitialiseTaskLists+0x60>)
 800396c:	4413      	add	r3, r2
 800396e:	4618      	mov	r0, r3
 8003970:	f7fe fa5e 	bl	8001e30 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	3301      	adds	r3, #1
 8003978:	607b      	str	r3, [r7, #4]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2b04      	cmp	r3, #4
 800397e:	d9ef      	bls.n	8003960 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003980:	480d      	ldr	r0, [pc, #52]	; (80039b8 <prvInitialiseTaskLists+0x64>)
 8003982:	f7fe fa55 	bl	8001e30 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003986:	480d      	ldr	r0, [pc, #52]	; (80039bc <prvInitialiseTaskLists+0x68>)
 8003988:	f7fe fa52 	bl	8001e30 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800398c:	480c      	ldr	r0, [pc, #48]	; (80039c0 <prvInitialiseTaskLists+0x6c>)
 800398e:	f7fe fa4f 	bl	8001e30 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003992:	480c      	ldr	r0, [pc, #48]	; (80039c4 <prvInitialiseTaskLists+0x70>)
 8003994:	f7fe fa4c 	bl	8001e30 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003998:	480b      	ldr	r0, [pc, #44]	; (80039c8 <prvInitialiseTaskLists+0x74>)
 800399a:	f7fe fa49 	bl	8001e30 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800399e:	4b0b      	ldr	r3, [pc, #44]	; (80039cc <prvInitialiseTaskLists+0x78>)
 80039a0:	4a05      	ldr	r2, [pc, #20]	; (80039b8 <prvInitialiseTaskLists+0x64>)
 80039a2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80039a4:	4b0a      	ldr	r3, [pc, #40]	; (80039d0 <prvInitialiseTaskLists+0x7c>)
 80039a6:	4a05      	ldr	r2, [pc, #20]	; (80039bc <prvInitialiseTaskLists+0x68>)
 80039a8:	601a      	str	r2, [r3, #0]
}
 80039aa:	bf00      	nop
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	200000cc 	.word	0x200000cc
 80039b8:	20000130 	.word	0x20000130
 80039bc:	20000144 	.word	0x20000144
 80039c0:	20000160 	.word	0x20000160
 80039c4:	20000174 	.word	0x20000174
 80039c8:	2000018c 	.word	0x2000018c
 80039cc:	20000158 	.word	0x20000158
 80039d0:	2000015c 	.word	0x2000015c

080039d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80039da:	e019      	b.n	8003a10 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80039dc:	f000 feb4 	bl	8004748 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039e0:	4b10      	ldr	r3, [pc, #64]	; (8003a24 <prvCheckTasksWaitingTermination+0x50>)
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	3304      	adds	r3, #4
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7fe fa85 	bl	8001efc <uxListRemove>
                --uxCurrentNumberOfTasks;
 80039f2:	4b0d      	ldr	r3, [pc, #52]	; (8003a28 <prvCheckTasksWaitingTermination+0x54>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	3b01      	subs	r3, #1
 80039f8:	4a0b      	ldr	r2, [pc, #44]	; (8003a28 <prvCheckTasksWaitingTermination+0x54>)
 80039fa:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80039fc:	4b0b      	ldr	r3, [pc, #44]	; (8003a2c <prvCheckTasksWaitingTermination+0x58>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	3b01      	subs	r3, #1
 8003a02:	4a0a      	ldr	r2, [pc, #40]	; (8003a2c <prvCheckTasksWaitingTermination+0x58>)
 8003a04:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003a06:	f000 fecf 	bl	80047a8 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 f810 	bl	8003a30 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a10:	4b06      	ldr	r3, [pc, #24]	; (8003a2c <prvCheckTasksWaitingTermination+0x58>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1e1      	bne.n	80039dc <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003a18:	bf00      	nop
 8003a1a:	bf00      	nop
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	20000174 	.word	0x20000174
 8003a28:	200001a0 	.word	0x200001a0
 8003a2c:	20000188 	.word	0x20000188

08003a30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f001 f81f 	bl	8004a80 <vPortFree>
            vPortFree( pxTCB );
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f001 f81c 	bl	8004a80 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003a48:	bf00      	nop
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a54:	4b0a      	ldr	r3, [pc, #40]	; (8003a80 <prvResetNextTaskUnblockTime+0x30>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d104      	bne.n	8003a68 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003a5e:	4b09      	ldr	r3, [pc, #36]	; (8003a84 <prvResetNextTaskUnblockTime+0x34>)
 8003a60:	f04f 32ff 	mov.w	r2, #4294967295
 8003a64:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003a66:	e005      	b.n	8003a74 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003a68:	4b05      	ldr	r3, [pc, #20]	; (8003a80 <prvResetNextTaskUnblockTime+0x30>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a04      	ldr	r2, [pc, #16]	; (8003a84 <prvResetNextTaskUnblockTime+0x34>)
 8003a72:	6013      	str	r3, [r2, #0]
}
 8003a74:	bf00      	nop
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	20000158 	.word	0x20000158
 8003a84:	200001c0 	.word	0x200001c0

08003a88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003a8e:	4b0b      	ldr	r3, [pc, #44]	; (8003abc <xTaskGetSchedulerState+0x34>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d102      	bne.n	8003a9c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003a96:	2301      	movs	r3, #1
 8003a98:	607b      	str	r3, [r7, #4]
 8003a9a:	e008      	b.n	8003aae <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a9c:	4b08      	ldr	r3, [pc, #32]	; (8003ac0 <xTaskGetSchedulerState+0x38>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d102      	bne.n	8003aaa <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	607b      	str	r3, [r7, #4]
 8003aa8:	e001      	b.n	8003aae <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003aae:	687b      	ldr	r3, [r7, #4]
    }
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr
 8003abc:	200001ac 	.word	0x200001ac
 8003ac0:	200001c8 	.word	0x200001c8

08003ac4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b086      	sub	sp, #24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f000 8087 	beq.w	8003bea <xTaskPriorityInherit+0x126>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae0:	4b44      	ldr	r3, [pc, #272]	; (8003bf4 <xTaskPriorityInherit+0x130>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d276      	bcs.n	8003bd8 <xTaskPriorityInherit+0x114>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	db06      	blt.n	8003b00 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003af2:	4b40      	ldr	r3, [pc, #256]	; (8003bf4 <xTaskPriorityInherit+0x130>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af8:	f1c3 0205 	rsb	r2, r3, #5
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	6959      	ldr	r1, [r3, #20]
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b08:	4613      	mov	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4413      	add	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4a39      	ldr	r2, [pc, #228]	; (8003bf8 <xTaskPriorityInherit+0x134>)
 8003b12:	4413      	add	r3, r2
 8003b14:	4299      	cmp	r1, r3
 8003b16:	d157      	bne.n	8003bc8 <xTaskPriorityInherit+0x104>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	3304      	adds	r3, #4
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7fe f9ed 	bl	8001efc <uxListRemove>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10a      	bne.n	8003b3e <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b32:	43da      	mvns	r2, r3
 8003b34:	4b31      	ldr	r3, [pc, #196]	; (8003bfc <xTaskPriorityInherit+0x138>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	4a30      	ldr	r2, [pc, #192]	; (8003bfc <xTaskPriorityInherit+0x138>)
 8003b3c:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003b3e:	4b2d      	ldr	r3, [pc, #180]	; (8003bf4 <xTaskPriorityInherit+0x130>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	409a      	lsls	r2, r3
 8003b50:	4b2a      	ldr	r3, [pc, #168]	; (8003bfc <xTaskPriorityInherit+0x138>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	4a29      	ldr	r2, [pc, #164]	; (8003bfc <xTaskPriorityInherit+0x138>)
 8003b58:	6013      	str	r3, [r2, #0]
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b5e:	4926      	ldr	r1, [pc, #152]	; (8003bf8 <xTaskPriorityInherit+0x134>)
 8003b60:	4613      	mov	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	4413      	add	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	440b      	add	r3, r1
 8003b6a:	3304      	adds	r3, #4
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	60fb      	str	r3, [r7, #12]
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	609a      	str	r2, [r3, #8]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	689a      	ldr	r2, [r3, #8]
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	60da      	str	r2, [r3, #12]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	3204      	adds	r2, #4
 8003b86:	605a      	str	r2, [r3, #4]
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	1d1a      	adds	r2, r3, #4
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	609a      	str	r2, [r3, #8]
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b94:	4613      	mov	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4413      	add	r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	4a16      	ldr	r2, [pc, #88]	; (8003bf8 <xTaskPriorityInherit+0x134>)
 8003b9e:	441a      	add	r2, r3
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	615a      	str	r2, [r3, #20]
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ba8:	4913      	ldr	r1, [pc, #76]	; (8003bf8 <xTaskPriorityInherit+0x134>)
 8003baa:	4613      	mov	r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	4413      	add	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	440b      	add	r3, r1
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	1c59      	adds	r1, r3, #1
 8003bb8:	480f      	ldr	r0, [pc, #60]	; (8003bf8 <xTaskPriorityInherit+0x134>)
 8003bba:	4613      	mov	r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	4413      	add	r3, r2
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	4403      	add	r3, r0
 8003bc4:	6019      	str	r1, [r3, #0]
 8003bc6:	e004      	b.n	8003bd2 <xTaskPriorityInherit+0x10e>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003bc8:	4b0a      	ldr	r3, [pc, #40]	; (8003bf4 <xTaskPriorityInherit+0x130>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	617b      	str	r3, [r7, #20]
 8003bd6:	e008      	b.n	8003bea <xTaskPriorityInherit+0x126>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003bdc:	4b05      	ldr	r3, [pc, #20]	; (8003bf4 <xTaskPriorityInherit+0x130>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d201      	bcs.n	8003bea <xTaskPriorityInherit+0x126>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8003be6:	2301      	movs	r3, #1
 8003be8:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003bea:	697b      	ldr	r3, [r7, #20]
    }
 8003bec:	4618      	mov	r0, r3
 8003bee:	3718      	adds	r7, #24
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	200000c8 	.word	0x200000c8
 8003bf8:	200000cc 	.word	0x200000cc
 8003bfc:	200001a8 	.word	0x200001a8

08003c00 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b088      	sub	sp, #32
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f000 808c 	beq.w	8003d30 <xTaskPriorityDisinherit+0x130>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003c18:	4b48      	ldr	r3, [pc, #288]	; (8003d3c <xTaskPriorityDisinherit+0x13c>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d00a      	beq.n	8003c38 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8003c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c26:	f383 8811 	msr	BASEPRI, r3
 8003c2a:	f3bf 8f6f 	isb	sy
 8003c2e:	f3bf 8f4f 	dsb	sy
 8003c32:	613b      	str	r3, [r7, #16]
    }
 8003c34:	bf00      	nop
 8003c36:	e7fe      	b.n	8003c36 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d10a      	bne.n	8003c56 <xTaskPriorityDisinherit+0x56>
        __asm volatile
 8003c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c44:	f383 8811 	msr	BASEPRI, r3
 8003c48:	f3bf 8f6f 	isb	sy
 8003c4c:	f3bf 8f4f 	dsb	sy
 8003c50:	60fb      	str	r3, [r7, #12]
    }
 8003c52:	bf00      	nop
 8003c54:	e7fe      	b.n	8003c54 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c5a:	1e5a      	subs	r2, r3, #1
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d061      	beq.n	8003d30 <xTaskPriorityDisinherit+0x130>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d15d      	bne.n	8003d30 <xTaskPriorityDisinherit+0x130>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	3304      	adds	r3, #4
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7fe f93f 	bl	8001efc <uxListRemove>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10a      	bne.n	8003c9a <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c88:	2201      	movs	r2, #1
 8003c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8e:	43da      	mvns	r2, r3
 8003c90:	4b2b      	ldr	r3, [pc, #172]	; (8003d40 <xTaskPriorityDisinherit+0x140>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4013      	ands	r3, r2
 8003c96:	4a2a      	ldr	r2, [pc, #168]	; (8003d40 <xTaskPriorityDisinherit+0x140>)
 8003c98:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca6:	f1c3 0205 	rsb	r2, r3, #5
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	409a      	lsls	r2, r3
 8003cb6:	4b22      	ldr	r3, [pc, #136]	; (8003d40 <xTaskPriorityDisinherit+0x140>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	4a20      	ldr	r2, [pc, #128]	; (8003d40 <xTaskPriorityDisinherit+0x140>)
 8003cbe:	6013      	str	r3, [r2, #0]
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cc4:	491f      	ldr	r1, [pc, #124]	; (8003d44 <xTaskPriorityDisinherit+0x144>)
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	4413      	add	r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	440b      	add	r3, r1
 8003cd0:	3304      	adds	r3, #4
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	617b      	str	r3, [r7, #20]
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	609a      	str	r2, [r3, #8]
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	689a      	ldr	r2, [r3, #8]
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	60da      	str	r2, [r3, #12]
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	3204      	adds	r2, #4
 8003cec:	605a      	str	r2, [r3, #4]
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	1d1a      	adds	r2, r3, #4
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	609a      	str	r2, [r3, #8]
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	4413      	add	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	4a10      	ldr	r2, [pc, #64]	; (8003d44 <xTaskPriorityDisinherit+0x144>)
 8003d04:	441a      	add	r2, r3
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	615a      	str	r2, [r3, #20]
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d0e:	490d      	ldr	r1, [pc, #52]	; (8003d44 <xTaskPriorityDisinherit+0x144>)
 8003d10:	4613      	mov	r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4413      	add	r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	440b      	add	r3, r1
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	1c59      	adds	r1, r3, #1
 8003d1e:	4809      	ldr	r0, [pc, #36]	; (8003d44 <xTaskPriorityDisinherit+0x144>)
 8003d20:	4613      	mov	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4413      	add	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	4403      	add	r3, r0
 8003d2a:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003d30:	69fb      	ldr	r3, [r7, #28]
    }
 8003d32:	4618      	mov	r0, r3
 8003d34:	3720      	adds	r7, #32
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	200000c8 	.word	0x200000c8
 8003d40:	200001a8 	.word	0x200001a8
 8003d44:	200000cc 	.word	0x200000cc

08003d48 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b08a      	sub	sp, #40	; 0x28
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003d56:	2301      	movs	r3, #1
 8003d58:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f000 80a1 	beq.w	8003ea4 <vTaskPriorityDisinheritAfterTimeout+0x15c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8003d62:	6a3b      	ldr	r3, [r7, #32]
 8003d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d10a      	bne.n	8003d80 <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 8003d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d6e:	f383 8811 	msr	BASEPRI, r3
 8003d72:	f3bf 8f6f 	isb	sy
 8003d76:	f3bf 8f4f 	dsb	sy
 8003d7a:	613b      	str	r3, [r7, #16]
    }
 8003d7c:	bf00      	nop
 8003d7e:	e7fe      	b.n	8003d7e <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003d80:	6a3b      	ldr	r3, [r7, #32]
 8003d82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d902      	bls.n	8003d90 <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d8e:	e002      	b.n	8003d96 <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8003d90:	6a3b      	ldr	r3, [r7, #32]
 8003d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d94:	627b      	str	r3, [r7, #36]	; 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8003d96:	6a3b      	ldr	r3, [r7, #32]
 8003d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	f000 8081 	beq.w	8003ea4 <vTaskPriorityDisinheritAfterTimeout+0x15c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003da2:	6a3b      	ldr	r3, [r7, #32]
 8003da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da6:	69fa      	ldr	r2, [r7, #28]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d17b      	bne.n	8003ea4 <vTaskPriorityDisinheritAfterTimeout+0x15c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8003dac:	4b3f      	ldr	r3, [pc, #252]	; (8003eac <vTaskPriorityDisinheritAfterTimeout+0x164>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6a3a      	ldr	r2, [r7, #32]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d10a      	bne.n	8003dcc <vTaskPriorityDisinheritAfterTimeout+0x84>
        __asm volatile
 8003db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dba:	f383 8811 	msr	BASEPRI, r3
 8003dbe:	f3bf 8f6f 	isb	sy
 8003dc2:	f3bf 8f4f 	dsb	sy
 8003dc6:	60fb      	str	r3, [r7, #12]
    }
 8003dc8:	bf00      	nop
 8003dca:	e7fe      	b.n	8003dca <vTaskPriorityDisinheritAfterTimeout+0x82>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003dcc:	6a3b      	ldr	r3, [r7, #32]
 8003dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd0:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 8003dd2:	6a3b      	ldr	r3, [r7, #32]
 8003dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dd6:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003dd8:	6a3b      	ldr	r3, [r7, #32]
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	db04      	blt.n	8003dea <vTaskPriorityDisinheritAfterTimeout+0xa2>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de2:	f1c3 0205 	rsb	r2, r3, #5
 8003de6:	6a3b      	ldr	r3, [r7, #32]
 8003de8:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003dea:	6a3b      	ldr	r3, [r7, #32]
 8003dec:	6959      	ldr	r1, [r3, #20]
 8003dee:	69ba      	ldr	r2, [r7, #24]
 8003df0:	4613      	mov	r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	4413      	add	r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	4a2d      	ldr	r2, [pc, #180]	; (8003eb0 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8003dfa:	4413      	add	r3, r2
 8003dfc:	4299      	cmp	r1, r3
 8003dfe:	d151      	bne.n	8003ea4 <vTaskPriorityDisinheritAfterTimeout+0x15c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e00:	6a3b      	ldr	r3, [r7, #32]
 8003e02:	3304      	adds	r3, #4
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7fe f879 	bl	8001efc <uxListRemove>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d10a      	bne.n	8003e26 <vTaskPriorityDisinheritAfterTimeout+0xde>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003e10:	6a3b      	ldr	r3, [r7, #32]
 8003e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e14:	2201      	movs	r2, #1
 8003e16:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1a:	43da      	mvns	r2, r3
 8003e1c:	4b25      	ldr	r3, [pc, #148]	; (8003eb4 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4013      	ands	r3, r2
 8003e22:	4a24      	ldr	r2, [pc, #144]	; (8003eb4 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8003e24:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8003e26:	6a3b      	ldr	r3, [r7, #32]
 8003e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	409a      	lsls	r2, r3
 8003e2e:	4b21      	ldr	r3, [pc, #132]	; (8003eb4 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	4a1f      	ldr	r2, [pc, #124]	; (8003eb4 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8003e36:	6013      	str	r3, [r2, #0]
 8003e38:	6a3b      	ldr	r3, [r7, #32]
 8003e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e3c:	491c      	ldr	r1, [pc, #112]	; (8003eb0 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8003e3e:	4613      	mov	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	4413      	add	r3, r2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	440b      	add	r3, r1
 8003e48:	3304      	adds	r3, #4
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	617b      	str	r3, [r7, #20]
 8003e4e:	6a3b      	ldr	r3, [r7, #32]
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	609a      	str	r2, [r3, #8]
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	689a      	ldr	r2, [r3, #8]
 8003e58:	6a3b      	ldr	r3, [r7, #32]
 8003e5a:	60da      	str	r2, [r3, #12]
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	6a3a      	ldr	r2, [r7, #32]
 8003e62:	3204      	adds	r2, #4
 8003e64:	605a      	str	r2, [r3, #4]
 8003e66:	6a3b      	ldr	r3, [r7, #32]
 8003e68:	1d1a      	adds	r2, r3, #4
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	609a      	str	r2, [r3, #8]
 8003e6e:	6a3b      	ldr	r3, [r7, #32]
 8003e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e72:	4613      	mov	r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	4413      	add	r3, r2
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	4a0d      	ldr	r2, [pc, #52]	; (8003eb0 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8003e7c:	441a      	add	r2, r3
 8003e7e:	6a3b      	ldr	r3, [r7, #32]
 8003e80:	615a      	str	r2, [r3, #20]
 8003e82:	6a3b      	ldr	r3, [r7, #32]
 8003e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e86:	490a      	ldr	r1, [pc, #40]	; (8003eb0 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8003e88:	4613      	mov	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	4413      	add	r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	440b      	add	r3, r1
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	1c59      	adds	r1, r3, #1
 8003e96:	4806      	ldr	r0, [pc, #24]	; (8003eb0 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8003e98:	4613      	mov	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	4413      	add	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	4403      	add	r3, r0
 8003ea2:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003ea4:	bf00      	nop
 8003ea6:	3728      	adds	r7, #40	; 0x28
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	200000c8 	.word	0x200000c8
 8003eb0:	200000cc 	.word	0x200000cc
 8003eb4:	200001a8 	.word	0x200001a8

08003eb8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8003eb8:	b480      	push	{r7}
 8003eba:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8003ebc:	4b07      	ldr	r3, [pc, #28]	; (8003edc <pvTaskIncrementMutexHeldCount+0x24>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d004      	beq.n	8003ece <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8003ec4:	4b05      	ldr	r3, [pc, #20]	; (8003edc <pvTaskIncrementMutexHeldCount+0x24>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003eca:	3201      	adds	r2, #1
 8003ecc:	655a      	str	r2, [r3, #84]	; 0x54
        }

        return pxCurrentTCB;
 8003ece:	4b03      	ldr	r3, [pc, #12]	; (8003edc <pvTaskIncrementMutexHeldCount+0x24>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
    }
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr
 8003edc:	200000c8 	.word	0x200000c8

08003ee0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003eea:	4b36      	ldr	r3, [pc, #216]	; (8003fc4 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ef0:	4b35      	ldr	r3, [pc, #212]	; (8003fc8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	3304      	adds	r3, #4
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7fe f800 	bl	8001efc <uxListRemove>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10b      	bne.n	8003f1a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003f02:	4b31      	ldr	r3, [pc, #196]	; (8003fc8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f08:	2201      	movs	r2, #1
 8003f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0e:	43da      	mvns	r2, r3
 8003f10:	4b2e      	ldr	r3, [pc, #184]	; (8003fcc <prvAddCurrentTaskToDelayedList+0xec>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4013      	ands	r3, r2
 8003f16:	4a2d      	ldr	r2, [pc, #180]	; (8003fcc <prvAddCurrentTaskToDelayedList+0xec>)
 8003f18:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f20:	d124      	bne.n	8003f6c <prvAddCurrentTaskToDelayedList+0x8c>
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d021      	beq.n	8003f6c <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f28:	4b29      	ldr	r3, [pc, #164]	; (8003fd0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	613b      	str	r3, [r7, #16]
 8003f2e:	4b26      	ldr	r3, [pc, #152]	; (8003fc8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	609a      	str	r2, [r3, #8]
 8003f36:	4b24      	ldr	r3, [pc, #144]	; (8003fc8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	6892      	ldr	r2, [r2, #8]
 8003f3e:	60da      	str	r2, [r3, #12]
 8003f40:	4b21      	ldr	r3, [pc, #132]	; (8003fc8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	3204      	adds	r2, #4
 8003f4a:	605a      	str	r2, [r3, #4]
 8003f4c:	4b1e      	ldr	r3, [pc, #120]	; (8003fc8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	1d1a      	adds	r2, r3, #4
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	609a      	str	r2, [r3, #8]
 8003f56:	4b1c      	ldr	r3, [pc, #112]	; (8003fc8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a1d      	ldr	r2, [pc, #116]	; (8003fd0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003f5c:	615a      	str	r2, [r3, #20]
 8003f5e:	4b1c      	ldr	r3, [pc, #112]	; (8003fd0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	3301      	adds	r3, #1
 8003f64:	4a1a      	ldr	r2, [pc, #104]	; (8003fd0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003f66:	6013      	str	r3, [r2, #0]
 8003f68:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003f6a:	e026      	b.n	8003fba <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003f6c:	697a      	ldr	r2, [r7, #20]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4413      	add	r3, r2
 8003f72:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f74:	4b14      	ldr	r3, [pc, #80]	; (8003fc8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d209      	bcs.n	8003f98 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f84:	4b13      	ldr	r3, [pc, #76]	; (8003fd4 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	4b0f      	ldr	r3, [pc, #60]	; (8003fc8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	3304      	adds	r3, #4
 8003f8e:	4619      	mov	r1, r3
 8003f90:	4610      	mov	r0, r2
 8003f92:	f7fd ff7a 	bl	8001e8a <vListInsert>
}
 8003f96:	e010      	b.n	8003fba <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f98:	4b0f      	ldr	r3, [pc, #60]	; (8003fd8 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	4b0a      	ldr	r3, [pc, #40]	; (8003fc8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	3304      	adds	r3, #4
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	4610      	mov	r0, r2
 8003fa6:	f7fd ff70 	bl	8001e8a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003faa:	4b0c      	ldr	r3, [pc, #48]	; (8003fdc <prvAddCurrentTaskToDelayedList+0xfc>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d202      	bcs.n	8003fba <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003fb4:	4a09      	ldr	r2, [pc, #36]	; (8003fdc <prvAddCurrentTaskToDelayedList+0xfc>)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6013      	str	r3, [r2, #0]
}
 8003fba:	bf00      	nop
 8003fbc:	3718      	adds	r7, #24
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	200001a4 	.word	0x200001a4
 8003fc8:	200000c8 	.word	0x200000c8
 8003fcc:	200001a8 	.word	0x200001a8
 8003fd0:	2000018c 	.word	0x2000018c
 8003fd4:	2000015c 	.word	0x2000015c
 8003fd8:	20000158 	.word	0x20000158
 8003fdc:	200001c0 	.word	0x200001c0

08003fe0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003fea:	f000 fa47 	bl	800447c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003fee:	4b11      	ldr	r3, [pc, #68]	; (8004034 <xTimerCreateTimerTask+0x54>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00b      	beq.n	800400e <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8003ff6:	4b10      	ldr	r3, [pc, #64]	; (8004038 <xTimerCreateTimerTask+0x58>)
 8003ff8:	9301      	str	r3, [sp, #4]
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	9300      	str	r3, [sp, #0]
 8003ffe:	2300      	movs	r3, #0
 8004000:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004004:	490d      	ldr	r1, [pc, #52]	; (800403c <xTimerCreateTimerTask+0x5c>)
 8004006:	480e      	ldr	r0, [pc, #56]	; (8004040 <xTimerCreateTimerTask+0x60>)
 8004008:	f7fe fd5c 	bl	8002ac4 <xTaskCreate>
 800400c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d10a      	bne.n	800402a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8004014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004018:	f383 8811 	msr	BASEPRI, r3
 800401c:	f3bf 8f6f 	isb	sy
 8004020:	f3bf 8f4f 	dsb	sy
 8004024:	603b      	str	r3, [r7, #0]
    }
 8004026:	bf00      	nop
 8004028:	e7fe      	b.n	8004028 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800402a:	687b      	ldr	r3, [r7, #4]
    }
 800402c:	4618      	mov	r0, r3
 800402e:	3708      	adds	r7, #8
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	200001fc 	.word	0x200001fc
 8004038:	20000200 	.word	0x20000200
 800403c:	08004d50 	.word	0x08004d50
 8004040:	080040e9 	.word	0x080040e9

08004044 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004050:	e008      	b.n	8004064 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	4413      	add	r3, r2
 800405a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6a1b      	ldr	r3, [r3, #32]
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	699a      	ldr	r2, [r3, #24]
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	18d1      	adds	r1, r2, r3
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f000 f8dd 	bl	8004230 <prvInsertTimerInActiveList>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1ea      	bne.n	8004052 <prvReloadTimer+0xe>
        }
    }
 800407c:	bf00      	nop
 800407e:	bf00      	nop
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
	...

08004088 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004092:	4b14      	ldr	r3, [pc, #80]	; (80040e4 <prvProcessExpiredTimer+0x5c>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	3304      	adds	r3, #4
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7fd ff2b 	bl	8001efc <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040ac:	f003 0304 	and.w	r3, r3, #4
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d005      	beq.n	80040c0 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80040b4:	683a      	ldr	r2, [r7, #0]
 80040b6:	6879      	ldr	r1, [r7, #4]
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f7ff ffc3 	bl	8004044 <prvReloadTimer>
 80040be:	e008      	b.n	80040d2 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040c6:	f023 0301 	bic.w	r3, r3, #1
 80040ca:	b2da      	uxtb	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	4798      	blx	r3
    }
 80040da:	bf00      	nop
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	200001f4 	.word	0x200001f4

080040e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80040f0:	f107 0308 	add.w	r3, r7, #8
 80040f4:	4618      	mov	r0, r3
 80040f6:	f000 f857 	bl	80041a8 <prvGetNextExpireTime>
 80040fa:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	4619      	mov	r1, r3
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f000 f803 	bl	800410c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004106:	f000 f8d5 	bl	80042b4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800410a:	e7f1      	b.n	80040f0 <prvTimerTask+0x8>

0800410c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004116:	f7fe ffb1 	bl	800307c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800411a:	f107 0308 	add.w	r3, r7, #8
 800411e:	4618      	mov	r0, r3
 8004120:	f000 f866 	bl	80041f0 <prvSampleTimeNow>
 8004124:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d130      	bne.n	800418e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10a      	bne.n	8004148 <prvProcessTimerOrBlockTask+0x3c>
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	429a      	cmp	r2, r3
 8004138:	d806      	bhi.n	8004148 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800413a:	f7fe ffad 	bl	8003098 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800413e:	68f9      	ldr	r1, [r7, #12]
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f7ff ffa1 	bl	8004088 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004146:	e024      	b.n	8004192 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d008      	beq.n	8004160 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800414e:	4b13      	ldr	r3, [pc, #76]	; (800419c <prvProcessTimerOrBlockTask+0x90>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d101      	bne.n	800415c <prvProcessTimerOrBlockTask+0x50>
 8004158:	2301      	movs	r3, #1
 800415a:	e000      	b.n	800415e <prvProcessTimerOrBlockTask+0x52>
 800415c:	2300      	movs	r3, #0
 800415e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004160:	4b0f      	ldr	r3, [pc, #60]	; (80041a0 <prvProcessTimerOrBlockTask+0x94>)
 8004162:	6818      	ldr	r0, [r3, #0]
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	4619      	mov	r1, r3
 800416e:	f7fe fc75 	bl	8002a5c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004172:	f7fe ff91 	bl	8003098 <xTaskResumeAll>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d10a      	bne.n	8004192 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800417c:	4b09      	ldr	r3, [pc, #36]	; (80041a4 <prvProcessTimerOrBlockTask+0x98>)
 800417e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	f3bf 8f4f 	dsb	sy
 8004188:	f3bf 8f6f 	isb	sy
    }
 800418c:	e001      	b.n	8004192 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800418e:	f7fe ff83 	bl	8003098 <xTaskResumeAll>
    }
 8004192:	bf00      	nop
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	200001f8 	.word	0x200001f8
 80041a0:	200001fc 	.word	0x200001fc
 80041a4:	e000ed04 	.word	0xe000ed04

080041a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80041b0:	4b0e      	ldr	r3, [pc, #56]	; (80041ec <prvGetNextExpireTime+0x44>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <prvGetNextExpireTime+0x16>
 80041ba:	2201      	movs	r2, #1
 80041bc:	e000      	b.n	80041c0 <prvGetNextExpireTime+0x18>
 80041be:	2200      	movs	r2, #0
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d105      	bne.n	80041d8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80041cc:	4b07      	ldr	r3, [pc, #28]	; (80041ec <prvGetNextExpireTime+0x44>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	60fb      	str	r3, [r7, #12]
 80041d6:	e001      	b.n	80041dc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80041d8:	2300      	movs	r3, #0
 80041da:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80041dc:	68fb      	ldr	r3, [r7, #12]
    }
 80041de:	4618      	mov	r0, r3
 80041e0:	3714      	adds	r7, #20
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	200001f4 	.word	0x200001f4

080041f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80041f8:	f7ff f84a 	bl	8003290 <xTaskGetTickCount>
 80041fc:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80041fe:	4b0b      	ldr	r3, [pc, #44]	; (800422c <prvSampleTimeNow+0x3c>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	429a      	cmp	r2, r3
 8004206:	d205      	bcs.n	8004214 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004208:	f000 f912 	bl	8004430 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	601a      	str	r2, [r3, #0]
 8004212:	e002      	b.n	800421a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800421a:	4a04      	ldr	r2, [pc, #16]	; (800422c <prvSampleTimeNow+0x3c>)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004220:	68fb      	ldr	r3, [r7, #12]
    }
 8004222:	4618      	mov	r0, r3
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	20000204 	.word	0x20000204

08004230 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
 800423c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800423e:	2300      	movs	r3, #0
 8004240:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	68ba      	ldr	r2, [r7, #8]
 8004246:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800424e:	68ba      	ldr	r2, [r7, #8]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	429a      	cmp	r2, r3
 8004254:	d812      	bhi.n	800427c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	1ad2      	subs	r2, r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	429a      	cmp	r2, r3
 8004262:	d302      	bcc.n	800426a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004264:	2301      	movs	r3, #1
 8004266:	617b      	str	r3, [r7, #20]
 8004268:	e01b      	b.n	80042a2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800426a:	4b10      	ldr	r3, [pc, #64]	; (80042ac <prvInsertTimerInActiveList+0x7c>)
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	3304      	adds	r3, #4
 8004272:	4619      	mov	r1, r3
 8004274:	4610      	mov	r0, r2
 8004276:	f7fd fe08 	bl	8001e8a <vListInsert>
 800427a:	e012      	b.n	80042a2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	429a      	cmp	r2, r3
 8004282:	d206      	bcs.n	8004292 <prvInsertTimerInActiveList+0x62>
 8004284:	68ba      	ldr	r2, [r7, #8]
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	429a      	cmp	r2, r3
 800428a:	d302      	bcc.n	8004292 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800428c:	2301      	movs	r3, #1
 800428e:	617b      	str	r3, [r7, #20]
 8004290:	e007      	b.n	80042a2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004292:	4b07      	ldr	r3, [pc, #28]	; (80042b0 <prvInsertTimerInActiveList+0x80>)
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	3304      	adds	r3, #4
 800429a:	4619      	mov	r1, r3
 800429c:	4610      	mov	r0, r2
 800429e:	f7fd fdf4 	bl	8001e8a <vListInsert>
            }
        }

        return xProcessTimerNow;
 80042a2:	697b      	ldr	r3, [r7, #20]
    }
 80042a4:	4618      	mov	r0, r3
 80042a6:	3718      	adds	r7, #24
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	200001f8 	.word	0x200001f8
 80042b0:	200001f4 	.word	0x200001f4

080042b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b088      	sub	sp, #32
 80042b8:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80042ba:	e0a6      	b.n	800440a <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f2c0 80a2 	blt.w	8004408 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	695b      	ldr	r3, [r3, #20]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d004      	beq.n	80042da <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	3304      	adds	r3, #4
 80042d4:	4618      	mov	r0, r3
 80042d6:	f7fd fe11 	bl	8001efc <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80042da:	1d3b      	adds	r3, r7, #4
 80042dc:	4618      	mov	r0, r3
 80042de:	f7ff ff87 	bl	80041f0 <prvSampleTimeNow>
 80042e2:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	3b01      	subs	r3, #1
 80042e8:	2b08      	cmp	r3, #8
 80042ea:	f200 808e 	bhi.w	800440a <prvProcessReceivedCommands+0x156>
 80042ee:	a201      	add	r2, pc, #4	; (adr r2, 80042f4 <prvProcessReceivedCommands+0x40>)
 80042f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f4:	08004319 	.word	0x08004319
 80042f8:	08004319 	.word	0x08004319
 80042fc:	08004381 	.word	0x08004381
 8004300:	08004395 	.word	0x08004395
 8004304:	080043df 	.word	0x080043df
 8004308:	08004319 	.word	0x08004319
 800430c:	08004319 	.word	0x08004319
 8004310:	08004381 	.word	0x08004381
 8004314:	08004395 	.word	0x08004395
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800431e:	f043 0301 	orr.w	r3, r3, #1
 8004322:	b2da      	uxtb	r2, r3
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	18d1      	adds	r1, r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	69f8      	ldr	r0, [r7, #28]
 8004338:	f7ff ff7a 	bl	8004230 <prvInsertTimerInActiveList>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d063      	beq.n	800440a <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004348:	f003 0304 	and.w	r3, r3, #4
 800434c:	2b00      	cmp	r3, #0
 800434e:	d009      	beq.n	8004364 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	4413      	add	r3, r2
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	4619      	mov	r1, r3
 800435c:	69f8      	ldr	r0, [r7, #28]
 800435e:	f7ff fe71 	bl	8004044 <prvReloadTimer>
 8004362:	e008      	b.n	8004376 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800436a:	f023 0301 	bic.w	r3, r3, #1
 800436e:	b2da      	uxtb	r2, r3
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	69f8      	ldr	r0, [r7, #28]
 800437c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800437e:	e044      	b.n	800440a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004386:	f023 0301 	bic.w	r3, r3, #1
 800438a:	b2da      	uxtb	r2, r3
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004392:	e03a      	b.n	800440a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800439a:	f043 0301 	orr.w	r3, r3, #1
 800439e:	b2da      	uxtb	r2, r3
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d10a      	bne.n	80043ca <prvProcessReceivedCommands+0x116>
        __asm volatile
 80043b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b8:	f383 8811 	msr	BASEPRI, r3
 80043bc:	f3bf 8f6f 	isb	sy
 80043c0:	f3bf 8f4f 	dsb	sy
 80043c4:	617b      	str	r3, [r7, #20]
    }
 80043c6:	bf00      	nop
 80043c8:	e7fe      	b.n	80043c8 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	699a      	ldr	r2, [r3, #24]
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	18d1      	adds	r1, r2, r3
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	69f8      	ldr	r0, [r7, #28]
 80043d8:	f7ff ff2a 	bl	8004230 <prvInsertTimerInActiveList>
                        break;
 80043dc:	e015      	b.n	800440a <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043e4:	f003 0302 	and.w	r3, r3, #2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d103      	bne.n	80043f4 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 80043ec:	69f8      	ldr	r0, [r7, #28]
 80043ee:	f000 fb47 	bl	8004a80 <vPortFree>
 80043f2:	e00a      	b.n	800440a <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043fa:	f023 0301 	bic.w	r3, r3, #1
 80043fe:	b2da      	uxtb	r2, r3
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004406:	e000      	b.n	800440a <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004408:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800440a:	4b08      	ldr	r3, [pc, #32]	; (800442c <prvProcessReceivedCommands+0x178>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f107 0108 	add.w	r1, r7, #8
 8004412:	2200      	movs	r2, #0
 8004414:	4618      	mov	r0, r3
 8004416:	f7fd ffcd 	bl	80023b4 <xQueueReceive>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	f47f af4d 	bne.w	80042bc <prvProcessReceivedCommands+0x8>
        }
    }
 8004422:	bf00      	nop
 8004424:	bf00      	nop
 8004426:	3720      	adds	r7, #32
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	200001fc 	.word	0x200001fc

08004430 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004436:	e009      	b.n	800444c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004438:	4b0e      	ldr	r3, [pc, #56]	; (8004474 <prvSwitchTimerLists+0x44>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004442:	f04f 31ff 	mov.w	r1, #4294967295
 8004446:	6838      	ldr	r0, [r7, #0]
 8004448:	f7ff fe1e 	bl	8004088 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800444c:	4b09      	ldr	r3, [pc, #36]	; (8004474 <prvSwitchTimerLists+0x44>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1f0      	bne.n	8004438 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004456:	4b07      	ldr	r3, [pc, #28]	; (8004474 <prvSwitchTimerLists+0x44>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800445c:	4b06      	ldr	r3, [pc, #24]	; (8004478 <prvSwitchTimerLists+0x48>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a04      	ldr	r2, [pc, #16]	; (8004474 <prvSwitchTimerLists+0x44>)
 8004462:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004464:	4a04      	ldr	r2, [pc, #16]	; (8004478 <prvSwitchTimerLists+0x48>)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6013      	str	r3, [r2, #0]
    }
 800446a:	bf00      	nop
 800446c:	3708      	adds	r7, #8
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	200001f4 	.word	0x200001f4
 8004478:	200001f8 	.word	0x200001f8

0800447c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800447c:	b580      	push	{r7, lr}
 800447e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004480:	f000 f962 	bl	8004748 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004484:	4b12      	ldr	r3, [pc, #72]	; (80044d0 <prvCheckForValidListAndQueue+0x54>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d11d      	bne.n	80044c8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800448c:	4811      	ldr	r0, [pc, #68]	; (80044d4 <prvCheckForValidListAndQueue+0x58>)
 800448e:	f7fd fccf 	bl	8001e30 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004492:	4811      	ldr	r0, [pc, #68]	; (80044d8 <prvCheckForValidListAndQueue+0x5c>)
 8004494:	f7fd fccc 	bl	8001e30 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004498:	4b10      	ldr	r3, [pc, #64]	; (80044dc <prvCheckForValidListAndQueue+0x60>)
 800449a:	4a0e      	ldr	r2, [pc, #56]	; (80044d4 <prvCheckForValidListAndQueue+0x58>)
 800449c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800449e:	4b10      	ldr	r3, [pc, #64]	; (80044e0 <prvCheckForValidListAndQueue+0x64>)
 80044a0:	4a0d      	ldr	r2, [pc, #52]	; (80044d8 <prvCheckForValidListAndQueue+0x5c>)
 80044a2:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80044a4:	2200      	movs	r2, #0
 80044a6:	210c      	movs	r1, #12
 80044a8:	200a      	movs	r0, #10
 80044aa:	f7fd fde1 	bl	8002070 <xQueueGenericCreate>
 80044ae:	4603      	mov	r3, r0
 80044b0:	4a07      	ldr	r2, [pc, #28]	; (80044d0 <prvCheckForValidListAndQueue+0x54>)
 80044b2:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80044b4:	4b06      	ldr	r3, [pc, #24]	; (80044d0 <prvCheckForValidListAndQueue+0x54>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d005      	beq.n	80044c8 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80044bc:	4b04      	ldr	r3, [pc, #16]	; (80044d0 <prvCheckForValidListAndQueue+0x54>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4908      	ldr	r1, [pc, #32]	; (80044e4 <prvCheckForValidListAndQueue+0x68>)
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7fe fa7c 	bl	80029c0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80044c8:	f000 f96e 	bl	80047a8 <vPortExitCritical>
    }
 80044cc:	bf00      	nop
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	200001fc 	.word	0x200001fc
 80044d4:	200001cc 	.word	0x200001cc
 80044d8:	200001e0 	.word	0x200001e0
 80044dc:	200001f4 	.word	0x200001f4
 80044e0:	200001f8 	.word	0x200001f8
 80044e4:	08004d58 	.word	0x08004d58

080044e8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	3b04      	subs	r3, #4
 80044f8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004500:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	3b04      	subs	r3, #4
 8004506:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	f023 0201 	bic.w	r2, r3, #1
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	3b04      	subs	r3, #4
 8004516:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004518:	4a0c      	ldr	r2, [pc, #48]	; (800454c <pxPortInitialiseStack+0x64>)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	3b14      	subs	r3, #20
 8004522:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	3b04      	subs	r3, #4
 800452e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f06f 0202 	mvn.w	r2, #2
 8004536:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	3b20      	subs	r3, #32
 800453c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800453e:	68fb      	ldr	r3, [r7, #12]
}
 8004540:	4618      	mov	r0, r3
 8004542:	3714      	adds	r7, #20
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr
 800454c:	08004551 	.word	0x08004551

08004550 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004550:	b480      	push	{r7}
 8004552:	b085      	sub	sp, #20
 8004554:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004556:	2300      	movs	r3, #0
 8004558:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800455a:	4b12      	ldr	r3, [pc, #72]	; (80045a4 <prvTaskExitError+0x54>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004562:	d00a      	beq.n	800457a <prvTaskExitError+0x2a>
        __asm volatile
 8004564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004568:	f383 8811 	msr	BASEPRI, r3
 800456c:	f3bf 8f6f 	isb	sy
 8004570:	f3bf 8f4f 	dsb	sy
 8004574:	60fb      	str	r3, [r7, #12]
    }
 8004576:	bf00      	nop
 8004578:	e7fe      	b.n	8004578 <prvTaskExitError+0x28>
        __asm volatile
 800457a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457e:	f383 8811 	msr	BASEPRI, r3
 8004582:	f3bf 8f6f 	isb	sy
 8004586:	f3bf 8f4f 	dsb	sy
 800458a:	60bb      	str	r3, [r7, #8]
    }
 800458c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800458e:	bf00      	nop
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d0fc      	beq.n	8004590 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004596:	bf00      	nop
 8004598:	bf00      	nop
 800459a:	3714      	adds	r7, #20
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr
 80045a4:	20000010 	.word	0x20000010
	...

080045b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80045b0:	4b07      	ldr	r3, [pc, #28]	; (80045d0 <pxCurrentTCBConst2>)
 80045b2:	6819      	ldr	r1, [r3, #0]
 80045b4:	6808      	ldr	r0, [r1, #0]
 80045b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045ba:	f380 8809 	msr	PSP, r0
 80045be:	f3bf 8f6f 	isb	sy
 80045c2:	f04f 0000 	mov.w	r0, #0
 80045c6:	f380 8811 	msr	BASEPRI, r0
 80045ca:	4770      	bx	lr
 80045cc:	f3af 8000 	nop.w

080045d0 <pxCurrentTCBConst2>:
 80045d0:	200000c8 	.word	0x200000c8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80045d4:	bf00      	nop
 80045d6:	bf00      	nop

080045d8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80045d8:	4808      	ldr	r0, [pc, #32]	; (80045fc <prvPortStartFirstTask+0x24>)
 80045da:	6800      	ldr	r0, [r0, #0]
 80045dc:	6800      	ldr	r0, [r0, #0]
 80045de:	f380 8808 	msr	MSP, r0
 80045e2:	f04f 0000 	mov.w	r0, #0
 80045e6:	f380 8814 	msr	CONTROL, r0
 80045ea:	b662      	cpsie	i
 80045ec:	b661      	cpsie	f
 80045ee:	f3bf 8f4f 	dsb	sy
 80045f2:	f3bf 8f6f 	isb	sy
 80045f6:	df00      	svc	0
 80045f8:	bf00      	nop
 80045fa:	0000      	.short	0x0000
 80045fc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004600:	bf00      	nop
 8004602:	bf00      	nop

08004604 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800460a:	4b46      	ldr	r3, [pc, #280]	; (8004724 <xPortStartScheduler+0x120>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a46      	ldr	r2, [pc, #280]	; (8004728 <xPortStartScheduler+0x124>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d10a      	bne.n	800462a <xPortStartScheduler+0x26>
        __asm volatile
 8004614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004618:	f383 8811 	msr	BASEPRI, r3
 800461c:	f3bf 8f6f 	isb	sy
 8004620:	f3bf 8f4f 	dsb	sy
 8004624:	613b      	str	r3, [r7, #16]
    }
 8004626:	bf00      	nop
 8004628:	e7fe      	b.n	8004628 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800462a:	4b3e      	ldr	r3, [pc, #248]	; (8004724 <xPortStartScheduler+0x120>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a3f      	ldr	r2, [pc, #252]	; (800472c <xPortStartScheduler+0x128>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d10a      	bne.n	800464a <xPortStartScheduler+0x46>
        __asm volatile
 8004634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004638:	f383 8811 	msr	BASEPRI, r3
 800463c:	f3bf 8f6f 	isb	sy
 8004640:	f3bf 8f4f 	dsb	sy
 8004644:	60fb      	str	r3, [r7, #12]
    }
 8004646:	bf00      	nop
 8004648:	e7fe      	b.n	8004648 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800464a:	4b39      	ldr	r3, [pc, #228]	; (8004730 <xPortStartScheduler+0x12c>)
 800464c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	b2db      	uxtb	r3, r3
 8004654:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	22ff      	movs	r2, #255	; 0xff
 800465a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	b2db      	uxtb	r3, r3
 8004662:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004664:	78fb      	ldrb	r3, [r7, #3]
 8004666:	b2db      	uxtb	r3, r3
 8004668:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800466c:	b2da      	uxtb	r2, r3
 800466e:	4b31      	ldr	r3, [pc, #196]	; (8004734 <xPortStartScheduler+0x130>)
 8004670:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004672:	4b31      	ldr	r3, [pc, #196]	; (8004738 <xPortStartScheduler+0x134>)
 8004674:	2207      	movs	r2, #7
 8004676:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004678:	e009      	b.n	800468e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800467a:	4b2f      	ldr	r3, [pc, #188]	; (8004738 <xPortStartScheduler+0x134>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	3b01      	subs	r3, #1
 8004680:	4a2d      	ldr	r2, [pc, #180]	; (8004738 <xPortStartScheduler+0x134>)
 8004682:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004684:	78fb      	ldrb	r3, [r7, #3]
 8004686:	b2db      	uxtb	r3, r3
 8004688:	005b      	lsls	r3, r3, #1
 800468a:	b2db      	uxtb	r3, r3
 800468c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800468e:	78fb      	ldrb	r3, [r7, #3]
 8004690:	b2db      	uxtb	r3, r3
 8004692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004696:	2b80      	cmp	r3, #128	; 0x80
 8004698:	d0ef      	beq.n	800467a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800469a:	4b27      	ldr	r3, [pc, #156]	; (8004738 <xPortStartScheduler+0x134>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f1c3 0307 	rsb	r3, r3, #7
 80046a2:	2b04      	cmp	r3, #4
 80046a4:	d00a      	beq.n	80046bc <xPortStartScheduler+0xb8>
        __asm volatile
 80046a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046aa:	f383 8811 	msr	BASEPRI, r3
 80046ae:	f3bf 8f6f 	isb	sy
 80046b2:	f3bf 8f4f 	dsb	sy
 80046b6:	60bb      	str	r3, [r7, #8]
    }
 80046b8:	bf00      	nop
 80046ba:	e7fe      	b.n	80046ba <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80046bc:	4b1e      	ldr	r3, [pc, #120]	; (8004738 <xPortStartScheduler+0x134>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	021b      	lsls	r3, r3, #8
 80046c2:	4a1d      	ldr	r2, [pc, #116]	; (8004738 <xPortStartScheduler+0x134>)
 80046c4:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80046c6:	4b1c      	ldr	r3, [pc, #112]	; (8004738 <xPortStartScheduler+0x134>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046ce:	4a1a      	ldr	r2, [pc, #104]	; (8004738 <xPortStartScheduler+0x134>)
 80046d0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	b2da      	uxtb	r2, r3
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80046da:	4b18      	ldr	r3, [pc, #96]	; (800473c <xPortStartScheduler+0x138>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a17      	ldr	r2, [pc, #92]	; (800473c <xPortStartScheduler+0x138>)
 80046e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80046e4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80046e6:	4b15      	ldr	r3, [pc, #84]	; (800473c <xPortStartScheduler+0x138>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a14      	ldr	r2, [pc, #80]	; (800473c <xPortStartScheduler+0x138>)
 80046ec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80046f0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80046f2:	f000 f8db 	bl	80048ac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80046f6:	4b12      	ldr	r3, [pc, #72]	; (8004740 <xPortStartScheduler+0x13c>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80046fc:	f000 f8fa 	bl	80048f4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004700:	4b10      	ldr	r3, [pc, #64]	; (8004744 <xPortStartScheduler+0x140>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a0f      	ldr	r2, [pc, #60]	; (8004744 <xPortStartScheduler+0x140>)
 8004706:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800470a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800470c:	f7ff ff64 	bl	80045d8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004710:	f7fe fee4 	bl	80034dc <vTaskSwitchContext>
    prvTaskExitError();
 8004714:	f7ff ff1c 	bl	8004550 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3718      	adds	r7, #24
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	e000ed00 	.word	0xe000ed00
 8004728:	410fc271 	.word	0x410fc271
 800472c:	410fc270 	.word	0x410fc270
 8004730:	e000e400 	.word	0xe000e400
 8004734:	20000208 	.word	0x20000208
 8004738:	2000020c 	.word	0x2000020c
 800473c:	e000ed20 	.word	0xe000ed20
 8004740:	20000010 	.word	0x20000010
 8004744:	e000ef34 	.word	0xe000ef34

08004748 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
        __asm volatile
 800474e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004752:	f383 8811 	msr	BASEPRI, r3
 8004756:	f3bf 8f6f 	isb	sy
 800475a:	f3bf 8f4f 	dsb	sy
 800475e:	607b      	str	r3, [r7, #4]
    }
 8004760:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004762:	4b0f      	ldr	r3, [pc, #60]	; (80047a0 <vPortEnterCritical+0x58>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	3301      	adds	r3, #1
 8004768:	4a0d      	ldr	r2, [pc, #52]	; (80047a0 <vPortEnterCritical+0x58>)
 800476a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800476c:	4b0c      	ldr	r3, [pc, #48]	; (80047a0 <vPortEnterCritical+0x58>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d10f      	bne.n	8004794 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004774:	4b0b      	ldr	r3, [pc, #44]	; (80047a4 <vPortEnterCritical+0x5c>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00a      	beq.n	8004794 <vPortEnterCritical+0x4c>
        __asm volatile
 800477e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004782:	f383 8811 	msr	BASEPRI, r3
 8004786:	f3bf 8f6f 	isb	sy
 800478a:	f3bf 8f4f 	dsb	sy
 800478e:	603b      	str	r3, [r7, #0]
    }
 8004790:	bf00      	nop
 8004792:	e7fe      	b.n	8004792 <vPortEnterCritical+0x4a>
    }
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr
 80047a0:	20000010 	.word	0x20000010
 80047a4:	e000ed04 	.word	0xe000ed04

080047a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80047ae:	4b12      	ldr	r3, [pc, #72]	; (80047f8 <vPortExitCritical+0x50>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10a      	bne.n	80047cc <vPortExitCritical+0x24>
        __asm volatile
 80047b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ba:	f383 8811 	msr	BASEPRI, r3
 80047be:	f3bf 8f6f 	isb	sy
 80047c2:	f3bf 8f4f 	dsb	sy
 80047c6:	607b      	str	r3, [r7, #4]
    }
 80047c8:	bf00      	nop
 80047ca:	e7fe      	b.n	80047ca <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80047cc:	4b0a      	ldr	r3, [pc, #40]	; (80047f8 <vPortExitCritical+0x50>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	3b01      	subs	r3, #1
 80047d2:	4a09      	ldr	r2, [pc, #36]	; (80047f8 <vPortExitCritical+0x50>)
 80047d4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80047d6:	4b08      	ldr	r3, [pc, #32]	; (80047f8 <vPortExitCritical+0x50>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d105      	bne.n	80047ea <vPortExitCritical+0x42>
 80047de:	2300      	movs	r3, #0
 80047e0:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80047e8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80047ea:	bf00      	nop
 80047ec:	370c      	adds	r7, #12
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	20000010 	.word	0x20000010
 80047fc:	00000000 	.word	0x00000000

08004800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004800:	f3ef 8009 	mrs	r0, PSP
 8004804:	f3bf 8f6f 	isb	sy
 8004808:	4b15      	ldr	r3, [pc, #84]	; (8004860 <pxCurrentTCBConst>)
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	f01e 0f10 	tst.w	lr, #16
 8004810:	bf08      	it	eq
 8004812:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004816:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800481a:	6010      	str	r0, [r2, #0]
 800481c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004820:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004824:	f380 8811 	msr	BASEPRI, r0
 8004828:	f3bf 8f4f 	dsb	sy
 800482c:	f3bf 8f6f 	isb	sy
 8004830:	f7fe fe54 	bl	80034dc <vTaskSwitchContext>
 8004834:	f04f 0000 	mov.w	r0, #0
 8004838:	f380 8811 	msr	BASEPRI, r0
 800483c:	bc09      	pop	{r0, r3}
 800483e:	6819      	ldr	r1, [r3, #0]
 8004840:	6808      	ldr	r0, [r1, #0]
 8004842:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004846:	f01e 0f10 	tst.w	lr, #16
 800484a:	bf08      	it	eq
 800484c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004850:	f380 8809 	msr	PSP, r0
 8004854:	f3bf 8f6f 	isb	sy
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	f3af 8000 	nop.w

08004860 <pxCurrentTCBConst>:
 8004860:	200000c8 	.word	0x200000c8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004864:	bf00      	nop
 8004866:	bf00      	nop

08004868 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
        __asm volatile
 800486e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004872:	f383 8811 	msr	BASEPRI, r3
 8004876:	f3bf 8f6f 	isb	sy
 800487a:	f3bf 8f4f 	dsb	sy
 800487e:	607b      	str	r3, [r7, #4]
    }
 8004880:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004882:	f7fe fd15 	bl	80032b0 <xTaskIncrementTick>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d003      	beq.n	8004894 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800488c:	4b06      	ldr	r3, [pc, #24]	; (80048a8 <SysTick_Handler+0x40>)
 800488e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004892:	601a      	str	r2, [r3, #0]
 8004894:	2300      	movs	r3, #0
 8004896:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	f383 8811 	msr	BASEPRI, r3
    }
 800489e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80048a0:	bf00      	nop
 80048a2:	3708      	adds	r7, #8
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	e000ed04 	.word	0xe000ed04

080048ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80048ac:	b480      	push	{r7}
 80048ae:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80048b0:	4b0b      	ldr	r3, [pc, #44]	; (80048e0 <vPortSetupTimerInterrupt+0x34>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80048b6:	4b0b      	ldr	r3, [pc, #44]	; (80048e4 <vPortSetupTimerInterrupt+0x38>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80048bc:	4b0a      	ldr	r3, [pc, #40]	; (80048e8 <vPortSetupTimerInterrupt+0x3c>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a0a      	ldr	r2, [pc, #40]	; (80048ec <vPortSetupTimerInterrupt+0x40>)
 80048c2:	fba2 2303 	umull	r2, r3, r2, r3
 80048c6:	099b      	lsrs	r3, r3, #6
 80048c8:	4a09      	ldr	r2, [pc, #36]	; (80048f0 <vPortSetupTimerInterrupt+0x44>)
 80048ca:	3b01      	subs	r3, #1
 80048cc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80048ce:	4b04      	ldr	r3, [pc, #16]	; (80048e0 <vPortSetupTimerInterrupt+0x34>)
 80048d0:	2207      	movs	r2, #7
 80048d2:	601a      	str	r2, [r3, #0]
}
 80048d4:	bf00      	nop
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	e000e010 	.word	0xe000e010
 80048e4:	e000e018 	.word	0xe000e018
 80048e8:	20000000 	.word	0x20000000
 80048ec:	10624dd3 	.word	0x10624dd3
 80048f0:	e000e014 	.word	0xe000e014

080048f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80048f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004904 <vPortEnableVFP+0x10>
 80048f8:	6801      	ldr	r1, [r0, #0]
 80048fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80048fe:	6001      	str	r1, [r0, #0]
 8004900:	4770      	bx	lr
 8004902:	0000      	.short	0x0000
 8004904:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004908:	bf00      	nop
 800490a:	bf00      	nop

0800490c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b08a      	sub	sp, #40	; 0x28
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004914:	2300      	movs	r3, #0
 8004916:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004918:	f7fe fbb0 	bl	800307c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800491c:	4b53      	ldr	r3, [pc, #332]	; (8004a6c <pvPortMalloc+0x160>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d101      	bne.n	8004928 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004924:	f000 f908 	bl	8004b38 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d012      	beq.n	8004954 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800492e:	2208      	movs	r2, #8
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f003 0307 	and.w	r3, r3, #7
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	3308      	adds	r3, #8
 800493a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	43db      	mvns	r3, r3
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	429a      	cmp	r2, r3
 8004944:	d804      	bhi.n	8004950 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	4413      	add	r3, r2
 800494c:	607b      	str	r3, [r7, #4]
 800494e:	e001      	b.n	8004954 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004950:	2300      	movs	r3, #0
 8004952:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	db70      	blt.n	8004a3c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d06d      	beq.n	8004a3c <pvPortMalloc+0x130>
 8004960:	4b43      	ldr	r3, [pc, #268]	; (8004a70 <pvPortMalloc+0x164>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	429a      	cmp	r2, r3
 8004968:	d868      	bhi.n	8004a3c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800496a:	4b42      	ldr	r3, [pc, #264]	; (8004a74 <pvPortMalloc+0x168>)
 800496c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800496e:	4b41      	ldr	r3, [pc, #260]	; (8004a74 <pvPortMalloc+0x168>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004974:	e004      	b.n	8004980 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8004976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004978:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800497a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	429a      	cmp	r2, r3
 8004988:	d903      	bls.n	8004992 <pvPortMalloc+0x86>
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1f1      	bne.n	8004976 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004992:	4b36      	ldr	r3, [pc, #216]	; (8004a6c <pvPortMalloc+0x160>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004998:	429a      	cmp	r2, r3
 800499a:	d04f      	beq.n	8004a3c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800499c:	6a3b      	ldr	r3, [r7, #32]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2208      	movs	r2, #8
 80049a2:	4413      	add	r3, r2
 80049a4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80049a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	6a3b      	ldr	r3, [r7, #32]
 80049ac:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80049ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b0:	685a      	ldr	r2, [r3, #4]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	1ad2      	subs	r2, r2, r3
 80049b6:	2308      	movs	r3, #8
 80049b8:	005b      	lsls	r3, r3, #1
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d91f      	bls.n	80049fe <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80049be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4413      	add	r3, r2
 80049c4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	f003 0307 	and.w	r3, r3, #7
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00a      	beq.n	80049e6 <pvPortMalloc+0xda>
        __asm volatile
 80049d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d4:	f383 8811 	msr	BASEPRI, r3
 80049d8:	f3bf 8f6f 	isb	sy
 80049dc:	f3bf 8f4f 	dsb	sy
 80049e0:	613b      	str	r3, [r7, #16]
    }
 80049e2:	bf00      	nop
 80049e4:	e7fe      	b.n	80049e4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80049e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e8:	685a      	ldr	r2, [r3, #4]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	1ad2      	subs	r2, r2, r3
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80049f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80049f8:	6978      	ldr	r0, [r7, #20]
 80049fa:	f000 f8f9 	bl	8004bf0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80049fe:	4b1c      	ldr	r3, [pc, #112]	; (8004a70 <pvPortMalloc+0x164>)
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	4a19      	ldr	r2, [pc, #100]	; (8004a70 <pvPortMalloc+0x164>)
 8004a0a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004a0c:	4b18      	ldr	r3, [pc, #96]	; (8004a70 <pvPortMalloc+0x164>)
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	4b19      	ldr	r3, [pc, #100]	; (8004a78 <pvPortMalloc+0x16c>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d203      	bcs.n	8004a20 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004a18:	4b15      	ldr	r3, [pc, #84]	; (8004a70 <pvPortMalloc+0x164>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a16      	ldr	r2, [pc, #88]	; (8004a78 <pvPortMalloc+0x16c>)
 8004a1e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2e:	2200      	movs	r2, #0
 8004a30:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004a32:	4b12      	ldr	r3, [pc, #72]	; (8004a7c <pvPortMalloc+0x170>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	3301      	adds	r3, #1
 8004a38:	4a10      	ldr	r2, [pc, #64]	; (8004a7c <pvPortMalloc+0x170>)
 8004a3a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004a3c:	f7fe fb2c 	bl	8003098 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	f003 0307 	and.w	r3, r3, #7
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00a      	beq.n	8004a60 <pvPortMalloc+0x154>
        __asm volatile
 8004a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a4e:	f383 8811 	msr	BASEPRI, r3
 8004a52:	f3bf 8f6f 	isb	sy
 8004a56:	f3bf 8f4f 	dsb	sy
 8004a5a:	60fb      	str	r3, [r7, #12]
    }
 8004a5c:	bf00      	nop
 8004a5e:	e7fe      	b.n	8004a5e <pvPortMalloc+0x152>
    return pvReturn;
 8004a60:	69fb      	ldr	r3, [r7, #28]
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3728      	adds	r7, #40	; 0x28
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	20012e18 	.word	0x20012e18
 8004a70:	20012e1c 	.word	0x20012e1c
 8004a74:	20012e10 	.word	0x20012e10
 8004a78:	20012e20 	.word	0x20012e20
 8004a7c:	20012e24 	.word	0x20012e24

08004a80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b086      	sub	sp, #24
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d049      	beq.n	8004b26 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004a92:	2308      	movs	r3, #8
 8004a94:	425b      	negs	r3, r3
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	4413      	add	r3, r2
 8004a9a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	db0a      	blt.n	8004abe <vPortFree+0x3e>
        __asm volatile
 8004aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aac:	f383 8811 	msr	BASEPRI, r3
 8004ab0:	f3bf 8f6f 	isb	sy
 8004ab4:	f3bf 8f4f 	dsb	sy
 8004ab8:	60fb      	str	r3, [r7, #12]
    }
 8004aba:	bf00      	nop
 8004abc:	e7fe      	b.n	8004abc <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00a      	beq.n	8004adc <vPortFree+0x5c>
        __asm volatile
 8004ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aca:	f383 8811 	msr	BASEPRI, r3
 8004ace:	f3bf 8f6f 	isb	sy
 8004ad2:	f3bf 8f4f 	dsb	sy
 8004ad6:	60bb      	str	r3, [r7, #8]
    }
 8004ad8:	bf00      	nop
 8004ada:	e7fe      	b.n	8004ada <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	0fdb      	lsrs	r3, r3, #31
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d01c      	beq.n	8004b26 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d118      	bne.n	8004b26 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004b00:	f7fe fabc 	bl	800307c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	685a      	ldr	r2, [r3, #4]
 8004b08:	4b09      	ldr	r3, [pc, #36]	; (8004b30 <vPortFree+0xb0>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	4a08      	ldr	r2, [pc, #32]	; (8004b30 <vPortFree+0xb0>)
 8004b10:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004b12:	6938      	ldr	r0, [r7, #16]
 8004b14:	f000 f86c 	bl	8004bf0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004b18:	4b06      	ldr	r3, [pc, #24]	; (8004b34 <vPortFree+0xb4>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	4a05      	ldr	r2, [pc, #20]	; (8004b34 <vPortFree+0xb4>)
 8004b20:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004b22:	f7fe fab9 	bl	8003098 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004b26:	bf00      	nop
 8004b28:	3718      	adds	r7, #24
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	20012e1c 	.word	0x20012e1c
 8004b34:	20012e28 	.word	0x20012e28

08004b38 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004b3e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004b42:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004b44:	4b25      	ldr	r3, [pc, #148]	; (8004bdc <prvHeapInit+0xa4>)
 8004b46:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f003 0307 	and.w	r3, r3, #7
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00c      	beq.n	8004b6c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	3307      	adds	r3, #7
 8004b56:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f023 0307 	bic.w	r3, r3, #7
 8004b5e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004b60:	68ba      	ldr	r2, [r7, #8]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	4a1d      	ldr	r2, [pc, #116]	; (8004bdc <prvHeapInit+0xa4>)
 8004b68:	4413      	add	r3, r2
 8004b6a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004b70:	4a1b      	ldr	r2, [pc, #108]	; (8004be0 <prvHeapInit+0xa8>)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004b76:	4b1a      	ldr	r3, [pc, #104]	; (8004be0 <prvHeapInit+0xa8>)
 8004b78:	2200      	movs	r2, #0
 8004b7a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	68ba      	ldr	r2, [r7, #8]
 8004b80:	4413      	add	r3, r2
 8004b82:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004b84:	2208      	movs	r2, #8
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	1a9b      	subs	r3, r3, r2
 8004b8a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f023 0307 	bic.w	r3, r3, #7
 8004b92:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	4a13      	ldr	r2, [pc, #76]	; (8004be4 <prvHeapInit+0xac>)
 8004b98:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004b9a:	4b12      	ldr	r3, [pc, #72]	; (8004be4 <prvHeapInit+0xac>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004ba2:	4b10      	ldr	r3, [pc, #64]	; (8004be4 <prvHeapInit+0xac>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	1ad2      	subs	r2, r2, r3
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004bb8:	4b0a      	ldr	r3, [pc, #40]	; (8004be4 <prvHeapInit+0xac>)
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	4a08      	ldr	r2, [pc, #32]	; (8004be8 <prvHeapInit+0xb0>)
 8004bc6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	4a07      	ldr	r2, [pc, #28]	; (8004bec <prvHeapInit+0xb4>)
 8004bce:	6013      	str	r3, [r2, #0]
}
 8004bd0:	bf00      	nop
 8004bd2:	3714      	adds	r7, #20
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr
 8004bdc:	20000210 	.word	0x20000210
 8004be0:	20012e10 	.word	0x20012e10
 8004be4:	20012e18 	.word	0x20012e18
 8004be8:	20012e20 	.word	0x20012e20
 8004bec:	20012e1c 	.word	0x20012e1c

08004bf0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b085      	sub	sp, #20
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004bf8:	4b28      	ldr	r3, [pc, #160]	; (8004c9c <prvInsertBlockIntoFreeList+0xac>)
 8004bfa:	60fb      	str	r3, [r7, #12]
 8004bfc:	e002      	b.n	8004c04 <prvInsertBlockIntoFreeList+0x14>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	60fb      	str	r3, [r7, #12]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d8f7      	bhi.n	8004bfe <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	68ba      	ldr	r2, [r7, #8]
 8004c18:	4413      	add	r3, r2
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d108      	bne.n	8004c32 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	685a      	ldr	r2, [r3, #4]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	441a      	add	r2, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	68ba      	ldr	r2, [r7, #8]
 8004c3c:	441a      	add	r2, r3
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d118      	bne.n	8004c78 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	4b15      	ldr	r3, [pc, #84]	; (8004ca0 <prvInsertBlockIntoFreeList+0xb0>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d00d      	beq.n	8004c6e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685a      	ldr	r2, [r3, #4]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	441a      	add	r2, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	601a      	str	r2, [r3, #0]
 8004c6c:	e008      	b.n	8004c80 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004c6e:	4b0c      	ldr	r3, [pc, #48]	; (8004ca0 <prvInsertBlockIntoFreeList+0xb0>)
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	601a      	str	r2, [r3, #0]
 8004c76:	e003      	b.n	8004c80 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d002      	beq.n	8004c8e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004c8e:	bf00      	nop
 8004c90:	3714      	adds	r7, #20
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	20012e10 	.word	0x20012e10
 8004ca0:	20012e18 	.word	0x20012e18

08004ca4 <__libc_init_array>:
 8004ca4:	b570      	push	{r4, r5, r6, lr}
 8004ca6:	4d0d      	ldr	r5, [pc, #52]	; (8004cdc <__libc_init_array+0x38>)
 8004ca8:	4c0d      	ldr	r4, [pc, #52]	; (8004ce0 <__libc_init_array+0x3c>)
 8004caa:	1b64      	subs	r4, r4, r5
 8004cac:	10a4      	asrs	r4, r4, #2
 8004cae:	2600      	movs	r6, #0
 8004cb0:	42a6      	cmp	r6, r4
 8004cb2:	d109      	bne.n	8004cc8 <__libc_init_array+0x24>
 8004cb4:	4d0b      	ldr	r5, [pc, #44]	; (8004ce4 <__libc_init_array+0x40>)
 8004cb6:	4c0c      	ldr	r4, [pc, #48]	; (8004ce8 <__libc_init_array+0x44>)
 8004cb8:	f000 f82e 	bl	8004d18 <_init>
 8004cbc:	1b64      	subs	r4, r4, r5
 8004cbe:	10a4      	asrs	r4, r4, #2
 8004cc0:	2600      	movs	r6, #0
 8004cc2:	42a6      	cmp	r6, r4
 8004cc4:	d105      	bne.n	8004cd2 <__libc_init_array+0x2e>
 8004cc6:	bd70      	pop	{r4, r5, r6, pc}
 8004cc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ccc:	4798      	blx	r3
 8004cce:	3601      	adds	r6, #1
 8004cd0:	e7ee      	b.n	8004cb0 <__libc_init_array+0xc>
 8004cd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cd6:	4798      	blx	r3
 8004cd8:	3601      	adds	r6, #1
 8004cda:	e7f2      	b.n	8004cc2 <__libc_init_array+0x1e>
 8004cdc:	08004d80 	.word	0x08004d80
 8004ce0:	08004d80 	.word	0x08004d80
 8004ce4:	08004d80 	.word	0x08004d80
 8004ce8:	08004d84 	.word	0x08004d84

08004cec <memcpy>:
 8004cec:	440a      	add	r2, r1
 8004cee:	4291      	cmp	r1, r2
 8004cf0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004cf4:	d100      	bne.n	8004cf8 <memcpy+0xc>
 8004cf6:	4770      	bx	lr
 8004cf8:	b510      	push	{r4, lr}
 8004cfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d02:	4291      	cmp	r1, r2
 8004d04:	d1f9      	bne.n	8004cfa <memcpy+0xe>
 8004d06:	bd10      	pop	{r4, pc}

08004d08 <memset>:
 8004d08:	4402      	add	r2, r0
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d100      	bne.n	8004d12 <memset+0xa>
 8004d10:	4770      	bx	lr
 8004d12:	f803 1b01 	strb.w	r1, [r3], #1
 8004d16:	e7f9      	b.n	8004d0c <memset+0x4>

08004d18 <_init>:
 8004d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d1a:	bf00      	nop
 8004d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d1e:	bc08      	pop	{r3}
 8004d20:	469e      	mov	lr, r3
 8004d22:	4770      	bx	lr

08004d24 <_fini>:
 8004d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d26:	bf00      	nop
 8004d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d2a:	bc08      	pop	{r3}
 8004d2c:	469e      	mov	lr, r3
 8004d2e:	4770      	bx	lr
