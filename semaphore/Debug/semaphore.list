
semaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005150  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080052e0  080052e0  000152e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005328  08005328  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08005328  08005328  00015328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005330  08005330  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005330  08005330  00015330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005334  08005334  00015334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005338  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00012e58  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012e6c  20012e6c  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f77b  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002648  00000000  00000000  0002f7bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000eb0  00000000  00000000  00031e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d98  00000000  00000000  00032cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f870  00000000  00000000  00033a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001000d  00000000  00000000  000532c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c62a0  00000000  00000000  000632cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012956d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003ce0  00000000  00000000  001295c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080052c8 	.word	0x080052c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	080052c8 	.word	0x080052c8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <pwm>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */


void pwm(void *pvParameters) {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]

	for (;;) {


				HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 80004dc:	2100      	movs	r1, #0
 80004de:	4816      	ldr	r0, [pc, #88]	; (8000538 <pwm+0x64>)
 80004e0:	f001 fb56 	bl	8001b90 <HAL_TIM_PWM_Start>


					TIM12->CCR1 = 5000;
 80004e4:	4b15      	ldr	r3, [pc, #84]	; (800053c <pwm+0x68>)
 80004e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80004ea:	635a      	str	r2, [r3, #52]	; 0x34
					vTaskDelay(pdMS_TO_TICKS(100));
 80004ec:	2064      	movs	r0, #100	; 0x64
 80004ee:	f003 f815 	bl	800351c <vTaskDelay>
					TIM12->CCR1 = 3000;
 80004f2:	4b12      	ldr	r3, [pc, #72]	; (800053c <pwm+0x68>)
 80004f4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80004f8:	635a      	str	r2, [r3, #52]	; 0x34
					vTaskDelay(pdMS_TO_TICKS(100));
 80004fa:	2064      	movs	r0, #100	; 0x64
 80004fc:	f003 f80e 	bl	800351c <vTaskDelay>
					TIM12->CCR1 = 1500;
 8000500:	4b0e      	ldr	r3, [pc, #56]	; (800053c <pwm+0x68>)
 8000502:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000506:	635a      	str	r2, [r3, #52]	; 0x34
					vTaskDelay(pdMS_TO_TICKS(100));
 8000508:	2064      	movs	r0, #100	; 0x64
 800050a:	f003 f807 	bl	800351c <vTaskDelay>
					TIM12->CCR1 = 800;
 800050e:	4b0b      	ldr	r3, [pc, #44]	; (800053c <pwm+0x68>)
 8000510:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000514:	635a      	str	r2, [r3, #52]	; 0x34
					vTaskDelay(pdMS_TO_TICKS(100));
 8000516:	2064      	movs	r0, #100	; 0x64
 8000518:	f003 f800 	bl	800351c <vTaskDelay>
					TIM12->CCR1 = 200;
 800051c:	4b07      	ldr	r3, [pc, #28]	; (800053c <pwm+0x68>)
 800051e:	22c8      	movs	r2, #200	; 0xc8
 8000520:	635a      	str	r2, [r3, #52]	; 0x34
					vTaskDelay(pdMS_TO_TICKS(100));
 8000522:	2064      	movs	r0, #100	; 0x64
 8000524:	f002 fffa 	bl	800351c <vTaskDelay>


				xSemaphoreGive(xSemaphore);
 8000528:	4b05      	ldr	r3, [pc, #20]	; (8000540 <pwm+0x6c>)
 800052a:	6818      	ldr	r0, [r3, #0]
 800052c:	2300      	movs	r3, #0
 800052e:	2200      	movs	r2, #0
 8000530:	2100      	movs	r1, #0
 8000532:	f002 fa03 	bl	800293c <xQueueGenericSend>
				HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8000536:	e7d1      	b.n	80004dc <pwm+0x8>
 8000538:	20000034 	.word	0x20000034
 800053c:	40001800 	.word	0x40001800
 8000540:	20000030 	.word	0x20000030

08000544 <blink>:
			}
	vTaskDelay(pdMS_TO_TICKS(500));
}

void blink(void *pvParameters) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b088      	sub	sp, #32
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800054c:	f107 030c 	add.w	r3, r7, #12
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]
//	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
//
//	GPIOB->MODER|=(0X1<<28);
	for (;;) {
		if (xSemaphore != NULL) {
 800055c:	4b0f      	ldr	r3, [pc, #60]	; (800059c <blink+0x58>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d0fb      	beq.n	800055c <blink+0x18>
			/* See if we can obtain the semaphore. If the semaphore is not
			 available wait 10 ticks to see if it becomes free. */
			if ( xSemaphoreTake( xSemaphore, ( TickType_t ) 10 ) == pdTRUE) {
 8000564:	4b0d      	ldr	r3, [pc, #52]	; (800059c <blink+0x58>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	210a      	movs	r1, #10
 800056a:	4618      	mov	r0, r3
 800056c:	f002 fbc4 	bl	8002cf8 <xQueueSemaphoreTake>
 8000570:	4603      	mov	r3, r0
 8000572:	2b01      	cmp	r3, #1
 8000574:	d1f2      	bne.n	800055c <blink+0x18>
				/* We were able to obtain the semaphore and can now access the
				 shared resource. */
				//MX_GPIO_Init();
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8000576:	2200      	movs	r2, #0
 8000578:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800057c:	4808      	ldr	r0, [pc, #32]	; (80005a0 <blink+0x5c>)
 800057e:	f000 fd5d 	bl	800103c <HAL_GPIO_WritePin>
				vTaskDelay(pdMS_TO_TICKS(100));
 8000582:	2064      	movs	r0, #100	; 0x64
 8000584:	f002 ffca 	bl	800351c <vTaskDelay>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8000588:	2201      	movs	r2, #1
 800058a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800058e:	4804      	ldr	r0, [pc, #16]	; (80005a0 <blink+0x5c>)
 8000590:	f000 fd54 	bl	800103c <HAL_GPIO_WritePin>
				vTaskDelay(pdMS_TO_TICKS(100));
 8000594:	2064      	movs	r0, #100	; 0x64
 8000596:	f002 ffc1 	bl	800351c <vTaskDelay>
		if (xSemaphore != NULL) {
 800059a:	e7df      	b.n	800055c <blink+0x18>
 800059c:	20000030 	.word	0x20000030
 80005a0:	40020400 	.word	0x40020400

080005a4 <main>:

		}
	}
}

int main() {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af02      	add	r7, sp, #8
	HAL_Init();
 80005aa:	f000 fa87 	bl	8000abc <HAL_Init>
	SystemClock_Config();
 80005ae:	f000 f839 	bl	8000624 <SystemClock_Config>
	MX_GPIO_Init();
 80005b2:	f000 f8db 	bl	800076c <MX_GPIO_Init>
	MX_TIM12_Init();
 80005b6:	f000 f893 	bl	80006e0 <MX_TIM12_Init>

	xSemaphore = xSemaphoreCreateBinary();
 80005ba:	2203      	movs	r2, #3
 80005bc:	2100      	movs	r1, #0
 80005be:	2001      	movs	r0, #1
 80005c0:	f002 f94a 	bl	8002858 <xQueueGenericCreate>
 80005c4:	4603      	mov	r3, r0
 80005c6:	4a12      	ldr	r2, [pc, #72]	; (8000610 <main+0x6c>)
 80005c8:	6013      	str	r3, [r2, #0]

	if (xSemaphore != NULL) {
 80005ca:	4b11      	ldr	r3, [pc, #68]	; (8000610 <main+0x6c>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d006      	beq.n	80005e0 <main+0x3c>
		xSemaphoreGive(xSemaphore);  // Make the semaphore available initially
 80005d2:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <main+0x6c>)
 80005d4:	6818      	ldr	r0, [r3, #0]
 80005d6:	2300      	movs	r3, #0
 80005d8:	2200      	movs	r2, #0
 80005da:	2100      	movs	r1, #0
 80005dc:	f002 f9ae 	bl	800293c <xQueueGenericSend>
	}

	xTaskCreate(pwm, "PWM_Task", 128, NULL, 2, NULL);
 80005e0:	2300      	movs	r3, #0
 80005e2:	9301      	str	r3, [sp, #4]
 80005e4:	2302      	movs	r3, #2
 80005e6:	9300      	str	r3, [sp, #0]
 80005e8:	2300      	movs	r3, #0
 80005ea:	2280      	movs	r2, #128	; 0x80
 80005ec:	4909      	ldr	r1, [pc, #36]	; (8000614 <main+0x70>)
 80005ee:	480a      	ldr	r0, [pc, #40]	; (8000618 <main+0x74>)
 80005f0:	f002 fe2a 	bl	8003248 <xTaskCreate>
	xTaskCreate(blink, "Blink_Task", 128, NULL, 1, NULL);
 80005f4:	2300      	movs	r3, #0
 80005f6:	9301      	str	r3, [sp, #4]
 80005f8:	2301      	movs	r3, #1
 80005fa:	9300      	str	r3, [sp, #0]
 80005fc:	2300      	movs	r3, #0
 80005fe:	2280      	movs	r2, #128	; 0x80
 8000600:	4906      	ldr	r1, [pc, #24]	; (800061c <main+0x78>)
 8000602:	4807      	ldr	r0, [pc, #28]	; (8000620 <main+0x7c>)
 8000604:	f002 fe20 	bl	8003248 <xTaskCreate>

	vTaskStartScheduler();
 8000608:	f002 ffbc 	bl	8003584 <vTaskStartScheduler>

	while (1) {
 800060c:	e7fe      	b.n	800060c <main+0x68>
 800060e:	bf00      	nop
 8000610:	20000030 	.word	0x20000030
 8000614:	080052e0 	.word	0x080052e0
 8000618:	080004d5 	.word	0x080004d5
 800061c:	080052ec 	.word	0x080052ec
 8000620:	08000545 	.word	0x08000545

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b094      	sub	sp, #80	; 0x50
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 0320 	add.w	r3, r7, #32
 800062e:	2230      	movs	r2, #48	; 0x30
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f004 fe40 	bl	80052b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000648:	2300      	movs	r3, #0
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	4b22      	ldr	r3, [pc, #136]	; (80006d8 <SystemClock_Config+0xb4>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	4a21      	ldr	r2, [pc, #132]	; (80006d8 <SystemClock_Config+0xb4>)
 8000652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000656:	6413      	str	r3, [r2, #64]	; 0x40
 8000658:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <SystemClock_Config+0xb4>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000660:	60bb      	str	r3, [r7, #8]
 8000662:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000664:	2300      	movs	r3, #0
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SystemClock_Config+0xb8>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a1b      	ldr	r2, [pc, #108]	; (80006dc <SystemClock_Config+0xb8>)
 800066e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000672:	6013      	str	r3, [r2, #0]
 8000674:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemClock_Config+0xb8>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000680:	2302      	movs	r3, #2
 8000682:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000684:	2301      	movs	r3, #1
 8000686:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000688:	2310      	movs	r3, #16
 800068a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800068c:	2300      	movs	r3, #0
 800068e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000690:	f107 0320 	add.w	r3, r7, #32
 8000694:	4618      	mov	r0, r3
 8000696:	f000 fceb 	bl	8001070 <HAL_RCC_OscConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006a0:	f000 f8aa 	bl	80007f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a4:	230f      	movs	r3, #15
 80006a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006a8:	2300      	movs	r3, #0
 80006aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 ff4e 	bl	8001560 <HAL_RCC_ClockConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006ca:	f000 f895 	bl	80007f8 <Error_Handler>
  }
}
 80006ce:	bf00      	nop
 80006d0:	3750      	adds	r7, #80	; 0x50
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40007000 	.word	0x40007000

080006e0 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]
 80006f4:	615a      	str	r2, [r3, #20]
 80006f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80006f8:	4b1a      	ldr	r3, [pc, #104]	; (8000764 <MX_TIM12_Init+0x84>)
 80006fa:	4a1b      	ldr	r2, [pc, #108]	; (8000768 <MX_TIM12_Init+0x88>)
 80006fc:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 1600-1;
 80006fe:	4b19      	ldr	r3, [pc, #100]	; (8000764 <MX_TIM12_Init+0x84>)
 8000700:	f240 623f 	movw	r2, #1599	; 0x63f
 8000704:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000706:	4b17      	ldr	r3, [pc, #92]	; (8000764 <MX_TIM12_Init+0x84>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 10000-1;
 800070c:	4b15      	ldr	r3, [pc, #84]	; (8000764 <MX_TIM12_Init+0x84>)
 800070e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000712:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000714:	4b13      	ldr	r3, [pc, #76]	; (8000764 <MX_TIM12_Init+0x84>)
 8000716:	2200      	movs	r2, #0
 8000718:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800071a:	4b12      	ldr	r3, [pc, #72]	; (8000764 <MX_TIM12_Init+0x84>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000720:	4810      	ldr	r0, [pc, #64]	; (8000764 <MX_TIM12_Init+0x84>)
 8000722:	f001 f9e5 	bl	8001af0 <HAL_TIM_PWM_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_TIM12_Init+0x50>
  {
    Error_Handler();
 800072c:	f000 f864 	bl	80007f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000730:	2360      	movs	r3, #96	; 0x60
 8000732:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	2200      	movs	r2, #0
 8000744:	4619      	mov	r1, r3
 8000746:	4807      	ldr	r0, [pc, #28]	; (8000764 <MX_TIM12_Init+0x84>)
 8000748:	f001 fbf2 	bl	8001f30 <HAL_TIM_PWM_ConfigChannel>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_TIM12_Init+0x76>
  {
    Error_Handler();
 8000752:	f000 f851 	bl	80007f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8000756:	4803      	ldr	r0, [pc, #12]	; (8000764 <MX_TIM12_Init+0x84>)
 8000758:	f000 f89e 	bl	8000898 <HAL_TIM_MspPostInit>

}
 800075c:	bf00      	nop
 800075e:	3720      	adds	r7, #32
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20000034 	.word	0x20000034
 8000768:	40001800 	.word	0x40001800

0800076c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
 800077e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000780:	2300      	movs	r3, #0
 8000782:	603b      	str	r3, [r7, #0]
 8000784:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_GPIO_Init+0x60>)
 8000786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000788:	4a10      	ldr	r2, [pc, #64]	; (80007cc <MX_GPIO_Init+0x60>)
 800078a:	f043 0302 	orr.w	r3, r3, #2
 800078e:	6313      	str	r3, [r2, #48]	; 0x30
 8000790:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_GPIO_Init+0x60>)
 8000792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000794:	f003 0302 	and.w	r3, r3, #2
 8000798:	603b      	str	r3, [r7, #0]
 800079a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007a2:	480b      	ldr	r0, [pc, #44]	; (80007d0 <MX_GPIO_Init+0x64>)
 80007a4:	f000 fc4a 	bl	800103c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ae:	2301      	movs	r3, #1
 80007b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b6:	2300      	movs	r3, #0
 80007b8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	4619      	mov	r1, r3
 80007be:	4804      	ldr	r0, [pc, #16]	; (80007d0 <MX_GPIO_Init+0x64>)
 80007c0:	f000 faa0 	bl	8000d04 <HAL_GPIO_Init>

}
 80007c4:	bf00      	nop
 80007c6:	3718      	adds	r7, #24
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40020400 	.word	0x40020400

080007d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a04      	ldr	r2, [pc, #16]	; (80007f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d101      	bne.n	80007ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007e6:	f000 f98b 	bl	8000b00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40001000 	.word	0x40001000

080007f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007fc:	b672      	cpsid	i
}
 80007fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000800:	e7fe      	b.n	8000800 <Error_Handler+0x8>
	...

08000804 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	4b10      	ldr	r3, [pc, #64]	; (8000850 <HAL_MspInit+0x4c>)
 8000810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000812:	4a0f      	ldr	r2, [pc, #60]	; (8000850 <HAL_MspInit+0x4c>)
 8000814:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000818:	6453      	str	r3, [r2, #68]	; 0x44
 800081a:	4b0d      	ldr	r3, [pc, #52]	; (8000850 <HAL_MspInit+0x4c>)
 800081c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	603b      	str	r3, [r7, #0]
 800082a:	4b09      	ldr	r3, [pc, #36]	; (8000850 <HAL_MspInit+0x4c>)
 800082c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082e:	4a08      	ldr	r2, [pc, #32]	; (8000850 <HAL_MspInit+0x4c>)
 8000830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000834:	6413      	str	r3, [r2, #64]	; 0x40
 8000836:	4b06      	ldr	r3, [pc, #24]	; (8000850 <HAL_MspInit+0x4c>)
 8000838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000842:	bf00      	nop
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	40023800 	.word	0x40023800

08000854 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000854:	b480      	push	{r7}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a0b      	ldr	r2, [pc, #44]	; (8000890 <HAL_TIM_PWM_MspInit+0x3c>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d10d      	bne.n	8000882 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <HAL_TIM_PWM_MspInit+0x40>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086e:	4a09      	ldr	r2, [pc, #36]	; (8000894 <HAL_TIM_PWM_MspInit+0x40>)
 8000870:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000874:	6413      	str	r3, [r2, #64]	; 0x40
 8000876:	4b07      	ldr	r3, [pc, #28]	; (8000894 <HAL_TIM_PWM_MspInit+0x40>)
 8000878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8000882:	bf00      	nop
 8000884:	3714      	adds	r7, #20
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	40001800 	.word	0x40001800
 8000894:	40023800 	.word	0x40023800

08000898 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b088      	sub	sp, #32
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a0:	f107 030c 	add.w	r3, r7, #12
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a12      	ldr	r2, [pc, #72]	; (8000900 <HAL_TIM_MspPostInit+0x68>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d11e      	bne.n	80008f8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <HAL_TIM_MspPostInit+0x6c>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a10      	ldr	r2, [pc, #64]	; (8000904 <HAL_TIM_MspPostInit+0x6c>)
 80008c4:	f043 0302 	orr.w	r3, r3, #2
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <HAL_TIM_MspPostInit+0x6c>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0302 	and.w	r3, r3, #2
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	68bb      	ldr	r3, [r7, #8]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80008d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008da:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008dc:	2302      	movs	r3, #2
 80008de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80008e8:	2309      	movs	r3, #9
 80008ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ec:	f107 030c 	add.w	r3, r7, #12
 80008f0:	4619      	mov	r1, r3
 80008f2:	4805      	ldr	r0, [pc, #20]	; (8000908 <HAL_TIM_MspPostInit+0x70>)
 80008f4:	f000 fa06 	bl	8000d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80008f8:	bf00      	nop
 80008fa:	3720      	adds	r7, #32
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40001800 	.word	0x40001800
 8000904:	40023800 	.word	0x40023800
 8000908:	40020400 	.word	0x40020400

0800090c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08e      	sub	sp, #56	; 0x38
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000914:	2300      	movs	r3, #0
 8000916:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000918:	2300      	movs	r3, #0
 800091a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800091c:	2300      	movs	r3, #0
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	4b33      	ldr	r3, [pc, #204]	; (80009f0 <HAL_InitTick+0xe4>)
 8000922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000924:	4a32      	ldr	r2, [pc, #200]	; (80009f0 <HAL_InitTick+0xe4>)
 8000926:	f043 0310 	orr.w	r3, r3, #16
 800092a:	6413      	str	r3, [r2, #64]	; 0x40
 800092c:	4b30      	ldr	r3, [pc, #192]	; (80009f0 <HAL_InitTick+0xe4>)
 800092e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000930:	f003 0310 	and.w	r3, r3, #16
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000938:	f107 0210 	add.w	r2, r7, #16
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	4611      	mov	r1, r2
 8000942:	4618      	mov	r0, r3
 8000944:	f000 ffd8 	bl	80018f8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000948:	6a3b      	ldr	r3, [r7, #32]
 800094a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800094c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800094e:	2b00      	cmp	r3, #0
 8000950:	d103      	bne.n	800095a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000952:	f000 ffbd 	bl	80018d0 <HAL_RCC_GetPCLK1Freq>
 8000956:	6378      	str	r0, [r7, #52]	; 0x34
 8000958:	e004      	b.n	8000964 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800095a:	f000 ffb9 	bl	80018d0 <HAL_RCC_GetPCLK1Freq>
 800095e:	4603      	mov	r3, r0
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000966:	4a23      	ldr	r2, [pc, #140]	; (80009f4 <HAL_InitTick+0xe8>)
 8000968:	fba2 2303 	umull	r2, r3, r2, r3
 800096c:	0c9b      	lsrs	r3, r3, #18
 800096e:	3b01      	subs	r3, #1
 8000970:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000972:	4b21      	ldr	r3, [pc, #132]	; (80009f8 <HAL_InitTick+0xec>)
 8000974:	4a21      	ldr	r2, [pc, #132]	; (80009fc <HAL_InitTick+0xf0>)
 8000976:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000978:	4b1f      	ldr	r3, [pc, #124]	; (80009f8 <HAL_InitTick+0xec>)
 800097a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800097e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000980:	4a1d      	ldr	r2, [pc, #116]	; (80009f8 <HAL_InitTick+0xec>)
 8000982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000984:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000986:	4b1c      	ldr	r3, [pc, #112]	; (80009f8 <HAL_InitTick+0xec>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800098c:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <HAL_InitTick+0xec>)
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000992:	4b19      	ldr	r3, [pc, #100]	; (80009f8 <HAL_InitTick+0xec>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000998:	4817      	ldr	r0, [pc, #92]	; (80009f8 <HAL_InitTick+0xec>)
 800099a:	f000 ffdf 	bl	800195c <HAL_TIM_Base_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80009a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d11b      	bne.n	80009e4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80009ac:	4812      	ldr	r0, [pc, #72]	; (80009f8 <HAL_InitTick+0xec>)
 80009ae:	f001 f82f 	bl	8001a10 <HAL_TIM_Base_Start_IT>
 80009b2:	4603      	mov	r3, r0
 80009b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80009b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d111      	bne.n	80009e4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009c0:	2036      	movs	r0, #54	; 0x36
 80009c2:	f000 f991 	bl	8000ce8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2b0f      	cmp	r3, #15
 80009ca:	d808      	bhi.n	80009de <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80009cc:	2200      	movs	r2, #0
 80009ce:	6879      	ldr	r1, [r7, #4]
 80009d0:	2036      	movs	r0, #54	; 0x36
 80009d2:	f000 f96d 	bl	8000cb0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009d6:	4a0a      	ldr	r2, [pc, #40]	; (8000a00 <HAL_InitTick+0xf4>)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	6013      	str	r3, [r2, #0]
 80009dc:	e002      	b.n	80009e4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80009de:	2301      	movs	r3, #1
 80009e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80009e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3738      	adds	r7, #56	; 0x38
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40023800 	.word	0x40023800
 80009f4:	431bde83 	.word	0x431bde83
 80009f8:	2000007c 	.word	0x2000007c
 80009fc:	40001000 	.word	0x40001000
 8000a00:	20000004 	.word	0x20000004

08000a04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <NMI_Handler+0x4>

08000a0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a0e:	e7fe      	b.n	8000a0e <HardFault_Handler+0x4>

08000a10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <MemManage_Handler+0x4>

08000a16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a1a:	e7fe      	b.n	8000a1a <BusFault_Handler+0x4>

08000a1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <UsageFault_Handler+0x4>

08000a22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a34:	4802      	ldr	r0, [pc, #8]	; (8000a40 <TIM6_DAC_IRQHandler+0x10>)
 8000a36:	f001 f973 	bl	8001d20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	2000007c 	.word	0x2000007c

08000a44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <SystemInit+0x20>)
 8000a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a4e:	4a05      	ldr	r2, [pc, #20]	; (8000a64 <SystemInit+0x20>)
 8000a50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aa0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a6c:	480d      	ldr	r0, [pc, #52]	; (8000aa4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a6e:	490e      	ldr	r1, [pc, #56]	; (8000aa8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a70:	4a0e      	ldr	r2, [pc, #56]	; (8000aac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a74:	e002      	b.n	8000a7c <LoopCopyDataInit>

08000a76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a7a:	3304      	adds	r3, #4

08000a7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a80:	d3f9      	bcc.n	8000a76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a82:	4a0b      	ldr	r2, [pc, #44]	; (8000ab0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a84:	4c0b      	ldr	r4, [pc, #44]	; (8000ab4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a88:	e001      	b.n	8000a8e <LoopFillZerobss>

08000a8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a8c:	3204      	adds	r2, #4

08000a8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a90:	d3fb      	bcc.n	8000a8a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a92:	f7ff ffd7 	bl	8000a44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a96:	f004 fbdd 	bl	8005254 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a9a:	f7ff fd83 	bl	80005a4 <main>
  bx  lr    
 8000a9e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000aa0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000aa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000aac:	08005338 	.word	0x08005338
  ldr r2, =_sbss
 8000ab0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000ab4:	20012e6c 	.word	0x20012e6c

08000ab8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ab8:	e7fe      	b.n	8000ab8 <ADC_IRQHandler>
	...

08000abc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ac0:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <HAL_Init+0x40>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a0d      	ldr	r2, [pc, #52]	; (8000afc <HAL_Init+0x40>)
 8000ac6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000acc:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <HAL_Init+0x40>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a0a      	ldr	r2, [pc, #40]	; (8000afc <HAL_Init+0x40>)
 8000ad2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ad6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ad8:	4b08      	ldr	r3, [pc, #32]	; (8000afc <HAL_Init+0x40>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a07      	ldr	r2, [pc, #28]	; (8000afc <HAL_Init+0x40>)
 8000ade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ae2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ae4:	2003      	movs	r0, #3
 8000ae6:	f000 f8d8 	bl	8000c9a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aea:	200f      	movs	r0, #15
 8000aec:	f7ff ff0e 	bl	800090c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000af0:	f7ff fe88 	bl	8000804 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000af4:	2300      	movs	r3, #0
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40023c00 	.word	0x40023c00

08000b00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <HAL_IncTick+0x20>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	461a      	mov	r2, r3
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_IncTick+0x24>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4413      	add	r3, r2
 8000b10:	4a04      	ldr	r2, [pc, #16]	; (8000b24 <HAL_IncTick+0x24>)
 8000b12:	6013      	str	r3, [r2, #0]
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	20000008 	.word	0x20000008
 8000b24:	200000c4 	.word	0x200000c4

08000b28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b2c:	4b03      	ldr	r3, [pc, #12]	; (8000b3c <HAL_GetTick+0x14>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	200000c4 	.word	0x200000c4

08000b40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	f003 0307 	and.w	r3, r3, #7
 8000b4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b50:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <__NVIC_SetPriorityGrouping+0x44>)
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b56:	68ba      	ldr	r2, [r7, #8]
 8000b58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b72:	4a04      	ldr	r2, [pc, #16]	; (8000b84 <__NVIC_SetPriorityGrouping+0x44>)
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	60d3      	str	r3, [r2, #12]
}
 8000b78:	bf00      	nop
 8000b7a:	3714      	adds	r7, #20
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b8c:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <__NVIC_GetPriorityGrouping+0x18>)
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	0a1b      	lsrs	r3, r3, #8
 8000b92:	f003 0307 	and.w	r3, r3, #7
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	db0b      	blt.n	8000bce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	f003 021f 	and.w	r2, r3, #31
 8000bbc:	4907      	ldr	r1, [pc, #28]	; (8000bdc <__NVIC_EnableIRQ+0x38>)
 8000bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc2:	095b      	lsrs	r3, r3, #5
 8000bc4:	2001      	movs	r0, #1
 8000bc6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	e000e100 	.word	0xe000e100

08000be0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	6039      	str	r1, [r7, #0]
 8000bea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	db0a      	blt.n	8000c0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	b2da      	uxtb	r2, r3
 8000bf8:	490c      	ldr	r1, [pc, #48]	; (8000c2c <__NVIC_SetPriority+0x4c>)
 8000bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfe:	0112      	lsls	r2, r2, #4
 8000c00:	b2d2      	uxtb	r2, r2
 8000c02:	440b      	add	r3, r1
 8000c04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c08:	e00a      	b.n	8000c20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	4908      	ldr	r1, [pc, #32]	; (8000c30 <__NVIC_SetPriority+0x50>)
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	f003 030f 	and.w	r3, r3, #15
 8000c16:	3b04      	subs	r3, #4
 8000c18:	0112      	lsls	r2, r2, #4
 8000c1a:	b2d2      	uxtb	r2, r2
 8000c1c:	440b      	add	r3, r1
 8000c1e:	761a      	strb	r2, [r3, #24]
}
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	e000e100 	.word	0xe000e100
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b089      	sub	sp, #36	; 0x24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	f003 0307 	and.w	r3, r3, #7
 8000c46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	f1c3 0307 	rsb	r3, r3, #7
 8000c4e:	2b04      	cmp	r3, #4
 8000c50:	bf28      	it	cs
 8000c52:	2304      	movcs	r3, #4
 8000c54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	3304      	adds	r3, #4
 8000c5a:	2b06      	cmp	r3, #6
 8000c5c:	d902      	bls.n	8000c64 <NVIC_EncodePriority+0x30>
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	3b03      	subs	r3, #3
 8000c62:	e000      	b.n	8000c66 <NVIC_EncodePriority+0x32>
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c68:	f04f 32ff 	mov.w	r2, #4294967295
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	43da      	mvns	r2, r3
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	401a      	ands	r2, r3
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	fa01 f303 	lsl.w	r3, r1, r3
 8000c86:	43d9      	mvns	r1, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c8c:	4313      	orrs	r3, r2
         );
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3724      	adds	r7, #36	; 0x24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b082      	sub	sp, #8
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f7ff ff4c 	bl	8000b40 <__NVIC_SetPriorityGrouping>
}
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
 8000cbc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc2:	f7ff ff61 	bl	8000b88 <__NVIC_GetPriorityGrouping>
 8000cc6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	68b9      	ldr	r1, [r7, #8]
 8000ccc:	6978      	ldr	r0, [r7, #20]
 8000cce:	f7ff ffb1 	bl	8000c34 <NVIC_EncodePriority>
 8000cd2:	4602      	mov	r2, r0
 8000cd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd8:	4611      	mov	r1, r2
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff ff80 	bl	8000be0 <__NVIC_SetPriority>
}
 8000ce0:	bf00      	nop
 8000ce2:	3718      	adds	r7, #24
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff ff54 	bl	8000ba4 <__NVIC_EnableIRQ>
}
 8000cfc:	bf00      	nop
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b089      	sub	sp, #36	; 0x24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61fb      	str	r3, [r7, #28]
 8000d1e:	e16b      	b.n	8000ff8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d20:	2201      	movs	r2, #1
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	697a      	ldr	r2, [r7, #20]
 8000d30:	4013      	ands	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	f040 815a 	bne.w	8000ff2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f003 0303 	and.w	r3, r3, #3
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d005      	beq.n	8000d56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d52:	2b02      	cmp	r3, #2
 8000d54:	d130      	bne.n	8000db8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	2203      	movs	r2, #3
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43db      	mvns	r3, r3
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	68da      	ldr	r2, [r3, #12]
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	43db      	mvns	r3, r3
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	091b      	lsrs	r3, r3, #4
 8000da2:	f003 0201 	and.w	r2, r3, #1
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f003 0303 	and.w	r3, r3, #3
 8000dc0:	2b03      	cmp	r3, #3
 8000dc2:	d017      	beq.n	8000df4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	2203      	movs	r2, #3
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	689a      	ldr	r2, [r3, #8]
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f003 0303 	and.w	r3, r3, #3
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	d123      	bne.n	8000e48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	08da      	lsrs	r2, r3, #3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3208      	adds	r2, #8
 8000e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	f003 0307 	and.w	r3, r3, #7
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	220f      	movs	r2, #15
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	4013      	ands	r3, r2
 8000e22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	691a      	ldr	r2, [r3, #16]
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	08da      	lsrs	r2, r3, #3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	3208      	adds	r2, #8
 8000e42:	69b9      	ldr	r1, [r7, #24]
 8000e44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	2203      	movs	r2, #3
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f003 0203 	and.w	r2, r3, #3
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	f000 80b4 	beq.w	8000ff2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	4b60      	ldr	r3, [pc, #384]	; (8001010 <HAL_GPIO_Init+0x30c>)
 8000e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e92:	4a5f      	ldr	r2, [pc, #380]	; (8001010 <HAL_GPIO_Init+0x30c>)
 8000e94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e98:	6453      	str	r3, [r2, #68]	; 0x44
 8000e9a:	4b5d      	ldr	r3, [pc, #372]	; (8001010 <HAL_GPIO_Init+0x30c>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ea6:	4a5b      	ldr	r2, [pc, #364]	; (8001014 <HAL_GPIO_Init+0x310>)
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	089b      	lsrs	r3, r3, #2
 8000eac:	3302      	adds	r3, #2
 8000eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	f003 0303 	and.w	r3, r3, #3
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	220f      	movs	r2, #15
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a52      	ldr	r2, [pc, #328]	; (8001018 <HAL_GPIO_Init+0x314>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d02b      	beq.n	8000f2a <HAL_GPIO_Init+0x226>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a51      	ldr	r2, [pc, #324]	; (800101c <HAL_GPIO_Init+0x318>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d025      	beq.n	8000f26 <HAL_GPIO_Init+0x222>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a50      	ldr	r2, [pc, #320]	; (8001020 <HAL_GPIO_Init+0x31c>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d01f      	beq.n	8000f22 <HAL_GPIO_Init+0x21e>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a4f      	ldr	r2, [pc, #316]	; (8001024 <HAL_GPIO_Init+0x320>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d019      	beq.n	8000f1e <HAL_GPIO_Init+0x21a>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a4e      	ldr	r2, [pc, #312]	; (8001028 <HAL_GPIO_Init+0x324>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d013      	beq.n	8000f1a <HAL_GPIO_Init+0x216>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a4d      	ldr	r2, [pc, #308]	; (800102c <HAL_GPIO_Init+0x328>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d00d      	beq.n	8000f16 <HAL_GPIO_Init+0x212>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a4c      	ldr	r2, [pc, #304]	; (8001030 <HAL_GPIO_Init+0x32c>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d007      	beq.n	8000f12 <HAL_GPIO_Init+0x20e>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a4b      	ldr	r2, [pc, #300]	; (8001034 <HAL_GPIO_Init+0x330>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d101      	bne.n	8000f0e <HAL_GPIO_Init+0x20a>
 8000f0a:	2307      	movs	r3, #7
 8000f0c:	e00e      	b.n	8000f2c <HAL_GPIO_Init+0x228>
 8000f0e:	2308      	movs	r3, #8
 8000f10:	e00c      	b.n	8000f2c <HAL_GPIO_Init+0x228>
 8000f12:	2306      	movs	r3, #6
 8000f14:	e00a      	b.n	8000f2c <HAL_GPIO_Init+0x228>
 8000f16:	2305      	movs	r3, #5
 8000f18:	e008      	b.n	8000f2c <HAL_GPIO_Init+0x228>
 8000f1a:	2304      	movs	r3, #4
 8000f1c:	e006      	b.n	8000f2c <HAL_GPIO_Init+0x228>
 8000f1e:	2303      	movs	r3, #3
 8000f20:	e004      	b.n	8000f2c <HAL_GPIO_Init+0x228>
 8000f22:	2302      	movs	r3, #2
 8000f24:	e002      	b.n	8000f2c <HAL_GPIO_Init+0x228>
 8000f26:	2301      	movs	r3, #1
 8000f28:	e000      	b.n	8000f2c <HAL_GPIO_Init+0x228>
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	69fa      	ldr	r2, [r7, #28]
 8000f2e:	f002 0203 	and.w	r2, r2, #3
 8000f32:	0092      	lsls	r2, r2, #2
 8000f34:	4093      	lsls	r3, r2
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f3c:	4935      	ldr	r1, [pc, #212]	; (8001014 <HAL_GPIO_Init+0x310>)
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	089b      	lsrs	r3, r3, #2
 8000f42:	3302      	adds	r3, #2
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f4a:	4b3b      	ldr	r3, [pc, #236]	; (8001038 <HAL_GPIO_Init+0x334>)
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	43db      	mvns	r3, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4013      	ands	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d003      	beq.n	8000f6e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f6e:	4a32      	ldr	r2, [pc, #200]	; (8001038 <HAL_GPIO_Init+0x334>)
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f74:	4b30      	ldr	r3, [pc, #192]	; (8001038 <HAL_GPIO_Init+0x334>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4013      	ands	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d003      	beq.n	8000f98 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f98:	4a27      	ldr	r2, [pc, #156]	; (8001038 <HAL_GPIO_Init+0x334>)
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f9e:	4b26      	ldr	r3, [pc, #152]	; (8001038 <HAL_GPIO_Init+0x334>)
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4013      	ands	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d003      	beq.n	8000fc2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fc2:	4a1d      	ldr	r2, [pc, #116]	; (8001038 <HAL_GPIO_Init+0x334>)
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fc8:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <HAL_GPIO_Init+0x334>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d003      	beq.n	8000fec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fec:	4a12      	ldr	r2, [pc, #72]	; (8001038 <HAL_GPIO_Init+0x334>)
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	61fb      	str	r3, [r7, #28]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	2b0f      	cmp	r3, #15
 8000ffc:	f67f ae90 	bls.w	8000d20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001000:	bf00      	nop
 8001002:	bf00      	nop
 8001004:	3724      	adds	r7, #36	; 0x24
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	40023800 	.word	0x40023800
 8001014:	40013800 	.word	0x40013800
 8001018:	40020000 	.word	0x40020000
 800101c:	40020400 	.word	0x40020400
 8001020:	40020800 	.word	0x40020800
 8001024:	40020c00 	.word	0x40020c00
 8001028:	40021000 	.word	0x40021000
 800102c:	40021400 	.word	0x40021400
 8001030:	40021800 	.word	0x40021800
 8001034:	40021c00 	.word	0x40021c00
 8001038:	40013c00 	.word	0x40013c00

0800103c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	460b      	mov	r3, r1
 8001046:	807b      	strh	r3, [r7, #2]
 8001048:	4613      	mov	r3, r2
 800104a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800104c:	787b      	ldrb	r3, [r7, #1]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d003      	beq.n	800105a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001052:	887a      	ldrh	r2, [r7, #2]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001058:	e003      	b.n	8001062 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800105a:	887b      	ldrh	r3, [r7, #2]
 800105c:	041a      	lsls	r2, r3, #16
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	619a      	str	r2, [r3, #24]
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
	...

08001070 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d101      	bne.n	8001082 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e267      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	2b00      	cmp	r3, #0
 800108c:	d075      	beq.n	800117a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800108e:	4b88      	ldr	r3, [pc, #544]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	f003 030c 	and.w	r3, r3, #12
 8001096:	2b04      	cmp	r3, #4
 8001098:	d00c      	beq.n	80010b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800109a:	4b85      	ldr	r3, [pc, #532]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010a2:	2b08      	cmp	r3, #8
 80010a4:	d112      	bne.n	80010cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010a6:	4b82      	ldr	r3, [pc, #520]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010b2:	d10b      	bne.n	80010cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010b4:	4b7e      	ldr	r3, [pc, #504]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d05b      	beq.n	8001178 <HAL_RCC_OscConfig+0x108>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d157      	bne.n	8001178 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e242      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010d4:	d106      	bne.n	80010e4 <HAL_RCC_OscConfig+0x74>
 80010d6:	4b76      	ldr	r3, [pc, #472]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a75      	ldr	r2, [pc, #468]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 80010dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010e0:	6013      	str	r3, [r2, #0]
 80010e2:	e01d      	b.n	8001120 <HAL_RCC_OscConfig+0xb0>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010ec:	d10c      	bne.n	8001108 <HAL_RCC_OscConfig+0x98>
 80010ee:	4b70      	ldr	r3, [pc, #448]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a6f      	ldr	r2, [pc, #444]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 80010f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010f8:	6013      	str	r3, [r2, #0]
 80010fa:	4b6d      	ldr	r3, [pc, #436]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a6c      	ldr	r2, [pc, #432]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 8001100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001104:	6013      	str	r3, [r2, #0]
 8001106:	e00b      	b.n	8001120 <HAL_RCC_OscConfig+0xb0>
 8001108:	4b69      	ldr	r3, [pc, #420]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a68      	ldr	r2, [pc, #416]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 800110e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001112:	6013      	str	r3, [r2, #0]
 8001114:	4b66      	ldr	r3, [pc, #408]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a65      	ldr	r2, [pc, #404]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 800111a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800111e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d013      	beq.n	8001150 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001128:	f7ff fcfe 	bl	8000b28 <HAL_GetTick>
 800112c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800112e:	e008      	b.n	8001142 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001130:	f7ff fcfa 	bl	8000b28 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	2b64      	cmp	r3, #100	; 0x64
 800113c:	d901      	bls.n	8001142 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800113e:	2303      	movs	r3, #3
 8001140:	e207      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001142:	4b5b      	ldr	r3, [pc, #364]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d0f0      	beq.n	8001130 <HAL_RCC_OscConfig+0xc0>
 800114e:	e014      	b.n	800117a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001150:	f7ff fcea 	bl	8000b28 <HAL_GetTick>
 8001154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001156:	e008      	b.n	800116a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001158:	f7ff fce6 	bl	8000b28 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b64      	cmp	r3, #100	; 0x64
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e1f3      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800116a:	4b51      	ldr	r3, [pc, #324]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1f0      	bne.n	8001158 <HAL_RCC_OscConfig+0xe8>
 8001176:	e000      	b.n	800117a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001178:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	2b00      	cmp	r3, #0
 8001184:	d063      	beq.n	800124e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001186:	4b4a      	ldr	r3, [pc, #296]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	f003 030c 	and.w	r3, r3, #12
 800118e:	2b00      	cmp	r3, #0
 8001190:	d00b      	beq.n	80011aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001192:	4b47      	ldr	r3, [pc, #284]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800119a:	2b08      	cmp	r3, #8
 800119c:	d11c      	bne.n	80011d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800119e:	4b44      	ldr	r3, [pc, #272]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d116      	bne.n	80011d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011aa:	4b41      	ldr	r3, [pc, #260]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d005      	beq.n	80011c2 <HAL_RCC_OscConfig+0x152>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	68db      	ldr	r3, [r3, #12]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d001      	beq.n	80011c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e1c7      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c2:	4b3b      	ldr	r3, [pc, #236]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	691b      	ldr	r3, [r3, #16]
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	4937      	ldr	r1, [pc, #220]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 80011d2:	4313      	orrs	r3, r2
 80011d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011d6:	e03a      	b.n	800124e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d020      	beq.n	8001222 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011e0:	4b34      	ldr	r3, [pc, #208]	; (80012b4 <HAL_RCC_OscConfig+0x244>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e6:	f7ff fc9f 	bl	8000b28 <HAL_GetTick>
 80011ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ec:	e008      	b.n	8001200 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011ee:	f7ff fc9b 	bl	8000b28 <HAL_GetTick>
 80011f2:	4602      	mov	r2, r0
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d901      	bls.n	8001200 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011fc:	2303      	movs	r3, #3
 80011fe:	e1a8      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001200:	4b2b      	ldr	r3, [pc, #172]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0302 	and.w	r3, r3, #2
 8001208:	2b00      	cmp	r3, #0
 800120a:	d0f0      	beq.n	80011ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800120c:	4b28      	ldr	r3, [pc, #160]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	691b      	ldr	r3, [r3, #16]
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	4925      	ldr	r1, [pc, #148]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 800121c:	4313      	orrs	r3, r2
 800121e:	600b      	str	r3, [r1, #0]
 8001220:	e015      	b.n	800124e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001222:	4b24      	ldr	r3, [pc, #144]	; (80012b4 <HAL_RCC_OscConfig+0x244>)
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001228:	f7ff fc7e 	bl	8000b28 <HAL_GetTick>
 800122c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800122e:	e008      	b.n	8001242 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001230:	f7ff fc7a 	bl	8000b28 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e187      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001242:	4b1b      	ldr	r3, [pc, #108]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1f0      	bne.n	8001230 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0308 	and.w	r3, r3, #8
 8001256:	2b00      	cmp	r3, #0
 8001258:	d036      	beq.n	80012c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	695b      	ldr	r3, [r3, #20]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d016      	beq.n	8001290 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001262:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <HAL_RCC_OscConfig+0x248>)
 8001264:	2201      	movs	r2, #1
 8001266:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001268:	f7ff fc5e 	bl	8000b28 <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001270:	f7ff fc5a 	bl	8000b28 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b02      	cmp	r3, #2
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e167      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001282:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 8001284:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	2b00      	cmp	r3, #0
 800128c:	d0f0      	beq.n	8001270 <HAL_RCC_OscConfig+0x200>
 800128e:	e01b      	b.n	80012c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001290:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <HAL_RCC_OscConfig+0x248>)
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001296:	f7ff fc47 	bl	8000b28 <HAL_GetTick>
 800129a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800129c:	e00e      	b.n	80012bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800129e:	f7ff fc43 	bl	8000b28 <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d907      	bls.n	80012bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012ac:	2303      	movs	r3, #3
 80012ae:	e150      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
 80012b0:	40023800 	.word	0x40023800
 80012b4:	42470000 	.word	0x42470000
 80012b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012bc:	4b88      	ldr	r3, [pc, #544]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 80012be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012c0:	f003 0302 	and.w	r3, r3, #2
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d1ea      	bne.n	800129e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 0304 	and.w	r3, r3, #4
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	f000 8097 	beq.w	8001404 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012d6:	2300      	movs	r3, #0
 80012d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012da:	4b81      	ldr	r3, [pc, #516]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d10f      	bne.n	8001306 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	4b7d      	ldr	r3, [pc, #500]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	4a7c      	ldr	r2, [pc, #496]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 80012f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f4:	6413      	str	r3, [r2, #64]	; 0x40
 80012f6:	4b7a      	ldr	r3, [pc, #488]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fe:	60bb      	str	r3, [r7, #8]
 8001300:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001302:	2301      	movs	r3, #1
 8001304:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001306:	4b77      	ldr	r3, [pc, #476]	; (80014e4 <HAL_RCC_OscConfig+0x474>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800130e:	2b00      	cmp	r3, #0
 8001310:	d118      	bne.n	8001344 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001312:	4b74      	ldr	r3, [pc, #464]	; (80014e4 <HAL_RCC_OscConfig+0x474>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a73      	ldr	r2, [pc, #460]	; (80014e4 <HAL_RCC_OscConfig+0x474>)
 8001318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800131c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800131e:	f7ff fc03 	bl	8000b28 <HAL_GetTick>
 8001322:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001324:	e008      	b.n	8001338 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001326:	f7ff fbff 	bl	8000b28 <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d901      	bls.n	8001338 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e10c      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001338:	4b6a      	ldr	r3, [pc, #424]	; (80014e4 <HAL_RCC_OscConfig+0x474>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001340:	2b00      	cmp	r3, #0
 8001342:	d0f0      	beq.n	8001326 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d106      	bne.n	800135a <HAL_RCC_OscConfig+0x2ea>
 800134c:	4b64      	ldr	r3, [pc, #400]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 800134e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001350:	4a63      	ldr	r2, [pc, #396]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 8001352:	f043 0301 	orr.w	r3, r3, #1
 8001356:	6713      	str	r3, [r2, #112]	; 0x70
 8001358:	e01c      	b.n	8001394 <HAL_RCC_OscConfig+0x324>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	2b05      	cmp	r3, #5
 8001360:	d10c      	bne.n	800137c <HAL_RCC_OscConfig+0x30c>
 8001362:	4b5f      	ldr	r3, [pc, #380]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 8001364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001366:	4a5e      	ldr	r2, [pc, #376]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 8001368:	f043 0304 	orr.w	r3, r3, #4
 800136c:	6713      	str	r3, [r2, #112]	; 0x70
 800136e:	4b5c      	ldr	r3, [pc, #368]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 8001370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001372:	4a5b      	ldr	r2, [pc, #364]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	6713      	str	r3, [r2, #112]	; 0x70
 800137a:	e00b      	b.n	8001394 <HAL_RCC_OscConfig+0x324>
 800137c:	4b58      	ldr	r3, [pc, #352]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 800137e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001380:	4a57      	ldr	r2, [pc, #348]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 8001382:	f023 0301 	bic.w	r3, r3, #1
 8001386:	6713      	str	r3, [r2, #112]	; 0x70
 8001388:	4b55      	ldr	r3, [pc, #340]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 800138a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800138c:	4a54      	ldr	r2, [pc, #336]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 800138e:	f023 0304 	bic.w	r3, r3, #4
 8001392:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d015      	beq.n	80013c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800139c:	f7ff fbc4 	bl	8000b28 <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013a2:	e00a      	b.n	80013ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013a4:	f7ff fbc0 	bl	8000b28 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e0cb      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ba:	4b49      	ldr	r3, [pc, #292]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 80013bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d0ee      	beq.n	80013a4 <HAL_RCC_OscConfig+0x334>
 80013c6:	e014      	b.n	80013f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c8:	f7ff fbae 	bl	8000b28 <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013ce:	e00a      	b.n	80013e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013d0:	f7ff fbaa 	bl	8000b28 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	f241 3288 	movw	r2, #5000	; 0x1388
 80013de:	4293      	cmp	r3, r2
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e0b5      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013e6:	4b3e      	ldr	r3, [pc, #248]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 80013e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1ee      	bne.n	80013d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013f2:	7dfb      	ldrb	r3, [r7, #23]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d105      	bne.n	8001404 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013f8:	4b39      	ldr	r3, [pc, #228]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 80013fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fc:	4a38      	ldr	r2, [pc, #224]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 80013fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001402:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	2b00      	cmp	r3, #0
 800140a:	f000 80a1 	beq.w	8001550 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800140e:	4b34      	ldr	r3, [pc, #208]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f003 030c 	and.w	r3, r3, #12
 8001416:	2b08      	cmp	r3, #8
 8001418:	d05c      	beq.n	80014d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	2b02      	cmp	r3, #2
 8001420:	d141      	bne.n	80014a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001422:	4b31      	ldr	r3, [pc, #196]	; (80014e8 <HAL_RCC_OscConfig+0x478>)
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001428:	f7ff fb7e 	bl	8000b28 <HAL_GetTick>
 800142c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001430:	f7ff fb7a 	bl	8000b28 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b02      	cmp	r3, #2
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e087      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001442:	4b27      	ldr	r3, [pc, #156]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1f0      	bne.n	8001430 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	69da      	ldr	r2, [r3, #28]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a1b      	ldr	r3, [r3, #32]
 8001456:	431a      	orrs	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145c:	019b      	lsls	r3, r3, #6
 800145e:	431a      	orrs	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001464:	085b      	lsrs	r3, r3, #1
 8001466:	3b01      	subs	r3, #1
 8001468:	041b      	lsls	r3, r3, #16
 800146a:	431a      	orrs	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001470:	061b      	lsls	r3, r3, #24
 8001472:	491b      	ldr	r1, [pc, #108]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 8001474:	4313      	orrs	r3, r2
 8001476:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001478:	4b1b      	ldr	r3, [pc, #108]	; (80014e8 <HAL_RCC_OscConfig+0x478>)
 800147a:	2201      	movs	r2, #1
 800147c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147e:	f7ff fb53 	bl	8000b28 <HAL_GetTick>
 8001482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001484:	e008      	b.n	8001498 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001486:	f7ff fb4f 	bl	8000b28 <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e05c      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001498:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d0f0      	beq.n	8001486 <HAL_RCC_OscConfig+0x416>
 80014a4:	e054      	b.n	8001550 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014a6:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <HAL_RCC_OscConfig+0x478>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ac:	f7ff fb3c 	bl	8000b28 <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014b4:	f7ff fb38 	bl	8000b28 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e045      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014c6:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f0      	bne.n	80014b4 <HAL_RCC_OscConfig+0x444>
 80014d2:	e03d      	b.n	8001550 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d107      	bne.n	80014ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e038      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40007000 	.word	0x40007000
 80014e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014ec:	4b1b      	ldr	r3, [pc, #108]	; (800155c <HAL_RCC_OscConfig+0x4ec>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d028      	beq.n	800154c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001504:	429a      	cmp	r2, r3
 8001506:	d121      	bne.n	800154c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001512:	429a      	cmp	r2, r3
 8001514:	d11a      	bne.n	800154c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800151c:	4013      	ands	r3, r2
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001522:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001524:	4293      	cmp	r3, r2
 8001526:	d111      	bne.n	800154c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001532:	085b      	lsrs	r3, r3, #1
 8001534:	3b01      	subs	r3, #1
 8001536:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001538:	429a      	cmp	r2, r3
 800153a:	d107      	bne.n	800154c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001546:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001548:	429a      	cmp	r2, r3
 800154a:	d001      	beq.n	8001550 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e000      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3718      	adds	r7, #24
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40023800 	.word	0x40023800

08001560 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d101      	bne.n	8001574 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e0cc      	b.n	800170e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001574:	4b68      	ldr	r3, [pc, #416]	; (8001718 <HAL_RCC_ClockConfig+0x1b8>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0307 	and.w	r3, r3, #7
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	429a      	cmp	r2, r3
 8001580:	d90c      	bls.n	800159c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001582:	4b65      	ldr	r3, [pc, #404]	; (8001718 <HAL_RCC_ClockConfig+0x1b8>)
 8001584:	683a      	ldr	r2, [r7, #0]
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800158a:	4b63      	ldr	r3, [pc, #396]	; (8001718 <HAL_RCC_ClockConfig+0x1b8>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	429a      	cmp	r2, r3
 8001596:	d001      	beq.n	800159c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e0b8      	b.n	800170e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d020      	beq.n	80015ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0304 	and.w	r3, r3, #4
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d005      	beq.n	80015c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015b4:	4b59      	ldr	r3, [pc, #356]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	4a58      	ldr	r2, [pc, #352]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80015ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0308 	and.w	r3, r3, #8
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d005      	beq.n	80015d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015cc:	4b53      	ldr	r3, [pc, #332]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	4a52      	ldr	r2, [pc, #328]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80015d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015d8:	4b50      	ldr	r3, [pc, #320]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	494d      	ldr	r1, [pc, #308]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80015e6:	4313      	orrs	r3, r2
 80015e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d044      	beq.n	8001680 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d107      	bne.n	800160e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015fe:	4b47      	ldr	r3, [pc, #284]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d119      	bne.n	800163e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e07f      	b.n	800170e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b02      	cmp	r3, #2
 8001614:	d003      	beq.n	800161e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800161a:	2b03      	cmp	r3, #3
 800161c:	d107      	bne.n	800162e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800161e:	4b3f      	ldr	r3, [pc, #252]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d109      	bne.n	800163e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e06f      	b.n	800170e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800162e:	4b3b      	ldr	r3, [pc, #236]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d101      	bne.n	800163e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e067      	b.n	800170e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800163e:	4b37      	ldr	r3, [pc, #220]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f023 0203 	bic.w	r2, r3, #3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	4934      	ldr	r1, [pc, #208]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 800164c:	4313      	orrs	r3, r2
 800164e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001650:	f7ff fa6a 	bl	8000b28 <HAL_GetTick>
 8001654:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001656:	e00a      	b.n	800166e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001658:	f7ff fa66 	bl	8000b28 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	f241 3288 	movw	r2, #5000	; 0x1388
 8001666:	4293      	cmp	r3, r2
 8001668:	d901      	bls.n	800166e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e04f      	b.n	800170e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800166e:	4b2b      	ldr	r3, [pc, #172]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f003 020c 	and.w	r2, r3, #12
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	429a      	cmp	r2, r3
 800167e:	d1eb      	bne.n	8001658 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001680:	4b25      	ldr	r3, [pc, #148]	; (8001718 <HAL_RCC_ClockConfig+0x1b8>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0307 	and.w	r3, r3, #7
 8001688:	683a      	ldr	r2, [r7, #0]
 800168a:	429a      	cmp	r2, r3
 800168c:	d20c      	bcs.n	80016a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800168e:	4b22      	ldr	r3, [pc, #136]	; (8001718 <HAL_RCC_ClockConfig+0x1b8>)
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001696:	4b20      	ldr	r3, [pc, #128]	; (8001718 <HAL_RCC_ClockConfig+0x1b8>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	683a      	ldr	r2, [r7, #0]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d001      	beq.n	80016a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e032      	b.n	800170e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d008      	beq.n	80016c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016b4:	4b19      	ldr	r3, [pc, #100]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	4916      	ldr	r1, [pc, #88]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80016c2:	4313      	orrs	r3, r2
 80016c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0308 	and.w	r3, r3, #8
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d009      	beq.n	80016e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016d2:	4b12      	ldr	r3, [pc, #72]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	490e      	ldr	r1, [pc, #56]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80016e2:	4313      	orrs	r3, r2
 80016e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016e6:	f000 f821 	bl	800172c <HAL_RCC_GetSysClockFreq>
 80016ea:	4602      	mov	r2, r0
 80016ec:	4b0b      	ldr	r3, [pc, #44]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	091b      	lsrs	r3, r3, #4
 80016f2:	f003 030f 	and.w	r3, r3, #15
 80016f6:	490a      	ldr	r1, [pc, #40]	; (8001720 <HAL_RCC_ClockConfig+0x1c0>)
 80016f8:	5ccb      	ldrb	r3, [r1, r3]
 80016fa:	fa22 f303 	lsr.w	r3, r2, r3
 80016fe:	4a09      	ldr	r2, [pc, #36]	; (8001724 <HAL_RCC_ClockConfig+0x1c4>)
 8001700:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001702:	4b09      	ldr	r3, [pc, #36]	; (8001728 <HAL_RCC_ClockConfig+0x1c8>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff f900 	bl	800090c <HAL_InitTick>

  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40023c00 	.word	0x40023c00
 800171c:	40023800 	.word	0x40023800
 8001720:	08005310 	.word	0x08005310
 8001724:	20000000 	.word	0x20000000
 8001728:	20000004 	.word	0x20000004

0800172c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800172c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001730:	b090      	sub	sp, #64	; 0x40
 8001732:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001734:	2300      	movs	r3, #0
 8001736:	637b      	str	r3, [r7, #52]	; 0x34
 8001738:	2300      	movs	r3, #0
 800173a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800173c:	2300      	movs	r3, #0
 800173e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001740:	2300      	movs	r3, #0
 8001742:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001744:	4b59      	ldr	r3, [pc, #356]	; (80018ac <HAL_RCC_GetSysClockFreq+0x180>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f003 030c 	and.w	r3, r3, #12
 800174c:	2b08      	cmp	r3, #8
 800174e:	d00d      	beq.n	800176c <HAL_RCC_GetSysClockFreq+0x40>
 8001750:	2b08      	cmp	r3, #8
 8001752:	f200 80a1 	bhi.w	8001898 <HAL_RCC_GetSysClockFreq+0x16c>
 8001756:	2b00      	cmp	r3, #0
 8001758:	d002      	beq.n	8001760 <HAL_RCC_GetSysClockFreq+0x34>
 800175a:	2b04      	cmp	r3, #4
 800175c:	d003      	beq.n	8001766 <HAL_RCC_GetSysClockFreq+0x3a>
 800175e:	e09b      	b.n	8001898 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001760:	4b53      	ldr	r3, [pc, #332]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001762:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001764:	e09b      	b.n	800189e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001766:	4b53      	ldr	r3, [pc, #332]	; (80018b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001768:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800176a:	e098      	b.n	800189e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800176c:	4b4f      	ldr	r3, [pc, #316]	; (80018ac <HAL_RCC_GetSysClockFreq+0x180>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001774:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001776:	4b4d      	ldr	r3, [pc, #308]	; (80018ac <HAL_RCC_GetSysClockFreq+0x180>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d028      	beq.n	80017d4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001782:	4b4a      	ldr	r3, [pc, #296]	; (80018ac <HAL_RCC_GetSysClockFreq+0x180>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	099b      	lsrs	r3, r3, #6
 8001788:	2200      	movs	r2, #0
 800178a:	623b      	str	r3, [r7, #32]
 800178c:	627a      	str	r2, [r7, #36]	; 0x24
 800178e:	6a3b      	ldr	r3, [r7, #32]
 8001790:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001794:	2100      	movs	r1, #0
 8001796:	4b47      	ldr	r3, [pc, #284]	; (80018b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001798:	fb03 f201 	mul.w	r2, r3, r1
 800179c:	2300      	movs	r3, #0
 800179e:	fb00 f303 	mul.w	r3, r0, r3
 80017a2:	4413      	add	r3, r2
 80017a4:	4a43      	ldr	r2, [pc, #268]	; (80018b4 <HAL_RCC_GetSysClockFreq+0x188>)
 80017a6:	fba0 1202 	umull	r1, r2, r0, r2
 80017aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80017ac:	460a      	mov	r2, r1
 80017ae:	62ba      	str	r2, [r7, #40]	; 0x28
 80017b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017b2:	4413      	add	r3, r2
 80017b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017b8:	2200      	movs	r2, #0
 80017ba:	61bb      	str	r3, [r7, #24]
 80017bc:	61fa      	str	r2, [r7, #28]
 80017be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80017c6:	f7fe fd03 	bl	80001d0 <__aeabi_uldivmod>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	4613      	mov	r3, r2
 80017d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017d2:	e053      	b.n	800187c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017d4:	4b35      	ldr	r3, [pc, #212]	; (80018ac <HAL_RCC_GetSysClockFreq+0x180>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	099b      	lsrs	r3, r3, #6
 80017da:	2200      	movs	r2, #0
 80017dc:	613b      	str	r3, [r7, #16]
 80017de:	617a      	str	r2, [r7, #20]
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80017e6:	f04f 0b00 	mov.w	fp, #0
 80017ea:	4652      	mov	r2, sl
 80017ec:	465b      	mov	r3, fp
 80017ee:	f04f 0000 	mov.w	r0, #0
 80017f2:	f04f 0100 	mov.w	r1, #0
 80017f6:	0159      	lsls	r1, r3, #5
 80017f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017fc:	0150      	lsls	r0, r2, #5
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	ebb2 080a 	subs.w	r8, r2, sl
 8001806:	eb63 090b 	sbc.w	r9, r3, fp
 800180a:	f04f 0200 	mov.w	r2, #0
 800180e:	f04f 0300 	mov.w	r3, #0
 8001812:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001816:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800181a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800181e:	ebb2 0408 	subs.w	r4, r2, r8
 8001822:	eb63 0509 	sbc.w	r5, r3, r9
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	f04f 0300 	mov.w	r3, #0
 800182e:	00eb      	lsls	r3, r5, #3
 8001830:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001834:	00e2      	lsls	r2, r4, #3
 8001836:	4614      	mov	r4, r2
 8001838:	461d      	mov	r5, r3
 800183a:	eb14 030a 	adds.w	r3, r4, sl
 800183e:	603b      	str	r3, [r7, #0]
 8001840:	eb45 030b 	adc.w	r3, r5, fp
 8001844:	607b      	str	r3, [r7, #4]
 8001846:	f04f 0200 	mov.w	r2, #0
 800184a:	f04f 0300 	mov.w	r3, #0
 800184e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001852:	4629      	mov	r1, r5
 8001854:	028b      	lsls	r3, r1, #10
 8001856:	4621      	mov	r1, r4
 8001858:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800185c:	4621      	mov	r1, r4
 800185e:	028a      	lsls	r2, r1, #10
 8001860:	4610      	mov	r0, r2
 8001862:	4619      	mov	r1, r3
 8001864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001866:	2200      	movs	r2, #0
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	60fa      	str	r2, [r7, #12]
 800186c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001870:	f7fe fcae 	bl	80001d0 <__aeabi_uldivmod>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4613      	mov	r3, r2
 800187a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800187c:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <HAL_RCC_GetSysClockFreq+0x180>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	0c1b      	lsrs	r3, r3, #16
 8001882:	f003 0303 	and.w	r3, r3, #3
 8001886:	3301      	adds	r3, #1
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800188c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800188e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001890:	fbb2 f3f3 	udiv	r3, r2, r3
 8001894:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001896:	e002      	b.n	800189e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001898:	4b05      	ldr	r3, [pc, #20]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x184>)
 800189a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800189c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800189e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3740      	adds	r7, #64	; 0x40
 80018a4:	46bd      	mov	sp, r7
 80018a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018aa:	bf00      	nop
 80018ac:	40023800 	.word	0x40023800
 80018b0:	00f42400 	.word	0x00f42400
 80018b4:	017d7840 	.word	0x017d7840

080018b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018bc:	4b03      	ldr	r3, [pc, #12]	; (80018cc <HAL_RCC_GetHCLKFreq+0x14>)
 80018be:	681b      	ldr	r3, [r3, #0]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	20000000 	.word	0x20000000

080018d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80018d4:	f7ff fff0 	bl	80018b8 <HAL_RCC_GetHCLKFreq>
 80018d8:	4602      	mov	r2, r0
 80018da:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	0a9b      	lsrs	r3, r3, #10
 80018e0:	f003 0307 	and.w	r3, r3, #7
 80018e4:	4903      	ldr	r1, [pc, #12]	; (80018f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018e6:	5ccb      	ldrb	r3, [r1, r3]
 80018e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40023800 	.word	0x40023800
 80018f4:	08005320 	.word	0x08005320

080018f8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	220f      	movs	r2, #15
 8001906:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001908:	4b12      	ldr	r3, [pc, #72]	; (8001954 <HAL_RCC_GetClockConfig+0x5c>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f003 0203 	and.w	r2, r3, #3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001914:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <HAL_RCC_GetClockConfig+0x5c>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001920:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <HAL_RCC_GetClockConfig+0x5c>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800192c:	4b09      	ldr	r3, [pc, #36]	; (8001954 <HAL_RCC_GetClockConfig+0x5c>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	08db      	lsrs	r3, r3, #3
 8001932:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800193a:	4b07      	ldr	r3, [pc, #28]	; (8001958 <HAL_RCC_GetClockConfig+0x60>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0207 	and.w	r2, r3, #7
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	601a      	str	r2, [r3, #0]
}
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	40023800 	.word	0x40023800
 8001958:	40023c00 	.word	0x40023c00

0800195c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e041      	b.n	80019f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	d106      	bne.n	8001988 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f000 f839 	bl	80019fa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2202      	movs	r2, #2
 800198c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3304      	adds	r3, #4
 8001998:	4619      	mov	r1, r3
 800199a:	4610      	mov	r0, r2
 800199c:	f000 fbb2 	bl	8002104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2201      	movs	r2, #1
 80019b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2201      	movs	r2, #1
 80019c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2201      	movs	r2, #1
 80019cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2201      	movs	r2, #1
 80019d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2201      	movs	r2, #1
 80019dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80019fa:	b480      	push	{r7}
 80019fc:	b083      	sub	sp, #12
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
	...

08001a10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d001      	beq.n	8001a28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e04e      	b.n	8001ac6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	68da      	ldr	r2, [r3, #12]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f042 0201 	orr.w	r2, r2, #1
 8001a3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a23      	ldr	r2, [pc, #140]	; (8001ad4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d022      	beq.n	8001a90 <HAL_TIM_Base_Start_IT+0x80>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a52:	d01d      	beq.n	8001a90 <HAL_TIM_Base_Start_IT+0x80>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a1f      	ldr	r2, [pc, #124]	; (8001ad8 <HAL_TIM_Base_Start_IT+0xc8>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d018      	beq.n	8001a90 <HAL_TIM_Base_Start_IT+0x80>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a1e      	ldr	r2, [pc, #120]	; (8001adc <HAL_TIM_Base_Start_IT+0xcc>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d013      	beq.n	8001a90 <HAL_TIM_Base_Start_IT+0x80>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a1c      	ldr	r2, [pc, #112]	; (8001ae0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d00e      	beq.n	8001a90 <HAL_TIM_Base_Start_IT+0x80>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a1b      	ldr	r2, [pc, #108]	; (8001ae4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d009      	beq.n	8001a90 <HAL_TIM_Base_Start_IT+0x80>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a19      	ldr	r2, [pc, #100]	; (8001ae8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d004      	beq.n	8001a90 <HAL_TIM_Base_Start_IT+0x80>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a18      	ldr	r2, [pc, #96]	; (8001aec <HAL_TIM_Base_Start_IT+0xdc>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d111      	bne.n	8001ab4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2b06      	cmp	r3, #6
 8001aa0:	d010      	beq.n	8001ac4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f042 0201 	orr.w	r2, r2, #1
 8001ab0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ab2:	e007      	b.n	8001ac4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f042 0201 	orr.w	r2, r2, #1
 8001ac2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3714      	adds	r7, #20
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	40010000 	.word	0x40010000
 8001ad8:	40000400 	.word	0x40000400
 8001adc:	40000800 	.word	0x40000800
 8001ae0:	40000c00 	.word	0x40000c00
 8001ae4:	40010400 	.word	0x40010400
 8001ae8:	40014000 	.word	0x40014000
 8001aec:	40001800 	.word	0x40001800

08001af0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e041      	b.n	8001b86 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d106      	bne.n	8001b1c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7fe fe9c 	bl	8000854 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2202      	movs	r2, #2
 8001b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3304      	adds	r3, #4
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4610      	mov	r0, r2
 8001b30:	f000 fae8 	bl	8002104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
	...

08001b90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d109      	bne.n	8001bb4 <HAL_TIM_PWM_Start+0x24>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	bf14      	ite	ne
 8001bac:	2301      	movne	r3, #1
 8001bae:	2300      	moveq	r3, #0
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	e022      	b.n	8001bfa <HAL_TIM_PWM_Start+0x6a>
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	d109      	bne.n	8001bce <HAL_TIM_PWM_Start+0x3e>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	bf14      	ite	ne
 8001bc6:	2301      	movne	r3, #1
 8001bc8:	2300      	moveq	r3, #0
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	e015      	b.n	8001bfa <HAL_TIM_PWM_Start+0x6a>
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	2b08      	cmp	r3, #8
 8001bd2:	d109      	bne.n	8001be8 <HAL_TIM_PWM_Start+0x58>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	bf14      	ite	ne
 8001be0:	2301      	movne	r3, #1
 8001be2:	2300      	moveq	r3, #0
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	e008      	b.n	8001bfa <HAL_TIM_PWM_Start+0x6a>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	bf14      	ite	ne
 8001bf4:	2301      	movne	r3, #1
 8001bf6:	2300      	moveq	r3, #0
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e07c      	b.n	8001cfc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d104      	bne.n	8001c12 <HAL_TIM_PWM_Start+0x82>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2202      	movs	r2, #2
 8001c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c10:	e013      	b.n	8001c3a <HAL_TIM_PWM_Start+0xaa>
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	2b04      	cmp	r3, #4
 8001c16:	d104      	bne.n	8001c22 <HAL_TIM_PWM_Start+0x92>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c20:	e00b      	b.n	8001c3a <HAL_TIM_PWM_Start+0xaa>
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	2b08      	cmp	r3, #8
 8001c26:	d104      	bne.n	8001c32 <HAL_TIM_PWM_Start+0xa2>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2202      	movs	r2, #2
 8001c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c30:	e003      	b.n	8001c3a <HAL_TIM_PWM_Start+0xaa>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2202      	movs	r2, #2
 8001c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	6839      	ldr	r1, [r7, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f000 fcae 	bl	80025a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a2d      	ldr	r2, [pc, #180]	; (8001d04 <HAL_TIM_PWM_Start+0x174>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d004      	beq.n	8001c5c <HAL_TIM_PWM_Start+0xcc>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a2c      	ldr	r2, [pc, #176]	; (8001d08 <HAL_TIM_PWM_Start+0x178>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d101      	bne.n	8001c60 <HAL_TIM_PWM_Start+0xd0>
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e000      	b.n	8001c62 <HAL_TIM_PWM_Start+0xd2>
 8001c60:	2300      	movs	r3, #0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d007      	beq.n	8001c76 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a22      	ldr	r2, [pc, #136]	; (8001d04 <HAL_TIM_PWM_Start+0x174>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d022      	beq.n	8001cc6 <HAL_TIM_PWM_Start+0x136>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c88:	d01d      	beq.n	8001cc6 <HAL_TIM_PWM_Start+0x136>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a1f      	ldr	r2, [pc, #124]	; (8001d0c <HAL_TIM_PWM_Start+0x17c>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d018      	beq.n	8001cc6 <HAL_TIM_PWM_Start+0x136>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a1d      	ldr	r2, [pc, #116]	; (8001d10 <HAL_TIM_PWM_Start+0x180>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d013      	beq.n	8001cc6 <HAL_TIM_PWM_Start+0x136>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a1c      	ldr	r2, [pc, #112]	; (8001d14 <HAL_TIM_PWM_Start+0x184>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d00e      	beq.n	8001cc6 <HAL_TIM_PWM_Start+0x136>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a16      	ldr	r2, [pc, #88]	; (8001d08 <HAL_TIM_PWM_Start+0x178>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d009      	beq.n	8001cc6 <HAL_TIM_PWM_Start+0x136>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a18      	ldr	r2, [pc, #96]	; (8001d18 <HAL_TIM_PWM_Start+0x188>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d004      	beq.n	8001cc6 <HAL_TIM_PWM_Start+0x136>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a16      	ldr	r2, [pc, #88]	; (8001d1c <HAL_TIM_PWM_Start+0x18c>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d111      	bne.n	8001cea <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f003 0307 	and.w	r3, r3, #7
 8001cd0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2b06      	cmp	r3, #6
 8001cd6:	d010      	beq.n	8001cfa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f042 0201 	orr.w	r2, r2, #1
 8001ce6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ce8:	e007      	b.n	8001cfa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f042 0201 	orr.w	r2, r2, #1
 8001cf8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40010000 	.word	0x40010000
 8001d08:	40010400 	.word	0x40010400
 8001d0c:	40000400 	.word	0x40000400
 8001d10:	40000800 	.word	0x40000800
 8001d14:	40000c00 	.word	0x40000c00
 8001d18:	40014000 	.word	0x40014000
 8001d1c:	40001800 	.word	0x40001800

08001d20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d122      	bne.n	8001d7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d11b      	bne.n	8001d7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f06f 0202 	mvn.w	r2, #2
 8001d4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2201      	movs	r2, #1
 8001d52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f9b0 	bl	80020c8 <HAL_TIM_IC_CaptureCallback>
 8001d68:	e005      	b.n	8001d76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f9a2 	bl	80020b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f000 f9b3 	bl	80020dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	f003 0304 	and.w	r3, r3, #4
 8001d86:	2b04      	cmp	r3, #4
 8001d88:	d122      	bne.n	8001dd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	f003 0304 	and.w	r3, r3, #4
 8001d94:	2b04      	cmp	r3, #4
 8001d96:	d11b      	bne.n	8001dd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f06f 0204 	mvn.w	r2, #4
 8001da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2202      	movs	r2, #2
 8001da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f986 	bl	80020c8 <HAL_TIM_IC_CaptureCallback>
 8001dbc:	e005      	b.n	8001dca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f978 	bl	80020b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 f989 	bl	80020dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	f003 0308 	and.w	r3, r3, #8
 8001dda:	2b08      	cmp	r3, #8
 8001ddc:	d122      	bne.n	8001e24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	f003 0308 	and.w	r3, r3, #8
 8001de8:	2b08      	cmp	r3, #8
 8001dea:	d11b      	bne.n	8001e24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f06f 0208 	mvn.w	r2, #8
 8001df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2204      	movs	r2, #4
 8001dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	f003 0303 	and.w	r3, r3, #3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 f95c 	bl	80020c8 <HAL_TIM_IC_CaptureCallback>
 8001e10:	e005      	b.n	8001e1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f94e 	bl	80020b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 f95f 	bl	80020dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	f003 0310 	and.w	r3, r3, #16
 8001e2e:	2b10      	cmp	r3, #16
 8001e30:	d122      	bne.n	8001e78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	f003 0310 	and.w	r3, r3, #16
 8001e3c:	2b10      	cmp	r3, #16
 8001e3e:	d11b      	bne.n	8001e78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f06f 0210 	mvn.w	r2, #16
 8001e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2208      	movs	r2, #8
 8001e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 f932 	bl	80020c8 <HAL_TIM_IC_CaptureCallback>
 8001e64:	e005      	b.n	8001e72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f924 	bl	80020b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 f935 	bl	80020dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d10e      	bne.n	8001ea4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d107      	bne.n	8001ea4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f06f 0201 	mvn.w	r2, #1
 8001e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7fe fc98 	bl	80007d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eae:	2b80      	cmp	r3, #128	; 0x80
 8001eb0:	d10e      	bne.n	8001ed0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ebc:	2b80      	cmp	r3, #128	; 0x80
 8001ebe:	d107      	bne.n	8001ed0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 fb99 	bl	8002602 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eda:	2b40      	cmp	r3, #64	; 0x40
 8001edc:	d10e      	bne.n	8001efc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ee8:	2b40      	cmp	r3, #64	; 0x40
 8001eea:	d107      	bne.n	8001efc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f8fa 	bl	80020f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	f003 0320 	and.w	r3, r3, #32
 8001f06:	2b20      	cmp	r3, #32
 8001f08:	d10e      	bne.n	8001f28 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	f003 0320 	and.w	r3, r3, #32
 8001f14:	2b20      	cmp	r3, #32
 8001f16:	d107      	bne.n	8001f28 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f06f 0220 	mvn.w	r2, #32
 8001f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 fb63 	bl	80025ee <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f28:	bf00      	nop
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d101      	bne.n	8001f4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	e0ae      	b.n	80020ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2201      	movs	r2, #1
 8001f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b0c      	cmp	r3, #12
 8001f5a:	f200 809f 	bhi.w	800209c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001f5e:	a201      	add	r2, pc, #4	; (adr r2, 8001f64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f64:	08001f99 	.word	0x08001f99
 8001f68:	0800209d 	.word	0x0800209d
 8001f6c:	0800209d 	.word	0x0800209d
 8001f70:	0800209d 	.word	0x0800209d
 8001f74:	08001fd9 	.word	0x08001fd9
 8001f78:	0800209d 	.word	0x0800209d
 8001f7c:	0800209d 	.word	0x0800209d
 8001f80:	0800209d 	.word	0x0800209d
 8001f84:	0800201b 	.word	0x0800201b
 8001f88:	0800209d 	.word	0x0800209d
 8001f8c:	0800209d 	.word	0x0800209d
 8001f90:	0800209d 	.word	0x0800209d
 8001f94:	0800205b 	.word	0x0800205b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68b9      	ldr	r1, [r7, #8]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f000 f950 	bl	8002244 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	699a      	ldr	r2, [r3, #24]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f042 0208 	orr.w	r2, r2, #8
 8001fb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	699a      	ldr	r2, [r3, #24]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f022 0204 	bic.w	r2, r2, #4
 8001fc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6999      	ldr	r1, [r3, #24]
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	691a      	ldr	r2, [r3, #16]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	619a      	str	r2, [r3, #24]
      break;
 8001fd6:	e064      	b.n	80020a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68b9      	ldr	r1, [r7, #8]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f000 f9a0 	bl	8002324 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	699a      	ldr	r2, [r3, #24]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ff2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	699a      	ldr	r2, [r3, #24]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002002:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6999      	ldr	r1, [r3, #24]
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	021a      	lsls	r2, r3, #8
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	430a      	orrs	r2, r1
 8002016:	619a      	str	r2, [r3, #24]
      break;
 8002018:	e043      	b.n	80020a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68b9      	ldr	r1, [r7, #8]
 8002020:	4618      	mov	r0, r3
 8002022:	f000 f9f5 	bl	8002410 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	69da      	ldr	r2, [r3, #28]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f042 0208 	orr.w	r2, r2, #8
 8002034:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	69da      	ldr	r2, [r3, #28]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f022 0204 	bic.w	r2, r2, #4
 8002044:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	69d9      	ldr	r1, [r3, #28]
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	691a      	ldr	r2, [r3, #16]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	430a      	orrs	r2, r1
 8002056:	61da      	str	r2, [r3, #28]
      break;
 8002058:	e023      	b.n	80020a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68b9      	ldr	r1, [r7, #8]
 8002060:	4618      	mov	r0, r3
 8002062:	f000 fa49 	bl	80024f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	69da      	ldr	r2, [r3, #28]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002074:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	69da      	ldr	r2, [r3, #28]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002084:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	69d9      	ldr	r1, [r3, #28]
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	021a      	lsls	r2, r3, #8
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	430a      	orrs	r2, r1
 8002098:	61da      	str	r2, [r3, #28]
      break;
 800209a:	e002      	b.n	80020a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	75fb      	strb	r3, [r7, #23]
      break;
 80020a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80020aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3718      	adds	r7, #24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a40      	ldr	r2, [pc, #256]	; (8002218 <TIM_Base_SetConfig+0x114>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d013      	beq.n	8002144 <TIM_Base_SetConfig+0x40>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002122:	d00f      	beq.n	8002144 <TIM_Base_SetConfig+0x40>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a3d      	ldr	r2, [pc, #244]	; (800221c <TIM_Base_SetConfig+0x118>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d00b      	beq.n	8002144 <TIM_Base_SetConfig+0x40>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a3c      	ldr	r2, [pc, #240]	; (8002220 <TIM_Base_SetConfig+0x11c>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d007      	beq.n	8002144 <TIM_Base_SetConfig+0x40>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a3b      	ldr	r2, [pc, #236]	; (8002224 <TIM_Base_SetConfig+0x120>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d003      	beq.n	8002144 <TIM_Base_SetConfig+0x40>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a3a      	ldr	r2, [pc, #232]	; (8002228 <TIM_Base_SetConfig+0x124>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d108      	bne.n	8002156 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800214a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	4313      	orrs	r3, r2
 8002154:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a2f      	ldr	r2, [pc, #188]	; (8002218 <TIM_Base_SetConfig+0x114>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d02b      	beq.n	80021b6 <TIM_Base_SetConfig+0xb2>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002164:	d027      	beq.n	80021b6 <TIM_Base_SetConfig+0xb2>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a2c      	ldr	r2, [pc, #176]	; (800221c <TIM_Base_SetConfig+0x118>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d023      	beq.n	80021b6 <TIM_Base_SetConfig+0xb2>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a2b      	ldr	r2, [pc, #172]	; (8002220 <TIM_Base_SetConfig+0x11c>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d01f      	beq.n	80021b6 <TIM_Base_SetConfig+0xb2>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a2a      	ldr	r2, [pc, #168]	; (8002224 <TIM_Base_SetConfig+0x120>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d01b      	beq.n	80021b6 <TIM_Base_SetConfig+0xb2>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a29      	ldr	r2, [pc, #164]	; (8002228 <TIM_Base_SetConfig+0x124>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d017      	beq.n	80021b6 <TIM_Base_SetConfig+0xb2>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a28      	ldr	r2, [pc, #160]	; (800222c <TIM_Base_SetConfig+0x128>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d013      	beq.n	80021b6 <TIM_Base_SetConfig+0xb2>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a27      	ldr	r2, [pc, #156]	; (8002230 <TIM_Base_SetConfig+0x12c>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d00f      	beq.n	80021b6 <TIM_Base_SetConfig+0xb2>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a26      	ldr	r2, [pc, #152]	; (8002234 <TIM_Base_SetConfig+0x130>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d00b      	beq.n	80021b6 <TIM_Base_SetConfig+0xb2>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a25      	ldr	r2, [pc, #148]	; (8002238 <TIM_Base_SetConfig+0x134>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d007      	beq.n	80021b6 <TIM_Base_SetConfig+0xb2>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a24      	ldr	r2, [pc, #144]	; (800223c <TIM_Base_SetConfig+0x138>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d003      	beq.n	80021b6 <TIM_Base_SetConfig+0xb2>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a23      	ldr	r2, [pc, #140]	; (8002240 <TIM_Base_SetConfig+0x13c>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d108      	bne.n	80021c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a0a      	ldr	r2, [pc, #40]	; (8002218 <TIM_Base_SetConfig+0x114>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d003      	beq.n	80021fc <TIM_Base_SetConfig+0xf8>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a0c      	ldr	r2, [pc, #48]	; (8002228 <TIM_Base_SetConfig+0x124>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d103      	bne.n	8002204 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	691a      	ldr	r2, [r3, #16]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	615a      	str	r2, [r3, #20]
}
 800220a:	bf00      	nop
 800220c:	3714      	adds	r7, #20
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	40010000 	.word	0x40010000
 800221c:	40000400 	.word	0x40000400
 8002220:	40000800 	.word	0x40000800
 8002224:	40000c00 	.word	0x40000c00
 8002228:	40010400 	.word	0x40010400
 800222c:	40014000 	.word	0x40014000
 8002230:	40014400 	.word	0x40014400
 8002234:	40014800 	.word	0x40014800
 8002238:	40001800 	.word	0x40001800
 800223c:	40001c00 	.word	0x40001c00
 8002240:	40002000 	.word	0x40002000

08002244 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002244:	b480      	push	{r7}
 8002246:	b087      	sub	sp, #28
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	f023 0201 	bic.w	r2, r3, #1
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f023 0303 	bic.w	r3, r3, #3
 800227a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	4313      	orrs	r3, r2
 8002284:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	f023 0302 	bic.w	r3, r3, #2
 800228c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	697a      	ldr	r2, [r7, #20]
 8002294:	4313      	orrs	r3, r2
 8002296:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4a20      	ldr	r2, [pc, #128]	; (800231c <TIM_OC1_SetConfig+0xd8>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d003      	beq.n	80022a8 <TIM_OC1_SetConfig+0x64>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a1f      	ldr	r2, [pc, #124]	; (8002320 <TIM_OC1_SetConfig+0xdc>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d10c      	bne.n	80022c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	f023 0308 	bic.w	r3, r3, #8
 80022ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	697a      	ldr	r2, [r7, #20]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	f023 0304 	bic.w	r3, r3, #4
 80022c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a15      	ldr	r2, [pc, #84]	; (800231c <TIM_OC1_SetConfig+0xd8>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d003      	beq.n	80022d2 <TIM_OC1_SetConfig+0x8e>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a14      	ldr	r2, [pc, #80]	; (8002320 <TIM_OC1_SetConfig+0xdc>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d111      	bne.n	80022f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80022e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685a      	ldr	r2, [r3, #4]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	621a      	str	r2, [r3, #32]
}
 8002310:	bf00      	nop
 8002312:	371c      	adds	r7, #28
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	40010000 	.word	0x40010000
 8002320:	40010400 	.word	0x40010400

08002324 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002324:	b480      	push	{r7}
 8002326:	b087      	sub	sp, #28
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	f023 0210 	bic.w	r2, r3, #16
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a1b      	ldr	r3, [r3, #32]
 800233e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800235a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	021b      	lsls	r3, r3, #8
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	4313      	orrs	r3, r2
 8002366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	f023 0320 	bic.w	r3, r3, #32
 800236e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	011b      	lsls	r3, r3, #4
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	4313      	orrs	r3, r2
 800237a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a22      	ldr	r2, [pc, #136]	; (8002408 <TIM_OC2_SetConfig+0xe4>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d003      	beq.n	800238c <TIM_OC2_SetConfig+0x68>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a21      	ldr	r2, [pc, #132]	; (800240c <TIM_OC2_SetConfig+0xe8>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d10d      	bne.n	80023a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002392:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	011b      	lsls	r3, r3, #4
 800239a:	697a      	ldr	r2, [r7, #20]
 800239c:	4313      	orrs	r3, r2
 800239e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4a17      	ldr	r2, [pc, #92]	; (8002408 <TIM_OC2_SetConfig+0xe4>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d003      	beq.n	80023b8 <TIM_OC2_SetConfig+0x94>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4a16      	ldr	r2, [pc, #88]	; (800240c <TIM_OC2_SetConfig+0xe8>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d113      	bne.n	80023e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80023be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80023c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	695b      	ldr	r3, [r3, #20]
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	4313      	orrs	r3, r2
 80023de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685a      	ldr	r2, [r3, #4]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	621a      	str	r2, [r3, #32]
}
 80023fa:	bf00      	nop
 80023fc:	371c      	adds	r7, #28
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	40010000 	.word	0x40010000
 800240c:	40010400 	.word	0x40010400

08002410 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002410:	b480      	push	{r7}
 8002412:	b087      	sub	sp, #28
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800243e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f023 0303 	bic.w	r3, r3, #3
 8002446:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	4313      	orrs	r3, r2
 8002450:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002458:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	021b      	lsls	r3, r3, #8
 8002460:	697a      	ldr	r2, [r7, #20]
 8002462:	4313      	orrs	r3, r2
 8002464:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a21      	ldr	r2, [pc, #132]	; (80024f0 <TIM_OC3_SetConfig+0xe0>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d003      	beq.n	8002476 <TIM_OC3_SetConfig+0x66>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a20      	ldr	r2, [pc, #128]	; (80024f4 <TIM_OC3_SetConfig+0xe4>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d10d      	bne.n	8002492 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800247c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	021b      	lsls	r3, r3, #8
 8002484:	697a      	ldr	r2, [r7, #20]
 8002486:	4313      	orrs	r3, r2
 8002488:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002490:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a16      	ldr	r2, [pc, #88]	; (80024f0 <TIM_OC3_SetConfig+0xe0>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d003      	beq.n	80024a2 <TIM_OC3_SetConfig+0x92>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a15      	ldr	r2, [pc, #84]	; (80024f4 <TIM_OC3_SetConfig+0xe4>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d113      	bne.n	80024ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80024a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80024b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	011b      	lsls	r3, r3, #4
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	011b      	lsls	r3, r3, #4
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685a      	ldr	r2, [r3, #4]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	621a      	str	r2, [r3, #32]
}
 80024e4:	bf00      	nop
 80024e6:	371c      	adds	r7, #28
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	40010000 	.word	0x40010000
 80024f4:	40010400 	.word	0x40010400

080024f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b087      	sub	sp, #28
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	69db      	ldr	r3, [r3, #28]
 800251e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800252e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	021b      	lsls	r3, r3, #8
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	4313      	orrs	r3, r2
 800253a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002542:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	031b      	lsls	r3, r3, #12
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	4313      	orrs	r3, r2
 800254e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a12      	ldr	r2, [pc, #72]	; (800259c <TIM_OC4_SetConfig+0xa4>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d003      	beq.n	8002560 <TIM_OC4_SetConfig+0x68>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a11      	ldr	r2, [pc, #68]	; (80025a0 <TIM_OC4_SetConfig+0xa8>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d109      	bne.n	8002574 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002566:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	019b      	lsls	r3, r3, #6
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	4313      	orrs	r3, r2
 8002572:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685a      	ldr	r2, [r3, #4]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	621a      	str	r2, [r3, #32]
}
 800258e:	bf00      	nop
 8002590:	371c      	adds	r7, #28
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	40010000 	.word	0x40010000
 80025a0:	40010400 	.word	0x40010400

080025a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b087      	sub	sp, #28
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	f003 031f 	and.w	r3, r3, #31
 80025b6:	2201      	movs	r2, #1
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6a1a      	ldr	r2, [r3, #32]
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	43db      	mvns	r3, r3
 80025c6:	401a      	ands	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6a1a      	ldr	r2, [r3, #32]
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	f003 031f 	and.w	r3, r3, #31
 80025d6:	6879      	ldr	r1, [r7, #4]
 80025d8:	fa01 f303 	lsl.w	r3, r1, r3
 80025dc:	431a      	orrs	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	621a      	str	r2, [r3, #32]
}
 80025e2:	bf00      	nop
 80025e4:	371c      	adds	r7, #28
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025ee:	b480      	push	{r7}
 80025f0:	b083      	sub	sp, #12
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025f6:	bf00      	nop
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800260a:	bf00      	nop
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr

08002616 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002616:	b480      	push	{r7}
 8002618:	b083      	sub	sp, #12
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f103 0208 	add.w	r2, r3, #8
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f04f 32ff 	mov.w	r2, #4294967295
 800262e:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f103 0208 	add.w	r2, r3, #8
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f103 0208 	add.w	r2, r3, #8
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800264a:	bf00      	nop
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002656:	b480      	push	{r7}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002670:	b480      	push	{r7}
 8002672:	b085      	sub	sp, #20
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002686:	d103      	bne.n	8002690 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	e00c      	b.n	80026aa <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	3308      	adds	r3, #8
 8002694:	60fb      	str	r3, [r7, #12]
 8002696:	e002      	b.n	800269e <vListInsert+0x2e>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68ba      	ldr	r2, [r7, #8]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d2f6      	bcs.n	8002698 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	685a      	ldr	r2, [r3, #4]
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	683a      	ldr	r2, [r7, #0]
 80026b8:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	1c5a      	adds	r2, r3, #1
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	601a      	str	r2, [r3, #0]
}
 80026d6:	bf00      	nop
 80026d8:	3714      	adds	r7, #20
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr

080026e2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80026e2:	b480      	push	{r7}
 80026e4:	b085      	sub	sp, #20
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6892      	ldr	r2, [r2, #8]
 80026f8:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	6852      	ldr	r2, [r2, #4]
 8002702:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	429a      	cmp	r2, r3
 800270c:	d103      	bne.n	8002716 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689a      	ldr	r2, [r3, #8]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	1e5a      	subs	r2, r3, #1
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
}
 800272a:	4618      	mov	r0, r3
 800272c:	3714      	adds	r7, #20
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
	...

08002738 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002742:	2301      	movs	r3, #1
 8002744:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d10a      	bne.n	8002766 <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002754:	f383 8811 	msr	BASEPRI, r3
 8002758:	f3bf 8f6f 	isb	sy
 800275c:	f3bf 8f4f 	dsb	sy
 8002760:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8002762:	bf00      	nop
 8002764:	e7fe      	b.n	8002764 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d05d      	beq.n	8002828 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8002770:	2b00      	cmp	r3, #0
 8002772:	d059      	beq.n	8002828 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800277c:	2100      	movs	r1, #0
 800277e:	fba3 2302 	umull	r2, r3, r3, r2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d000      	beq.n	8002788 <xQueueGenericReset+0x50>
 8002786:	2101      	movs	r1, #1
 8002788:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800278a:	2b00      	cmp	r3, #0
 800278c:	d14c      	bne.n	8002828 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 800278e:	f002 fab3 	bl	8004cf8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800279a:	6939      	ldr	r1, [r7, #16]
 800279c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800279e:	fb01 f303 	mul.w	r3, r1, r3
 80027a2:	441a      	add	r2, r3
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	2200      	movs	r2, #0
 80027ac:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027be:	3b01      	subs	r3, #1
 80027c0:	6939      	ldr	r1, [r7, #16]
 80027c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80027c4:	fb01 f303 	mul.w	r3, r1, r3
 80027c8:	441a      	add	r2, r3
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	22ff      	movs	r2, #255	; 0xff
 80027d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	22ff      	movs	r2, #255	; 0xff
 80027da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d114      	bne.n	800280e <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d01a      	beq.n	8002822 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	3310      	adds	r3, #16
 80027f0:	4618      	mov	r0, r3
 80027f2:	f001 fa0f 	bl	8003c14 <xTaskRemoveFromEventList>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d012      	beq.n	8002822 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80027fc:	4b15      	ldr	r3, [pc, #84]	; (8002854 <xQueueGenericReset+0x11c>)
 80027fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	f3bf 8f4f 	dsb	sy
 8002808:	f3bf 8f6f 	isb	sy
 800280c:	e009      	b.n	8002822 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	3310      	adds	r3, #16
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff feff 	bl	8002616 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	3324      	adds	r3, #36	; 0x24
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff fefa 	bl	8002616 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002822:	f002 fa99 	bl	8004d58 <vPortExitCritical>
 8002826:	e001      	b.n	800282c <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8002828:	2300      	movs	r3, #0
 800282a:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10a      	bne.n	8002848 <xQueueGenericReset+0x110>
        __asm volatile
 8002832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002836:	f383 8811 	msr	BASEPRI, r3
 800283a:	f3bf 8f6f 	isb	sy
 800283e:	f3bf 8f4f 	dsb	sy
 8002842:	60bb      	str	r3, [r7, #8]
    }
 8002844:	bf00      	nop
 8002846:	e7fe      	b.n	8002846 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002848:	697b      	ldr	r3, [r7, #20]
}
 800284a:	4618      	mov	r0, r3
 800284c:	3718      	adds	r7, #24
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	e000ed04 	.word	0xe000ed04

08002858 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002858:	b580      	push	{r7, lr}
 800285a:	b08a      	sub	sp, #40	; 0x28
 800285c:	af02      	add	r7, sp, #8
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	4613      	mov	r3, r2
 8002864:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002866:	2300      	movs	r3, #0
 8002868:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d02e      	beq.n	80028ce <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002870:	2100      	movs	r1, #0
 8002872:	68ba      	ldr	r2, [r7, #8]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	fba3 2302 	umull	r2, r3, r3, r2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d000      	beq.n	8002880 <xQueueGenericCreate+0x28>
 800287e:	2101      	movs	r1, #1
 8002880:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002882:	2b00      	cmp	r3, #0
 8002884:	d123      	bne.n	80028ce <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	68ba      	ldr	r2, [r7, #8]
 800288a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800288e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002892:	d81c      	bhi.n	80028ce <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	68ba      	ldr	r2, [r7, #8]
 8002898:	fb02 f303 	mul.w	r3, r2, r3
 800289c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	3350      	adds	r3, #80	; 0x50
 80028a2:	4618      	mov	r0, r3
 80028a4:	f002 fb0a 	bl	8004ebc <pvPortMalloc>
 80028a8:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d01c      	beq.n	80028ea <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	3350      	adds	r3, #80	; 0x50
 80028b8:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80028ba:	79fa      	ldrb	r2, [r7, #7]
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	4613      	mov	r3, r2
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	68b9      	ldr	r1, [r7, #8]
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f000 f814 	bl	80028f4 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80028cc:	e00d      	b.n	80028ea <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d10a      	bne.n	80028ea <xQueueGenericCreate+0x92>
        __asm volatile
 80028d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028d8:	f383 8811 	msr	BASEPRI, r3
 80028dc:	f3bf 8f6f 	isb	sy
 80028e0:	f3bf 8f4f 	dsb	sy
 80028e4:	613b      	str	r3, [r7, #16]
    }
 80028e6:	bf00      	nop
 80028e8:	e7fe      	b.n	80028e8 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80028ea:	69fb      	ldr	r3, [r7, #28]
    }
 80028ec:	4618      	mov	r0, r3
 80028ee:	3720      	adds	r7, #32
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
 8002900:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d103      	bne.n	8002910 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	601a      	str	r2, [r3, #0]
 800290e:	e002      	b.n	8002916 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	68ba      	ldr	r2, [r7, #8]
 8002920:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002922:	2101      	movs	r1, #1
 8002924:	69b8      	ldr	r0, [r7, #24]
 8002926:	f7ff ff07 	bl	8002738 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	78fa      	ldrb	r2, [r7, #3]
 800292e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002932:	bf00      	nop
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
	...

0800293c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b08e      	sub	sp, #56	; 0x38
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
 8002948:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800294a:	2300      	movs	r3, #0
 800294c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002954:	2b00      	cmp	r3, #0
 8002956:	d10a      	bne.n	800296e <xQueueGenericSend+0x32>
        __asm volatile
 8002958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800295c:	f383 8811 	msr	BASEPRI, r3
 8002960:	f3bf 8f6f 	isb	sy
 8002964:	f3bf 8f4f 	dsb	sy
 8002968:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800296a:	bf00      	nop
 800296c:	e7fe      	b.n	800296c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d103      	bne.n	800297c <xQueueGenericSend+0x40>
 8002974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002978:	2b00      	cmp	r3, #0
 800297a:	d101      	bne.n	8002980 <xQueueGenericSend+0x44>
 800297c:	2301      	movs	r3, #1
 800297e:	e000      	b.n	8002982 <xQueueGenericSend+0x46>
 8002980:	2300      	movs	r3, #0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10a      	bne.n	800299c <xQueueGenericSend+0x60>
        __asm volatile
 8002986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800298a:	f383 8811 	msr	BASEPRI, r3
 800298e:	f3bf 8f6f 	isb	sy
 8002992:	f3bf 8f4f 	dsb	sy
 8002996:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002998:	bf00      	nop
 800299a:	e7fe      	b.n	800299a <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d103      	bne.n	80029aa <xQueueGenericSend+0x6e>
 80029a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d101      	bne.n	80029ae <xQueueGenericSend+0x72>
 80029aa:	2301      	movs	r3, #1
 80029ac:	e000      	b.n	80029b0 <xQueueGenericSend+0x74>
 80029ae:	2300      	movs	r3, #0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d10a      	bne.n	80029ca <xQueueGenericSend+0x8e>
        __asm volatile
 80029b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b8:	f383 8811 	msr	BASEPRI, r3
 80029bc:	f3bf 8f6f 	isb	sy
 80029c0:	f3bf 8f4f 	dsb	sy
 80029c4:	623b      	str	r3, [r7, #32]
    }
 80029c6:	bf00      	nop
 80029c8:	e7fe      	b.n	80029c8 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80029ca:	f001 fb33 	bl	8004034 <xTaskGetSchedulerState>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d102      	bne.n	80029da <xQueueGenericSend+0x9e>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <xQueueGenericSend+0xa2>
 80029da:	2301      	movs	r3, #1
 80029dc:	e000      	b.n	80029e0 <xQueueGenericSend+0xa4>
 80029de:	2300      	movs	r3, #0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10a      	bne.n	80029fa <xQueueGenericSend+0xbe>
        __asm volatile
 80029e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e8:	f383 8811 	msr	BASEPRI, r3
 80029ec:	f3bf 8f6f 	isb	sy
 80029f0:	f3bf 8f4f 	dsb	sy
 80029f4:	61fb      	str	r3, [r7, #28]
    }
 80029f6:	bf00      	nop
 80029f8:	e7fe      	b.n	80029f8 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80029fa:	f002 f97d 	bl	8004cf8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80029fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d302      	bcc.n	8002a10 <xQueueGenericSend+0xd4>
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d129      	bne.n	8002a64 <xQueueGenericSend+0x128>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	68b9      	ldr	r1, [r7, #8]
 8002a14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a16:	f000 fa85 	bl	8002f24 <prvCopyDataToQueue>
 8002a1a:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d010      	beq.n	8002a46 <xQueueGenericSend+0x10a>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a26:	3324      	adds	r3, #36	; 0x24
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f001 f8f3 	bl	8003c14 <xTaskRemoveFromEventList>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d013      	beq.n	8002a5c <xQueueGenericSend+0x120>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002a34:	4b3f      	ldr	r3, [pc, #252]	; (8002b34 <xQueueGenericSend+0x1f8>)
 8002a36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	f3bf 8f4f 	dsb	sy
 8002a40:	f3bf 8f6f 	isb	sy
 8002a44:	e00a      	b.n	8002a5c <xQueueGenericSend+0x120>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8002a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d007      	beq.n	8002a5c <xQueueGenericSend+0x120>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8002a4c:	4b39      	ldr	r3, [pc, #228]	; (8002b34 <xQueueGenericSend+0x1f8>)
 8002a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	f3bf 8f4f 	dsb	sy
 8002a58:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002a5c:	f002 f97c 	bl	8004d58 <vPortExitCritical>
                return pdPASS;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e063      	b.n	8002b2c <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d103      	bne.n	8002a72 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002a6a:	f002 f975 	bl	8004d58 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	e05c      	b.n	8002b2c <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d106      	bne.n	8002a86 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002a78:	f107 0314 	add.w	r3, r7, #20
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f001 f99f 	bl	8003dc0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002a82:	2301      	movs	r3, #1
 8002a84:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002a86:	f002 f967 	bl	8004d58 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002a8a:	f000 fdcd 	bl	8003628 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002a8e:	f002 f933 	bl	8004cf8 <vPortEnterCritical>
 8002a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a98:	b25b      	sxtb	r3, r3
 8002a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a9e:	d103      	bne.n	8002aa8 <xQueueGenericSend+0x16c>
 8002aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aaa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002aae:	b25b      	sxtb	r3, r3
 8002ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab4:	d103      	bne.n	8002abe <xQueueGenericSend+0x182>
 8002ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002abe:	f002 f94b 	bl	8004d58 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ac2:	1d3a      	adds	r2, r7, #4
 8002ac4:	f107 0314 	add.w	r3, r7, #20
 8002ac8:	4611      	mov	r1, r2
 8002aca:	4618      	mov	r0, r3
 8002acc:	f001 f98e 	bl	8003dec <xTaskCheckForTimeOut>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d124      	bne.n	8002b20 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002ad6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ad8:	f000 fb1c 	bl	8003114 <prvIsQueueFull>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d018      	beq.n	8002b14 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae4:	3310      	adds	r3, #16
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	4611      	mov	r1, r2
 8002aea:	4618      	mov	r0, r3
 8002aec:	f001 f828 	bl	8003b40 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002af0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002af2:	f000 faa7 	bl	8003044 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002af6:	f000 fda5 	bl	8003644 <xTaskResumeAll>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f47f af7c 	bne.w	80029fa <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002b02:	4b0c      	ldr	r3, [pc, #48]	; (8002b34 <xQueueGenericSend+0x1f8>)
 8002b04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b08:	601a      	str	r2, [r3, #0]
 8002b0a:	f3bf 8f4f 	dsb	sy
 8002b0e:	f3bf 8f6f 	isb	sy
 8002b12:	e772      	b.n	80029fa <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002b14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b16:	f000 fa95 	bl	8003044 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002b1a:	f000 fd93 	bl	8003644 <xTaskResumeAll>
 8002b1e:	e76c      	b.n	80029fa <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002b20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b22:	f000 fa8f 	bl	8003044 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002b26:	f000 fd8d 	bl	8003644 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8002b2a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3738      	adds	r7, #56	; 0x38
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	e000ed04 	.word	0xe000ed04

08002b38 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b08c      	sub	sp, #48	; 0x30
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002b44:	2300      	movs	r3, #0
 8002b46:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10a      	bne.n	8002b68 <xQueueReceive+0x30>
        __asm volatile
 8002b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b56:	f383 8811 	msr	BASEPRI, r3
 8002b5a:	f3bf 8f6f 	isb	sy
 8002b5e:	f3bf 8f4f 	dsb	sy
 8002b62:	623b      	str	r3, [r7, #32]
    }
 8002b64:	bf00      	nop
 8002b66:	e7fe      	b.n	8002b66 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d103      	bne.n	8002b76 <xQueueReceive+0x3e>
 8002b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <xQueueReceive+0x42>
 8002b76:	2301      	movs	r3, #1
 8002b78:	e000      	b.n	8002b7c <xQueueReceive+0x44>
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10a      	bne.n	8002b96 <xQueueReceive+0x5e>
        __asm volatile
 8002b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b84:	f383 8811 	msr	BASEPRI, r3
 8002b88:	f3bf 8f6f 	isb	sy
 8002b8c:	f3bf 8f4f 	dsb	sy
 8002b90:	61fb      	str	r3, [r7, #28]
    }
 8002b92:	bf00      	nop
 8002b94:	e7fe      	b.n	8002b94 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b96:	f001 fa4d 	bl	8004034 <xTaskGetSchedulerState>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d102      	bne.n	8002ba6 <xQueueReceive+0x6e>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <xQueueReceive+0x72>
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e000      	b.n	8002bac <xQueueReceive+0x74>
 8002baa:	2300      	movs	r3, #0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d10a      	bne.n	8002bc6 <xQueueReceive+0x8e>
        __asm volatile
 8002bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb4:	f383 8811 	msr	BASEPRI, r3
 8002bb8:	f3bf 8f6f 	isb	sy
 8002bbc:	f3bf 8f4f 	dsb	sy
 8002bc0:	61bb      	str	r3, [r7, #24]
    }
 8002bc2:	bf00      	nop
 8002bc4:	e7fe      	b.n	8002bc4 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002bc6:	f002 f897 	bl	8004cf8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bce:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d01f      	beq.n	8002c16 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002bd6:	68b9      	ldr	r1, [r7, #8]
 8002bd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bda:	f000 fa0d 	bl	8002ff8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be0:	1e5a      	subs	r2, r3, #1
 8002be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be4:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00f      	beq.n	8002c0e <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf0:	3310      	adds	r3, #16
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f001 f80e 	bl	8003c14 <xTaskRemoveFromEventList>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d007      	beq.n	8002c0e <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002bfe:	4b3d      	ldr	r3, [pc, #244]	; (8002cf4 <xQueueReceive+0x1bc>)
 8002c00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c04:	601a      	str	r2, [r3, #0]
 8002c06:	f3bf 8f4f 	dsb	sy
 8002c0a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002c0e:	f002 f8a3 	bl	8004d58 <vPortExitCritical>
                return pdPASS;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e069      	b.n	8002cea <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d103      	bne.n	8002c24 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002c1c:	f002 f89c 	bl	8004d58 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002c20:	2300      	movs	r3, #0
 8002c22:	e062      	b.n	8002cea <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d106      	bne.n	8002c38 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002c2a:	f107 0310 	add.w	r3, r7, #16
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f001 f8c6 	bl	8003dc0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002c34:	2301      	movs	r3, #1
 8002c36:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002c38:	f002 f88e 	bl	8004d58 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002c3c:	f000 fcf4 	bl	8003628 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002c40:	f002 f85a 	bl	8004cf8 <vPortEnterCritical>
 8002c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c4a:	b25b      	sxtb	r3, r3
 8002c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c50:	d103      	bne.n	8002c5a <xQueueReceive+0x122>
 8002c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c60:	b25b      	sxtb	r3, r3
 8002c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c66:	d103      	bne.n	8002c70 <xQueueReceive+0x138>
 8002c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c70:	f002 f872 	bl	8004d58 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c74:	1d3a      	adds	r2, r7, #4
 8002c76:	f107 0310 	add.w	r3, r7, #16
 8002c7a:	4611      	mov	r1, r2
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f001 f8b5 	bl	8003dec <xTaskCheckForTimeOut>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d123      	bne.n	8002cd0 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c8a:	f000 fa2d 	bl	80030e8 <prvIsQueueEmpty>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d017      	beq.n	8002cc4 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c96:	3324      	adds	r3, #36	; 0x24
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	4611      	mov	r1, r2
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f000 ff4f 	bl	8003b40 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002ca2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ca4:	f000 f9ce 	bl	8003044 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002ca8:	f000 fccc 	bl	8003644 <xTaskResumeAll>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d189      	bne.n	8002bc6 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002cb2:	4b10      	ldr	r3, [pc, #64]	; (8002cf4 <xQueueReceive+0x1bc>)
 8002cb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	f3bf 8f4f 	dsb	sy
 8002cbe:	f3bf 8f6f 	isb	sy
 8002cc2:	e780      	b.n	8002bc6 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002cc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cc6:	f000 f9bd 	bl	8003044 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002cca:	f000 fcbb 	bl	8003644 <xTaskResumeAll>
 8002cce:	e77a      	b.n	8002bc6 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002cd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cd2:	f000 f9b7 	bl	8003044 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002cd6:	f000 fcb5 	bl	8003644 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002cda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cdc:	f000 fa04 	bl	80030e8 <prvIsQueueEmpty>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f43f af6f 	beq.w	8002bc6 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002ce8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3730      	adds	r7, #48	; 0x30
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	e000ed04 	.word	0xe000ed04

08002cf8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b08c      	sub	sp, #48	; 0x30
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002d02:	2300      	movs	r3, #0
 8002d04:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	627b      	str	r3, [r7, #36]	; 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	62bb      	str	r3, [r7, #40]	; 0x28
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d10a      	bne.n	8002d2a <xQueueSemaphoreTake+0x32>
        __asm volatile
 8002d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d18:	f383 8811 	msr	BASEPRI, r3
 8002d1c:	f3bf 8f6f 	isb	sy
 8002d20:	f3bf 8f4f 	dsb	sy
 8002d24:	61bb      	str	r3, [r7, #24]
    }
 8002d26:	bf00      	nop
 8002d28:	e7fe      	b.n	8002d28 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00a      	beq.n	8002d48 <xQueueSemaphoreTake+0x50>
        __asm volatile
 8002d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d36:	f383 8811 	msr	BASEPRI, r3
 8002d3a:	f3bf 8f6f 	isb	sy
 8002d3e:	f3bf 8f4f 	dsb	sy
 8002d42:	617b      	str	r3, [r7, #20]
    }
 8002d44:	bf00      	nop
 8002d46:	e7fe      	b.n	8002d46 <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d48:	f001 f974 	bl	8004034 <xTaskGetSchedulerState>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d102      	bne.n	8002d58 <xQueueSemaphoreTake+0x60>
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <xQueueSemaphoreTake+0x64>
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e000      	b.n	8002d5e <xQueueSemaphoreTake+0x66>
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d10a      	bne.n	8002d78 <xQueueSemaphoreTake+0x80>
        __asm volatile
 8002d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d66:	f383 8811 	msr	BASEPRI, r3
 8002d6a:	f3bf 8f6f 	isb	sy
 8002d6e:	f3bf 8f4f 	dsb	sy
 8002d72:	613b      	str	r3, [r7, #16]
    }
 8002d74:	bf00      	nop
 8002d76:	e7fe      	b.n	8002d76 <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002d78:	f001 ffbe 	bl	8004cf8 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d80:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002d82:	6a3b      	ldr	r3, [r7, #32]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d024      	beq.n	8002dd2 <xQueueSemaphoreTake+0xda>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002d88:	6a3b      	ldr	r3, [r7, #32]
 8002d8a:	1e5a      	subs	r2, r3, #1
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8e:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d104      	bne.n	8002da2 <xQueueSemaphoreTake+0xaa>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002d98:	f001 fb64 	bl	8004464 <pvTaskIncrementMutexHeldCount>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da0:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00f      	beq.n	8002dca <xQueueSemaphoreTake+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	3310      	adds	r3, #16
 8002dae:	4618      	mov	r0, r3
 8002db0:	f000 ff30 	bl	8003c14 <xTaskRemoveFromEventList>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d007      	beq.n	8002dca <xQueueSemaphoreTake+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002dba:	4b4d      	ldr	r3, [pc, #308]	; (8002ef0 <xQueueSemaphoreTake+0x1f8>)
 8002dbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	f3bf 8f4f 	dsb	sy
 8002dc6:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002dca:	f001 ffc5 	bl	8004d58 <vPortExitCritical>
                return pdPASS;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e089      	b.n	8002ee6 <xQueueSemaphoreTake+0x1ee>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d103      	bne.n	8002de0 <xQueueSemaphoreTake+0xe8>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8002dd8:	f001 ffbe 	bl	8004d58 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	e082      	b.n	8002ee6 <xQueueSemaphoreTake+0x1ee>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d106      	bne.n	8002df4 <xQueueSemaphoreTake+0xfc>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002de6:	f107 0308 	add.w	r3, r7, #8
 8002dea:	4618      	mov	r0, r3
 8002dec:	f000 ffe8 	bl	8003dc0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002df0:	2301      	movs	r3, #1
 8002df2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002df4:	f001 ffb0 	bl	8004d58 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002df8:	f000 fc16 	bl	8003628 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002dfc:	f001 ff7c 	bl	8004cf8 <vPortEnterCritical>
 8002e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e06:	b25b      	sxtb	r3, r3
 8002e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e0c:	d103      	bne.n	8002e16 <xQueueSemaphoreTake+0x11e>
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e1c:	b25b      	sxtb	r3, r3
 8002e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e22:	d103      	bne.n	8002e2c <xQueueSemaphoreTake+0x134>
 8002e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e2c:	f001 ff94 	bl	8004d58 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e30:	463a      	mov	r2, r7
 8002e32:	f107 0308 	add.w	r3, r7, #8
 8002e36:	4611      	mov	r1, r2
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f000 ffd7 	bl	8003dec <xTaskCheckForTimeOut>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d132      	bne.n	8002eaa <xQueueSemaphoreTake+0x1b2>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e46:	f000 f94f 	bl	80030e8 <prvIsQueueEmpty>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d026      	beq.n	8002e9e <xQueueSemaphoreTake+0x1a6>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d109      	bne.n	8002e6c <xQueueSemaphoreTake+0x174>
                    {
                        taskENTER_CRITICAL();
 8002e58:	f001 ff4e 	bl	8004cf8 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f001 f905 	bl	8004070 <xTaskPriorityInherit>
 8002e66:	62b8      	str	r0, [r7, #40]	; 0x28
                        }
                        taskEXIT_CRITICAL();
 8002e68:	f001 ff76 	bl	8004d58 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6e:	3324      	adds	r3, #36	; 0x24
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	4611      	mov	r1, r2
 8002e74:	4618      	mov	r0, r3
 8002e76:	f000 fe63 	bl	8003b40 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002e7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e7c:	f000 f8e2 	bl	8003044 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002e80:	f000 fbe0 	bl	8003644 <xTaskResumeAll>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f47f af76 	bne.w	8002d78 <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 8002e8c:	4b18      	ldr	r3, [pc, #96]	; (8002ef0 <xQueueSemaphoreTake+0x1f8>)
 8002e8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	f3bf 8f4f 	dsb	sy
 8002e98:	f3bf 8f6f 	isb	sy
 8002e9c:	e76c      	b.n	8002d78 <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8002e9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ea0:	f000 f8d0 	bl	8003044 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002ea4:	f000 fbce 	bl	8003644 <xTaskResumeAll>
 8002ea8:	e766      	b.n	8002d78 <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8002eaa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002eac:	f000 f8ca 	bl	8003044 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002eb0:	f000 fbc8 	bl	8003644 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002eb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002eb6:	f000 f917 	bl	80030e8 <prvIsQueueEmpty>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f43f af5b 	beq.w	8002d78 <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 8002ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00d      	beq.n	8002ee4 <xQueueSemaphoreTake+0x1ec>
                    {
                        taskENTER_CRITICAL();
 8002ec8:	f001 ff16 	bl	8004cf8 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002ecc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ece:	f000 f811 	bl	8002ef4 <prvGetDisinheritPriorityAfterTimeout>
 8002ed2:	61f8      	str	r0, [r7, #28]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	69f9      	ldr	r1, [r7, #28]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f001 fa0a 	bl	80042f4 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 8002ee0:	f001 ff3a 	bl	8004d58 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002ee4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3730      	adds	r7, #48	; 0x30
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	e000ed04 	.word	0xe000ed04

08002ef4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d006      	beq.n	8002f12 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f1c3 0305 	rsb	r3, r3, #5
 8002f0e:	60fb      	str	r3, [r7, #12]
 8002f10:	e001      	b.n	8002f16 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002f12:	2300      	movs	r3, #0
 8002f14:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8002f16:	68fb      	ldr	r3, [r7, #12]
    }
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3714      	adds	r7, #20
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002f30:	2300      	movs	r3, #0
 8002f32:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f38:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10d      	bne.n	8002f5e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d14d      	bne.n	8002fe6 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f001 f92c 	bl	80041ac <xTaskPriorityDisinherit>
 8002f54:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	609a      	str	r2, [r3, #8]
 8002f5c:	e043      	b.n	8002fe6 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d119      	bne.n	8002f98 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6858      	ldr	r0, [r3, #4]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	68b9      	ldr	r1, [r7, #8]
 8002f70:	f002 f994 	bl	800529c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7c:	441a      	add	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d32b      	bcc.n	8002fe6 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	605a      	str	r2, [r3, #4]
 8002f96:	e026      	b.n	8002fe6 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	68d8      	ldr	r0, [r3, #12]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	68b9      	ldr	r1, [r7, #8]
 8002fa4:	f002 f97a 	bl	800529c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	68da      	ldr	r2, [r3, #12]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb0:	425b      	negs	r3, r3
 8002fb2:	441a      	add	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	68da      	ldr	r2, [r3, #12]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d207      	bcs.n	8002fd4 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fcc:	425b      	negs	r3, r3
 8002fce:	441a      	add	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d105      	bne.n	8002fe6 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d002      	beq.n	8002fe6 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1c5a      	adds	r2, r3, #1
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002fee:	697b      	ldr	r3, [r7, #20]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3718      	adds	r7, #24
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	2b00      	cmp	r3, #0
 8003008:	d018      	beq.n	800303c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68da      	ldr	r2, [r3, #12]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	441a      	add	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	68da      	ldr	r2, [r3, #12]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	429a      	cmp	r2, r3
 8003022:	d303      	bcc.n	800302c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68d9      	ldr	r1, [r3, #12]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003034:	461a      	mov	r2, r3
 8003036:	6838      	ldr	r0, [r7, #0]
 8003038:	f002 f930 	bl	800529c <memcpy>
    }
}
 800303c:	bf00      	nop
 800303e:	3708      	adds	r7, #8
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800304c:	f001 fe54 	bl	8004cf8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003056:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003058:	e011      	b.n	800307e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305e:	2b00      	cmp	r3, #0
 8003060:	d012      	beq.n	8003088 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	3324      	adds	r3, #36	; 0x24
 8003066:	4618      	mov	r0, r3
 8003068:	f000 fdd4 	bl	8003c14 <xTaskRemoveFromEventList>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8003072:	f000 ff21 	bl	8003eb8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003076:	7bfb      	ldrb	r3, [r7, #15]
 8003078:	3b01      	subs	r3, #1
 800307a:	b2db      	uxtb	r3, r3
 800307c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800307e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003082:	2b00      	cmp	r3, #0
 8003084:	dce9      	bgt.n	800305a <prvUnlockQueue+0x16>
 8003086:	e000      	b.n	800308a <prvUnlockQueue+0x46>
                    break;
 8003088:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	22ff      	movs	r2, #255	; 0xff
 800308e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8003092:	f001 fe61 	bl	8004d58 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003096:	f001 fe2f 	bl	8004cf8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030a0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80030a2:	e011      	b.n	80030c8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d012      	beq.n	80030d2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	3310      	adds	r3, #16
 80030b0:	4618      	mov	r0, r3
 80030b2:	f000 fdaf 	bl	8003c14 <xTaskRemoveFromEventList>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80030bc:	f000 fefc 	bl	8003eb8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80030c0:	7bbb      	ldrb	r3, [r7, #14]
 80030c2:	3b01      	subs	r3, #1
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80030c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	dce9      	bgt.n	80030a4 <prvUnlockQueue+0x60>
 80030d0:	e000      	b.n	80030d4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80030d2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	22ff      	movs	r2, #255	; 0xff
 80030d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80030dc:	f001 fe3c 	bl	8004d58 <vPortExitCritical>
}
 80030e0:	bf00      	nop
 80030e2:	3710      	adds	r7, #16
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80030f0:	f001 fe02 	bl	8004cf8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d102      	bne.n	8003102 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80030fc:	2301      	movs	r3, #1
 80030fe:	60fb      	str	r3, [r7, #12]
 8003100:	e001      	b.n	8003106 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003102:	2300      	movs	r3, #0
 8003104:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003106:	f001 fe27 	bl	8004d58 <vPortExitCritical>

    return xReturn;
 800310a:	68fb      	ldr	r3, [r7, #12]
}
 800310c:	4618      	mov	r0, r3
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800311c:	f001 fdec 	bl	8004cf8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003128:	429a      	cmp	r2, r3
 800312a:	d102      	bne.n	8003132 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800312c:	2301      	movs	r3, #1
 800312e:	60fb      	str	r3, [r7, #12]
 8003130:	e001      	b.n	8003136 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8003132:	2300      	movs	r3, #0
 8003134:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003136:	f001 fe0f 	bl	8004d58 <vPortExitCritical>

    return xReturn;
 800313a:	68fb      	ldr	r3, [r7, #12]
}
 800313c:	4618      	mov	r0, r3
 800313e:	3710      	adds	r7, #16
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003144:	b480      	push	{r7}
 8003146:	b087      	sub	sp, #28
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800314e:	2300      	movs	r3, #0
 8003150:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d10a      	bne.n	800316e <vQueueAddToRegistry+0x2a>
        __asm volatile
 8003158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800315c:	f383 8811 	msr	BASEPRI, r3
 8003160:	f3bf 8f6f 	isb	sy
 8003164:	f3bf 8f4f 	dsb	sy
 8003168:	60fb      	str	r3, [r7, #12]
    }
 800316a:	bf00      	nop
 800316c:	e7fe      	b.n	800316c <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d024      	beq.n	80031be <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003174:	2300      	movs	r3, #0
 8003176:	617b      	str	r3, [r7, #20]
 8003178:	e01e      	b.n	80031b8 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800317a:	4a18      	ldr	r2, [pc, #96]	; (80031dc <vQueueAddToRegistry+0x98>)
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	4413      	add	r3, r2
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	429a      	cmp	r2, r3
 8003188:	d105      	bne.n	8003196 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	4a13      	ldr	r2, [pc, #76]	; (80031dc <vQueueAddToRegistry+0x98>)
 8003190:	4413      	add	r3, r2
 8003192:	613b      	str	r3, [r7, #16]
                    break;
 8003194:	e013      	b.n	80031be <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d10a      	bne.n	80031b2 <vQueueAddToRegistry+0x6e>
 800319c:	4a0f      	ldr	r2, [pc, #60]	; (80031dc <vQueueAddToRegistry+0x98>)
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d104      	bne.n	80031b2 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	4a0b      	ldr	r2, [pc, #44]	; (80031dc <vQueueAddToRegistry+0x98>)
 80031ae:	4413      	add	r3, r2
 80031b0:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	3301      	adds	r3, #1
 80031b6:	617b      	str	r3, [r7, #20]
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	2b07      	cmp	r3, #7
 80031bc:	d9dd      	bls.n	800317a <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d005      	beq.n	80031d0 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	683a      	ldr	r2, [r7, #0]
 80031c8:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80031d0:	bf00      	nop
 80031d2:	371c      	adds	r7, #28
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	200000c8 	.word	0x200000c8

080031e0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80031f0:	f001 fd82 	bl	8004cf8 <vPortEnterCritical>
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031fa:	b25b      	sxtb	r3, r3
 80031fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003200:	d103      	bne.n	800320a <vQueueWaitForMessageRestricted+0x2a>
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003210:	b25b      	sxtb	r3, r3
 8003212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003216:	d103      	bne.n	8003220 <vQueueWaitForMessageRestricted+0x40>
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003220:	f001 fd9a 	bl	8004d58 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003228:	2b00      	cmp	r3, #0
 800322a:	d106      	bne.n	800323a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	3324      	adds	r3, #36	; 0x24
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	68b9      	ldr	r1, [r7, #8]
 8003234:	4618      	mov	r0, r3
 8003236:	f000 fca7 	bl	8003b88 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800323a:	6978      	ldr	r0, [r7, #20]
 800323c:	f7ff ff02 	bl	8003044 <prvUnlockQueue>
    }
 8003240:	bf00      	nop
 8003242:	3718      	adds	r7, #24
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003248:	b580      	push	{r7, lr}
 800324a:	b08c      	sub	sp, #48	; 0x30
 800324c:	af04      	add	r7, sp, #16
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	603b      	str	r3, [r7, #0]
 8003254:	4613      	mov	r3, r2
 8003256:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003258:	88fb      	ldrh	r3, [r7, #6]
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	4618      	mov	r0, r3
 800325e:	f001 fe2d 	bl	8004ebc <pvPortMalloc>
 8003262:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d013      	beq.n	8003292 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800326a:	2060      	movs	r0, #96	; 0x60
 800326c:	f001 fe26 	bl	8004ebc <pvPortMalloc>
 8003270:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d008      	beq.n	800328a <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8003278:	2260      	movs	r2, #96	; 0x60
 800327a:	2100      	movs	r1, #0
 800327c:	69f8      	ldr	r0, [r7, #28]
 800327e:	f002 f81b 	bl	80052b8 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	697a      	ldr	r2, [r7, #20]
 8003286:	631a      	str	r2, [r3, #48]	; 0x30
 8003288:	e005      	b.n	8003296 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800328a:	6978      	ldr	r0, [r7, #20]
 800328c:	f001 fed0 	bl	8005030 <vPortFree>
 8003290:	e001      	b.n	8003296 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8003292:	2300      	movs	r3, #0
 8003294:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d013      	beq.n	80032c4 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800329c:	88fa      	ldrh	r2, [r7, #6]
 800329e:	2300      	movs	r3, #0
 80032a0:	9303      	str	r3, [sp, #12]
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	9302      	str	r3, [sp, #8]
 80032a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a8:	9301      	str	r3, [sp, #4]
 80032aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ac:	9300      	str	r3, [sp, #0]
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	68b9      	ldr	r1, [r7, #8]
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f000 f80e 	bl	80032d4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80032b8:	69f8      	ldr	r0, [r7, #28]
 80032ba:	f000 f899 	bl	80033f0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80032be:	2301      	movs	r3, #1
 80032c0:	61bb      	str	r3, [r7, #24]
 80032c2:	e002      	b.n	80032ca <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80032c4:	f04f 33ff 	mov.w	r3, #4294967295
 80032c8:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80032ca:	69bb      	ldr	r3, [r7, #24]
    }
 80032cc:	4618      	mov	r0, r3
 80032ce:	3720      	adds	r7, #32
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b088      	sub	sp, #32
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
 80032e0:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80032e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	461a      	mov	r2, r3
 80032ec:	21a5      	movs	r1, #165	; 0xa5
 80032ee:	f001 ffe3 	bl	80052b8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80032f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80032fc:	3b01      	subs	r3, #1
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	4413      	add	r3, r2
 8003302:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	f023 0307 	bic.w	r3, r3, #7
 800330a:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	f003 0307 	and.w	r3, r3, #7
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00a      	beq.n	800332c <prvInitialiseNewTask+0x58>
        __asm volatile
 8003316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800331a:	f383 8811 	msr	BASEPRI, r3
 800331e:	f3bf 8f6f 	isb	sy
 8003322:	f3bf 8f4f 	dsb	sy
 8003326:	617b      	str	r3, [r7, #20]
    }
 8003328:	bf00      	nop
 800332a:	e7fe      	b.n	800332a <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d01e      	beq.n	8003370 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003332:	2300      	movs	r3, #0
 8003334:	61fb      	str	r3, [r7, #28]
 8003336:	e012      	b.n	800335e <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003338:	68ba      	ldr	r2, [r7, #8]
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	4413      	add	r3, r2
 800333e:	7819      	ldrb	r1, [r3, #0]
 8003340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	4413      	add	r3, r2
 8003346:	3334      	adds	r3, #52	; 0x34
 8003348:	460a      	mov	r2, r1
 800334a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800334c:	68ba      	ldr	r2, [r7, #8]
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	4413      	add	r3, r2
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d006      	beq.n	8003366 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	3301      	adds	r3, #1
 800335c:	61fb      	str	r3, [r7, #28]
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	2b13      	cmp	r3, #19
 8003362:	d9e9      	bls.n	8003338 <prvInitialiseNewTask+0x64>
 8003364:	e000      	b.n	8003368 <prvInitialiseNewTask+0x94>
            {
                break;
 8003366:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336a:	2200      	movs	r2, #0
 800336c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8003370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003372:	2b04      	cmp	r3, #4
 8003374:	d90a      	bls.n	800338c <prvInitialiseNewTask+0xb8>
        __asm volatile
 8003376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800337a:	f383 8811 	msr	BASEPRI, r3
 800337e:	f3bf 8f6f 	isb	sy
 8003382:	f3bf 8f4f 	dsb	sy
 8003386:	613b      	str	r3, [r7, #16]
    }
 8003388:	bf00      	nop
 800338a:	e7fe      	b.n	800338a <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800338c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800338e:	2b04      	cmp	r3, #4
 8003390:	d901      	bls.n	8003396 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003392:	2304      	movs	r3, #4
 8003394:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003398:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800339a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800339c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800339e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033a0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80033a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a4:	3304      	adds	r3, #4
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7ff f955 	bl	8002656 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80033ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ae:	3318      	adds	r3, #24
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7ff f950 	bl	8002656 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80033b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033ba:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033be:	f1c3 0205 	rsb	r2, r3, #5
 80033c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c4:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80033c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033ca:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80033cc:	683a      	ldr	r2, [r7, #0]
 80033ce:	68f9      	ldr	r1, [r7, #12]
 80033d0:	69b8      	ldr	r0, [r7, #24]
 80033d2:	f001 fb5f 	bl	8004a94 <pxPortInitialiseStack>
 80033d6:	4602      	mov	r2, r0
 80033d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033da:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80033dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d002      	beq.n	80033e8 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80033e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033e6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80033e8:	bf00      	nop
 80033ea:	3720      	adds	r7, #32
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80033f8:	f001 fc7e 	bl	8004cf8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80033fc:	4b40      	ldr	r3, [pc, #256]	; (8003500 <prvAddNewTaskToReadyList+0x110>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	3301      	adds	r3, #1
 8003402:	4a3f      	ldr	r2, [pc, #252]	; (8003500 <prvAddNewTaskToReadyList+0x110>)
 8003404:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003406:	4b3f      	ldr	r3, [pc, #252]	; (8003504 <prvAddNewTaskToReadyList+0x114>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d109      	bne.n	8003422 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800340e:	4a3d      	ldr	r2, [pc, #244]	; (8003504 <prvAddNewTaskToReadyList+0x114>)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003414:	4b3a      	ldr	r3, [pc, #232]	; (8003500 <prvAddNewTaskToReadyList+0x110>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d110      	bne.n	800343e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800341c:	f000 fd70 	bl	8003f00 <prvInitialiseTaskLists>
 8003420:	e00d      	b.n	800343e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003422:	4b39      	ldr	r3, [pc, #228]	; (8003508 <prvAddNewTaskToReadyList+0x118>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d109      	bne.n	800343e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800342a:	4b36      	ldr	r3, [pc, #216]	; (8003504 <prvAddNewTaskToReadyList+0x114>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003434:	429a      	cmp	r2, r3
 8003436:	d802      	bhi.n	800343e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003438:	4a32      	ldr	r2, [pc, #200]	; (8003504 <prvAddNewTaskToReadyList+0x114>)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800343e:	4b33      	ldr	r3, [pc, #204]	; (800350c <prvAddNewTaskToReadyList+0x11c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	3301      	adds	r3, #1
 8003444:	4a31      	ldr	r2, [pc, #196]	; (800350c <prvAddNewTaskToReadyList+0x11c>)
 8003446:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003448:	4b30      	ldr	r3, [pc, #192]	; (800350c <prvAddNewTaskToReadyList+0x11c>)
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	649a      	str	r2, [r3, #72]	; 0x48
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003454:	2201      	movs	r2, #1
 8003456:	409a      	lsls	r2, r3
 8003458:	4b2d      	ldr	r3, [pc, #180]	; (8003510 <prvAddNewTaskToReadyList+0x120>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4313      	orrs	r3, r2
 800345e:	4a2c      	ldr	r2, [pc, #176]	; (8003510 <prvAddNewTaskToReadyList+0x120>)
 8003460:	6013      	str	r3, [r2, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003466:	492b      	ldr	r1, [pc, #172]	; (8003514 <prvAddNewTaskToReadyList+0x124>)
 8003468:	4613      	mov	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4413      	add	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	440b      	add	r3, r1
 8003472:	3304      	adds	r3, #4
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	60fb      	str	r3, [r7, #12]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	609a      	str	r2, [r3, #8]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	689a      	ldr	r2, [r3, #8]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	60da      	str	r2, [r3, #12]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	3204      	adds	r2, #4
 800348e:	605a      	str	r2, [r3, #4]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	1d1a      	adds	r2, r3, #4
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	609a      	str	r2, [r3, #8]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800349c:	4613      	mov	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4413      	add	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4a1b      	ldr	r2, [pc, #108]	; (8003514 <prvAddNewTaskToReadyList+0x124>)
 80034a6:	441a      	add	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	615a      	str	r2, [r3, #20]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034b0:	4918      	ldr	r1, [pc, #96]	; (8003514 <prvAddNewTaskToReadyList+0x124>)
 80034b2:	4613      	mov	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4413      	add	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	440b      	add	r3, r1
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	1c59      	adds	r1, r3, #1
 80034c0:	4814      	ldr	r0, [pc, #80]	; (8003514 <prvAddNewTaskToReadyList+0x124>)
 80034c2:	4613      	mov	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4413      	add	r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	4403      	add	r3, r0
 80034cc:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80034ce:	f001 fc43 	bl	8004d58 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80034d2:	4b0d      	ldr	r3, [pc, #52]	; (8003508 <prvAddNewTaskToReadyList+0x118>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00e      	beq.n	80034f8 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80034da:	4b0a      	ldr	r3, [pc, #40]	; (8003504 <prvAddNewTaskToReadyList+0x114>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d207      	bcs.n	80034f8 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80034e8:	4b0b      	ldr	r3, [pc, #44]	; (8003518 <prvAddNewTaskToReadyList+0x128>)
 80034ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	f3bf 8f4f 	dsb	sy
 80034f4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80034f8:	bf00      	nop
 80034fa:	3710      	adds	r7, #16
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	200001e0 	.word	0x200001e0
 8003504:	20000108 	.word	0x20000108
 8003508:	200001ec 	.word	0x200001ec
 800350c:	200001fc 	.word	0x200001fc
 8003510:	200001e8 	.word	0x200001e8
 8003514:	2000010c 	.word	0x2000010c
 8003518:	e000ed04 	.word	0xe000ed04

0800351c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003524:	2300      	movs	r3, #0
 8003526:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d017      	beq.n	800355e <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800352e:	4b13      	ldr	r3, [pc, #76]	; (800357c <vTaskDelay+0x60>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00a      	beq.n	800354c <vTaskDelay+0x30>
        __asm volatile
 8003536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800353a:	f383 8811 	msr	BASEPRI, r3
 800353e:	f3bf 8f6f 	isb	sy
 8003542:	f3bf 8f4f 	dsb	sy
 8003546:	60bb      	str	r3, [r7, #8]
    }
 8003548:	bf00      	nop
 800354a:	e7fe      	b.n	800354a <vTaskDelay+0x2e>
            vTaskSuspendAll();
 800354c:	f000 f86c 	bl	8003628 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003550:	2100      	movs	r1, #0
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 ff9a 	bl	800448c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003558:	f000 f874 	bl	8003644 <xTaskResumeAll>
 800355c:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d107      	bne.n	8003574 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8003564:	4b06      	ldr	r3, [pc, #24]	; (8003580 <vTaskDelay+0x64>)
 8003566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800356a:	601a      	str	r2, [r3, #0]
 800356c:	f3bf 8f4f 	dsb	sy
 8003570:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003574:	bf00      	nop
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	20000208 	.word	0x20000208
 8003580:	e000ed04 	.word	0xe000ed04

08003584 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 800358a:	4b20      	ldr	r3, [pc, #128]	; (800360c <vTaskStartScheduler+0x88>)
 800358c:	9301      	str	r3, [sp, #4]
 800358e:	2300      	movs	r3, #0
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	2300      	movs	r3, #0
 8003594:	2282      	movs	r2, #130	; 0x82
 8003596:	491e      	ldr	r1, [pc, #120]	; (8003610 <vTaskStartScheduler+0x8c>)
 8003598:	481e      	ldr	r0, [pc, #120]	; (8003614 <vTaskStartScheduler+0x90>)
 800359a:	f7ff fe55 	bl	8003248 <xTaskCreate>
 800359e:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d102      	bne.n	80035ac <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 80035a6:	f000 fff1 	bl	800458c <xTimerCreateTimerTask>
 80035aa:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d116      	bne.n	80035e0 <vTaskStartScheduler+0x5c>
        __asm volatile
 80035b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b6:	f383 8811 	msr	BASEPRI, r3
 80035ba:	f3bf 8f6f 	isb	sy
 80035be:	f3bf 8f4f 	dsb	sy
 80035c2:	60bb      	str	r3, [r7, #8]
    }
 80035c4:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80035c6:	4b14      	ldr	r3, [pc, #80]	; (8003618 <vTaskStartScheduler+0x94>)
 80035c8:	f04f 32ff 	mov.w	r2, #4294967295
 80035cc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80035ce:	4b13      	ldr	r3, [pc, #76]	; (800361c <vTaskStartScheduler+0x98>)
 80035d0:	2201      	movs	r2, #1
 80035d2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80035d4:	4b12      	ldr	r3, [pc, #72]	; (8003620 <vTaskStartScheduler+0x9c>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80035da:	f001 faeb 	bl	8004bb4 <xPortStartScheduler>
 80035de:	e00e      	b.n	80035fe <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e6:	d10a      	bne.n	80035fe <vTaskStartScheduler+0x7a>
        __asm volatile
 80035e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ec:	f383 8811 	msr	BASEPRI, r3
 80035f0:	f3bf 8f6f 	isb	sy
 80035f4:	f3bf 8f4f 	dsb	sy
 80035f8:	607b      	str	r3, [r7, #4]
    }
 80035fa:	bf00      	nop
 80035fc:	e7fe      	b.n	80035fc <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80035fe:	4b09      	ldr	r3, [pc, #36]	; (8003624 <vTaskStartScheduler+0xa0>)
 8003600:	681b      	ldr	r3, [r3, #0]
}
 8003602:	bf00      	nop
 8003604:	3710      	adds	r7, #16
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	20000204 	.word	0x20000204
 8003610:	080052f8 	.word	0x080052f8
 8003614:	08003ed1 	.word	0x08003ed1
 8003618:	20000200 	.word	0x20000200
 800361c:	200001ec 	.word	0x200001ec
 8003620:	200001e4 	.word	0x200001e4
 8003624:	2000000c 	.word	0x2000000c

08003628 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800362c:	4b04      	ldr	r3, [pc, #16]	; (8003640 <vTaskSuspendAll+0x18>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	3301      	adds	r3, #1
 8003632:	4a03      	ldr	r2, [pc, #12]	; (8003640 <vTaskSuspendAll+0x18>)
 8003634:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003636:	bf00      	nop
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr
 8003640:	20000208 	.word	0x20000208

08003644 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b088      	sub	sp, #32
 8003648:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800364a:	2300      	movs	r3, #0
 800364c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800364e:	2300      	movs	r3, #0
 8003650:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003652:	4b71      	ldr	r3, [pc, #452]	; (8003818 <xTaskResumeAll+0x1d4>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10a      	bne.n	8003670 <xTaskResumeAll+0x2c>
        __asm volatile
 800365a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800365e:	f383 8811 	msr	BASEPRI, r3
 8003662:	f3bf 8f6f 	isb	sy
 8003666:	f3bf 8f4f 	dsb	sy
 800366a:	607b      	str	r3, [r7, #4]
    }
 800366c:	bf00      	nop
 800366e:	e7fe      	b.n	800366e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003670:	f001 fb42 	bl	8004cf8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003674:	4b68      	ldr	r3, [pc, #416]	; (8003818 <xTaskResumeAll+0x1d4>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	3b01      	subs	r3, #1
 800367a:	4a67      	ldr	r2, [pc, #412]	; (8003818 <xTaskResumeAll+0x1d4>)
 800367c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800367e:	4b66      	ldr	r3, [pc, #408]	; (8003818 <xTaskResumeAll+0x1d4>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2b00      	cmp	r3, #0
 8003684:	f040 80c0 	bne.w	8003808 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003688:	4b64      	ldr	r3, [pc, #400]	; (800381c <xTaskResumeAll+0x1d8>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	f000 80bb 	beq.w	8003808 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003692:	e08a      	b.n	80037aa <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003694:	4b62      	ldr	r3, [pc, #392]	; (8003820 <xTaskResumeAll+0x1dc>)
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a0:	613b      	str	r3, [r7, #16]
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	69fa      	ldr	r2, [r7, #28]
 80036a8:	6a12      	ldr	r2, [r2, #32]
 80036aa:	609a      	str	r2, [r3, #8]
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	69fa      	ldr	r2, [r7, #28]
 80036b2:	69d2      	ldr	r2, [r2, #28]
 80036b4:	605a      	str	r2, [r3, #4]
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	685a      	ldr	r2, [r3, #4]
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	3318      	adds	r3, #24
 80036be:	429a      	cmp	r2, r3
 80036c0:	d103      	bne.n	80036ca <xTaskResumeAll+0x86>
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	6a1a      	ldr	r2, [r3, #32]
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	605a      	str	r2, [r3, #4]
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	2200      	movs	r2, #0
 80036ce:	629a      	str	r2, [r3, #40]	; 0x28
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	1e5a      	subs	r2, r3, #1
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	60fb      	str	r3, [r7, #12]
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	69fa      	ldr	r2, [r7, #28]
 80036e6:	68d2      	ldr	r2, [r2, #12]
 80036e8:	609a      	str	r2, [r3, #8]
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	69fa      	ldr	r2, [r7, #28]
 80036f0:	6892      	ldr	r2, [r2, #8]
 80036f2:	605a      	str	r2, [r3, #4]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	3304      	adds	r3, #4
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d103      	bne.n	8003708 <xTaskResumeAll+0xc4>
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	68da      	ldr	r2, [r3, #12]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	605a      	str	r2, [r3, #4]
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	2200      	movs	r2, #0
 800370c:	615a      	str	r2, [r3, #20]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	1e5a      	subs	r2, r3, #1
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371c:	2201      	movs	r2, #1
 800371e:	409a      	lsls	r2, r3
 8003720:	4b40      	ldr	r3, [pc, #256]	; (8003824 <xTaskResumeAll+0x1e0>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4313      	orrs	r3, r2
 8003726:	4a3f      	ldr	r2, [pc, #252]	; (8003824 <xTaskResumeAll+0x1e0>)
 8003728:	6013      	str	r3, [r2, #0]
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800372e:	493e      	ldr	r1, [pc, #248]	; (8003828 <xTaskResumeAll+0x1e4>)
 8003730:	4613      	mov	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4413      	add	r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	440b      	add	r3, r1
 800373a:	3304      	adds	r3, #4
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	60bb      	str	r3, [r7, #8]
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	68ba      	ldr	r2, [r7, #8]
 8003744:	609a      	str	r2, [r3, #8]
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	689a      	ldr	r2, [r3, #8]
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	60da      	str	r2, [r3, #12]
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	69fa      	ldr	r2, [r7, #28]
 8003754:	3204      	adds	r2, #4
 8003756:	605a      	str	r2, [r3, #4]
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	1d1a      	adds	r2, r3, #4
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	609a      	str	r2, [r3, #8]
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003764:	4613      	mov	r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	4413      	add	r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	4a2e      	ldr	r2, [pc, #184]	; (8003828 <xTaskResumeAll+0x1e4>)
 800376e:	441a      	add	r2, r3
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	615a      	str	r2, [r3, #20]
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003778:	492b      	ldr	r1, [pc, #172]	; (8003828 <xTaskResumeAll+0x1e4>)
 800377a:	4613      	mov	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4413      	add	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	440b      	add	r3, r1
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	1c59      	adds	r1, r3, #1
 8003788:	4827      	ldr	r0, [pc, #156]	; (8003828 <xTaskResumeAll+0x1e4>)
 800378a:	4613      	mov	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	4413      	add	r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	4403      	add	r3, r0
 8003794:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800379a:	4b24      	ldr	r3, [pc, #144]	; (800382c <xTaskResumeAll+0x1e8>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d302      	bcc.n	80037aa <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 80037a4:	4b22      	ldr	r3, [pc, #136]	; (8003830 <xTaskResumeAll+0x1ec>)
 80037a6:	2201      	movs	r2, #1
 80037a8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80037aa:	4b1d      	ldr	r3, [pc, #116]	; (8003820 <xTaskResumeAll+0x1dc>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	f47f af70 	bne.w	8003694 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80037ba:	f000 fc1f 	bl	8003ffc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80037be:	4b1d      	ldr	r3, [pc, #116]	; (8003834 <xTaskResumeAll+0x1f0>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d010      	beq.n	80037ec <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80037ca:	f000 f847 	bl	800385c <xTaskIncrementTick>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d002      	beq.n	80037da <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 80037d4:	4b16      	ldr	r3, [pc, #88]	; (8003830 <xTaskResumeAll+0x1ec>)
 80037d6:	2201      	movs	r2, #1
 80037d8:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	3b01      	subs	r3, #1
 80037de:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1f1      	bne.n	80037ca <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 80037e6:	4b13      	ldr	r3, [pc, #76]	; (8003834 <xTaskResumeAll+0x1f0>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80037ec:	4b10      	ldr	r3, [pc, #64]	; (8003830 <xTaskResumeAll+0x1ec>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d009      	beq.n	8003808 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80037f4:	2301      	movs	r3, #1
 80037f6:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80037f8:	4b0f      	ldr	r3, [pc, #60]	; (8003838 <xTaskResumeAll+0x1f4>)
 80037fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037fe:	601a      	str	r2, [r3, #0]
 8003800:	f3bf 8f4f 	dsb	sy
 8003804:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003808:	f001 faa6 	bl	8004d58 <vPortExitCritical>

    return xAlreadyYielded;
 800380c:	69bb      	ldr	r3, [r7, #24]
}
 800380e:	4618      	mov	r0, r3
 8003810:	3720      	adds	r7, #32
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	20000208 	.word	0x20000208
 800381c:	200001e0 	.word	0x200001e0
 8003820:	200001a0 	.word	0x200001a0
 8003824:	200001e8 	.word	0x200001e8
 8003828:	2000010c 	.word	0x2000010c
 800382c:	20000108 	.word	0x20000108
 8003830:	200001f4 	.word	0x200001f4
 8003834:	200001f0 	.word	0x200001f0
 8003838:	e000ed04 	.word	0xe000ed04

0800383c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003842:	4b05      	ldr	r3, [pc, #20]	; (8003858 <xTaskGetTickCount+0x1c>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003848:	687b      	ldr	r3, [r7, #4]
}
 800384a:	4618      	mov	r0, r3
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	200001e4 	.word	0x200001e4

0800385c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b08a      	sub	sp, #40	; 0x28
 8003860:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003862:	2300      	movs	r3, #0
 8003864:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003866:	4b7d      	ldr	r3, [pc, #500]	; (8003a5c <xTaskIncrementTick+0x200>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	f040 80ec 	bne.w	8003a48 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003870:	4b7b      	ldr	r3, [pc, #492]	; (8003a60 <xTaskIncrementTick+0x204>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	3301      	adds	r3, #1
 8003876:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003878:	4a79      	ldr	r2, [pc, #484]	; (8003a60 <xTaskIncrementTick+0x204>)
 800387a:	6a3b      	ldr	r3, [r7, #32]
 800387c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800387e:	6a3b      	ldr	r3, [r7, #32]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d120      	bne.n	80038c6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003884:	4b77      	ldr	r3, [pc, #476]	; (8003a64 <xTaskIncrementTick+0x208>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00a      	beq.n	80038a4 <xTaskIncrementTick+0x48>
        __asm volatile
 800388e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003892:	f383 8811 	msr	BASEPRI, r3
 8003896:	f3bf 8f6f 	isb	sy
 800389a:	f3bf 8f4f 	dsb	sy
 800389e:	607b      	str	r3, [r7, #4]
    }
 80038a0:	bf00      	nop
 80038a2:	e7fe      	b.n	80038a2 <xTaskIncrementTick+0x46>
 80038a4:	4b6f      	ldr	r3, [pc, #444]	; (8003a64 <xTaskIncrementTick+0x208>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	61fb      	str	r3, [r7, #28]
 80038aa:	4b6f      	ldr	r3, [pc, #444]	; (8003a68 <xTaskIncrementTick+0x20c>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a6d      	ldr	r2, [pc, #436]	; (8003a64 <xTaskIncrementTick+0x208>)
 80038b0:	6013      	str	r3, [r2, #0]
 80038b2:	4a6d      	ldr	r2, [pc, #436]	; (8003a68 <xTaskIncrementTick+0x20c>)
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	6013      	str	r3, [r2, #0]
 80038b8:	4b6c      	ldr	r3, [pc, #432]	; (8003a6c <xTaskIncrementTick+0x210>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	3301      	adds	r3, #1
 80038be:	4a6b      	ldr	r2, [pc, #428]	; (8003a6c <xTaskIncrementTick+0x210>)
 80038c0:	6013      	str	r3, [r2, #0]
 80038c2:	f000 fb9b 	bl	8003ffc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80038c6:	4b6a      	ldr	r3, [pc, #424]	; (8003a70 <xTaskIncrementTick+0x214>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	6a3a      	ldr	r2, [r7, #32]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	f0c0 80a6 	bcc.w	8003a1e <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038d2:	4b64      	ldr	r3, [pc, #400]	; (8003a64 <xTaskIncrementTick+0x208>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d104      	bne.n	80038e6 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038dc:	4b64      	ldr	r3, [pc, #400]	; (8003a70 <xTaskIncrementTick+0x214>)
 80038de:	f04f 32ff 	mov.w	r2, #4294967295
 80038e2:	601a      	str	r2, [r3, #0]
                    break;
 80038e4:	e09b      	b.n	8003a1e <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038e6:	4b5f      	ldr	r3, [pc, #380]	; (8003a64 <xTaskIncrementTick+0x208>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80038f6:	6a3a      	ldr	r2, [r7, #32]
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d203      	bcs.n	8003906 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80038fe:	4a5c      	ldr	r2, [pc, #368]	; (8003a70 <xTaskIncrementTick+0x214>)
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003904:	e08b      	b.n	8003a1e <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	613b      	str	r3, [r7, #16]
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	68d2      	ldr	r2, [r2, #12]
 8003914:	609a      	str	r2, [r3, #8]
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	69ba      	ldr	r2, [r7, #24]
 800391c:	6892      	ldr	r2, [r2, #8]
 800391e:	605a      	str	r2, [r3, #4]
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	685a      	ldr	r2, [r3, #4]
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	3304      	adds	r3, #4
 8003928:	429a      	cmp	r2, r3
 800392a:	d103      	bne.n	8003934 <xTaskIncrementTick+0xd8>
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	68da      	ldr	r2, [r3, #12]
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	605a      	str	r2, [r3, #4]
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	2200      	movs	r2, #0
 8003938:	615a      	str	r2, [r3, #20]
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	1e5a      	subs	r2, r3, #1
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003948:	2b00      	cmp	r3, #0
 800394a:	d01e      	beq.n	800398a <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003950:	60fb      	str	r3, [r7, #12]
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	69db      	ldr	r3, [r3, #28]
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	6a12      	ldr	r2, [r2, #32]
 800395a:	609a      	str	r2, [r3, #8]
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	69d2      	ldr	r2, [r2, #28]
 8003964:	605a      	str	r2, [r3, #4]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	3318      	adds	r3, #24
 800396e:	429a      	cmp	r2, r3
 8003970:	d103      	bne.n	800397a <xTaskIncrementTick+0x11e>
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	6a1a      	ldr	r2, [r3, #32]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	605a      	str	r2, [r3, #4]
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	2200      	movs	r2, #0
 800397e:	629a      	str	r2, [r3, #40]	; 0x28
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	1e5a      	subs	r2, r3, #1
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398e:	2201      	movs	r2, #1
 8003990:	409a      	lsls	r2, r3
 8003992:	4b38      	ldr	r3, [pc, #224]	; (8003a74 <xTaskIncrementTick+0x218>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4313      	orrs	r3, r2
 8003998:	4a36      	ldr	r2, [pc, #216]	; (8003a74 <xTaskIncrementTick+0x218>)
 800399a:	6013      	str	r3, [r2, #0]
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a0:	4935      	ldr	r1, [pc, #212]	; (8003a78 <xTaskIncrementTick+0x21c>)
 80039a2:	4613      	mov	r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	4413      	add	r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	440b      	add	r3, r1
 80039ac:	3304      	adds	r3, #4
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	60bb      	str	r3, [r7, #8]
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	68ba      	ldr	r2, [r7, #8]
 80039b6:	609a      	str	r2, [r3, #8]
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	689a      	ldr	r2, [r3, #8]
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	60da      	str	r2, [r3, #12]
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	3204      	adds	r2, #4
 80039c8:	605a      	str	r2, [r3, #4]
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	1d1a      	adds	r2, r3, #4
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	609a      	str	r2, [r3, #8]
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039d6:	4613      	mov	r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	4413      	add	r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	4a26      	ldr	r2, [pc, #152]	; (8003a78 <xTaskIncrementTick+0x21c>)
 80039e0:	441a      	add	r2, r3
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	615a      	str	r2, [r3, #20]
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ea:	4923      	ldr	r1, [pc, #140]	; (8003a78 <xTaskIncrementTick+0x21c>)
 80039ec:	4613      	mov	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	4413      	add	r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	440b      	add	r3, r1
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	1c59      	adds	r1, r3, #1
 80039fa:	481f      	ldr	r0, [pc, #124]	; (8003a78 <xTaskIncrementTick+0x21c>)
 80039fc:	4613      	mov	r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	4413      	add	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4403      	add	r3, r0
 8003a06:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a0c:	4b1b      	ldr	r3, [pc, #108]	; (8003a7c <xTaskIncrementTick+0x220>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a12:	429a      	cmp	r2, r3
 8003a14:	f67f af5d 	bls.w	80038d2 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a1c:	e759      	b.n	80038d2 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003a1e:	4b17      	ldr	r3, [pc, #92]	; (8003a7c <xTaskIncrementTick+0x220>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a24:	4914      	ldr	r1, [pc, #80]	; (8003a78 <xTaskIncrementTick+0x21c>)
 8003a26:	4613      	mov	r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	4413      	add	r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	440b      	add	r3, r1
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d901      	bls.n	8003a3a <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 8003a36:	2301      	movs	r3, #1
 8003a38:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8003a3a:	4b11      	ldr	r3, [pc, #68]	; (8003a80 <xTaskIncrementTick+0x224>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d007      	beq.n	8003a52 <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8003a42:	2301      	movs	r3, #1
 8003a44:	627b      	str	r3, [r7, #36]	; 0x24
 8003a46:	e004      	b.n	8003a52 <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003a48:	4b0e      	ldr	r3, [pc, #56]	; (8003a84 <xTaskIncrementTick+0x228>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	4a0d      	ldr	r2, [pc, #52]	; (8003a84 <xTaskIncrementTick+0x228>)
 8003a50:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3728      	adds	r7, #40	; 0x28
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	20000208 	.word	0x20000208
 8003a60:	200001e4 	.word	0x200001e4
 8003a64:	20000198 	.word	0x20000198
 8003a68:	2000019c 	.word	0x2000019c
 8003a6c:	200001f8 	.word	0x200001f8
 8003a70:	20000200 	.word	0x20000200
 8003a74:	200001e8 	.word	0x200001e8
 8003a78:	2000010c 	.word	0x2000010c
 8003a7c:	20000108 	.word	0x20000108
 8003a80:	200001f4 	.word	0x200001f4
 8003a84:	200001f0 	.word	0x200001f0

08003a88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b087      	sub	sp, #28
 8003a8c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003a8e:	4b27      	ldr	r3, [pc, #156]	; (8003b2c <vTaskSwitchContext+0xa4>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003a96:	4b26      	ldr	r3, [pc, #152]	; (8003b30 <vTaskSwitchContext+0xa8>)
 8003a98:	2201      	movs	r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8003a9c:	e03f      	b.n	8003b1e <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8003a9e:	4b24      	ldr	r3, [pc, #144]	; (8003b30 <vTaskSwitchContext+0xa8>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003aa4:	4b23      	ldr	r3, [pc, #140]	; (8003b34 <vTaskSwitchContext+0xac>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	fab3 f383 	clz	r3, r3
 8003ab0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003ab2:	7afb      	ldrb	r3, [r7, #11]
 8003ab4:	f1c3 031f 	rsb	r3, r3, #31
 8003ab8:	617b      	str	r3, [r7, #20]
 8003aba:	491f      	ldr	r1, [pc, #124]	; (8003b38 <vTaskSwitchContext+0xb0>)
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	4413      	add	r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	440b      	add	r3, r1
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10a      	bne.n	8003ae4 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad2:	f383 8811 	msr	BASEPRI, r3
 8003ad6:	f3bf 8f6f 	isb	sy
 8003ada:	f3bf 8f4f 	dsb	sy
 8003ade:	607b      	str	r3, [r7, #4]
    }
 8003ae0:	bf00      	nop
 8003ae2:	e7fe      	b.n	8003ae2 <vTaskSwitchContext+0x5a>
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4413      	add	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	4a12      	ldr	r2, [pc, #72]	; (8003b38 <vTaskSwitchContext+0xb0>)
 8003af0:	4413      	add	r3, r2
 8003af2:	613b      	str	r3, [r7, #16]
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	685a      	ldr	r2, [r3, #4]
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	605a      	str	r2, [r3, #4]
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	3308      	adds	r3, #8
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d104      	bne.n	8003b14 <vTaskSwitchContext+0x8c>
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	685a      	ldr	r2, [r3, #4]
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	605a      	str	r2, [r3, #4]
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	4a08      	ldr	r2, [pc, #32]	; (8003b3c <vTaskSwitchContext+0xb4>)
 8003b1c:	6013      	str	r3, [r2, #0]
}
 8003b1e:	bf00      	nop
 8003b20:	371c      	adds	r7, #28
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	20000208 	.word	0x20000208
 8003b30:	200001f4 	.word	0x200001f4
 8003b34:	200001e8 	.word	0x200001e8
 8003b38:	2000010c 	.word	0x2000010c
 8003b3c:	20000108 	.word	0x20000108

08003b40 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10a      	bne.n	8003b66 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b54:	f383 8811 	msr	BASEPRI, r3
 8003b58:	f3bf 8f6f 	isb	sy
 8003b5c:	f3bf 8f4f 	dsb	sy
 8003b60:	60fb      	str	r3, [r7, #12]
    }
 8003b62:	bf00      	nop
 8003b64:	e7fe      	b.n	8003b64 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b66:	4b07      	ldr	r3, [pc, #28]	; (8003b84 <vTaskPlaceOnEventList+0x44>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	3318      	adds	r3, #24
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7fe fd7e 	bl	8002670 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003b74:	2101      	movs	r1, #1
 8003b76:	6838      	ldr	r0, [r7, #0]
 8003b78:	f000 fc88 	bl	800448c <prvAddCurrentTaskToDelayedList>
}
 8003b7c:	bf00      	nop
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	20000108 	.word	0x20000108

08003b88 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10a      	bne.n	8003bb0 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b9e:	f383 8811 	msr	BASEPRI, r3
 8003ba2:	f3bf 8f6f 	isb	sy
 8003ba6:	f3bf 8f4f 	dsb	sy
 8003baa:	613b      	str	r3, [r7, #16]
    }
 8003bac:	bf00      	nop
 8003bae:	e7fe      	b.n	8003bae <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	617b      	str	r3, [r7, #20]
 8003bb6:	4b16      	ldr	r3, [pc, #88]	; (8003c10 <vTaskPlaceOnEventListRestricted+0x88>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	61da      	str	r2, [r3, #28]
 8003bbe:	4b14      	ldr	r3, [pc, #80]	; (8003c10 <vTaskPlaceOnEventListRestricted+0x88>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	6892      	ldr	r2, [r2, #8]
 8003bc6:	621a      	str	r2, [r3, #32]
 8003bc8:	4b11      	ldr	r3, [pc, #68]	; (8003c10 <vTaskPlaceOnEventListRestricted+0x88>)
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	3218      	adds	r2, #24
 8003bd2:	605a      	str	r2, [r3, #4]
 8003bd4:	4b0e      	ldr	r3, [pc, #56]	; (8003c10 <vTaskPlaceOnEventListRestricted+0x88>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f103 0218 	add.w	r2, r3, #24
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	609a      	str	r2, [r3, #8]
 8003be0:	4b0b      	ldr	r3, [pc, #44]	; (8003c10 <vTaskPlaceOnEventListRestricted+0x88>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	629a      	str	r2, [r3, #40]	; 0x28
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	1c5a      	adds	r2, r3, #1
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d002      	beq.n	8003bfe <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8003bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8003bfc:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003bfe:	6879      	ldr	r1, [r7, #4]
 8003c00:	68b8      	ldr	r0, [r7, #8]
 8003c02:	f000 fc43 	bl	800448c <prvAddCurrentTaskToDelayedList>
    }
 8003c06:	bf00      	nop
 8003c08:	3718      	adds	r7, #24
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	20000108 	.word	0x20000108

08003c14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003c14:	b480      	push	{r7}
 8003c16:	b08b      	sub	sp, #44	; 0x2c
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003c24:	6a3b      	ldr	r3, [r7, #32]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d10a      	bne.n	8003c40 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c2e:	f383 8811 	msr	BASEPRI, r3
 8003c32:	f3bf 8f6f 	isb	sy
 8003c36:	f3bf 8f4f 	dsb	sy
 8003c3a:	60fb      	str	r3, [r7, #12]
    }
 8003c3c:	bf00      	nop
 8003c3e:	e7fe      	b.n	8003c3e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003c40:	6a3b      	ldr	r3, [r7, #32]
 8003c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c44:	61fb      	str	r3, [r7, #28]
 8003c46:	6a3b      	ldr	r3, [r7, #32]
 8003c48:	69db      	ldr	r3, [r3, #28]
 8003c4a:	6a3a      	ldr	r2, [r7, #32]
 8003c4c:	6a12      	ldr	r2, [r2, #32]
 8003c4e:	609a      	str	r2, [r3, #8]
 8003c50:	6a3b      	ldr	r3, [r7, #32]
 8003c52:	6a1b      	ldr	r3, [r3, #32]
 8003c54:	6a3a      	ldr	r2, [r7, #32]
 8003c56:	69d2      	ldr	r2, [r2, #28]
 8003c58:	605a      	str	r2, [r3, #4]
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	685a      	ldr	r2, [r3, #4]
 8003c5e:	6a3b      	ldr	r3, [r7, #32]
 8003c60:	3318      	adds	r3, #24
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d103      	bne.n	8003c6e <xTaskRemoveFromEventList+0x5a>
 8003c66:	6a3b      	ldr	r3, [r7, #32]
 8003c68:	6a1a      	ldr	r2, [r3, #32]
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	605a      	str	r2, [r3, #4]
 8003c6e:	6a3b      	ldr	r3, [r7, #32]
 8003c70:	2200      	movs	r2, #0
 8003c72:	629a      	str	r2, [r3, #40]	; 0x28
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	1e5a      	subs	r2, r3, #1
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c7e:	4b4a      	ldr	r3, [pc, #296]	; (8003da8 <xTaskRemoveFromEventList+0x194>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d15e      	bne.n	8003d44 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003c86:	6a3b      	ldr	r3, [r7, #32]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	617b      	str	r3, [r7, #20]
 8003c8c:	6a3b      	ldr	r3, [r7, #32]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	6a3a      	ldr	r2, [r7, #32]
 8003c92:	68d2      	ldr	r2, [r2, #12]
 8003c94:	609a      	str	r2, [r3, #8]
 8003c96:	6a3b      	ldr	r3, [r7, #32]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	6a3a      	ldr	r2, [r7, #32]
 8003c9c:	6892      	ldr	r2, [r2, #8]
 8003c9e:	605a      	str	r2, [r3, #4]
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	685a      	ldr	r2, [r3, #4]
 8003ca4:	6a3b      	ldr	r3, [r7, #32]
 8003ca6:	3304      	adds	r3, #4
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d103      	bne.n	8003cb4 <xTaskRemoveFromEventList+0xa0>
 8003cac:	6a3b      	ldr	r3, [r7, #32]
 8003cae:	68da      	ldr	r2, [r3, #12]
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	605a      	str	r2, [r3, #4]
 8003cb4:	6a3b      	ldr	r3, [r7, #32]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	615a      	str	r2, [r3, #20]
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	1e5a      	subs	r2, r3, #1
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003cc4:	6a3b      	ldr	r3, [r7, #32]
 8003cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc8:	2201      	movs	r2, #1
 8003cca:	409a      	lsls	r2, r3
 8003ccc:	4b37      	ldr	r3, [pc, #220]	; (8003dac <xTaskRemoveFromEventList+0x198>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	4a36      	ldr	r2, [pc, #216]	; (8003dac <xTaskRemoveFromEventList+0x198>)
 8003cd4:	6013      	str	r3, [r2, #0]
 8003cd6:	6a3b      	ldr	r3, [r7, #32]
 8003cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cda:	4935      	ldr	r1, [pc, #212]	; (8003db0 <xTaskRemoveFromEventList+0x19c>)
 8003cdc:	4613      	mov	r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	4413      	add	r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	440b      	add	r3, r1
 8003ce6:	3304      	adds	r3, #4
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	613b      	str	r3, [r7, #16]
 8003cec:	6a3b      	ldr	r3, [r7, #32]
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	609a      	str	r2, [r3, #8]
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	689a      	ldr	r2, [r3, #8]
 8003cf6:	6a3b      	ldr	r3, [r7, #32]
 8003cf8:	60da      	str	r2, [r3, #12]
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	6a3a      	ldr	r2, [r7, #32]
 8003d00:	3204      	adds	r2, #4
 8003d02:	605a      	str	r2, [r3, #4]
 8003d04:	6a3b      	ldr	r3, [r7, #32]
 8003d06:	1d1a      	adds	r2, r3, #4
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	609a      	str	r2, [r3, #8]
 8003d0c:	6a3b      	ldr	r3, [r7, #32]
 8003d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d10:	4613      	mov	r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4413      	add	r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	4a25      	ldr	r2, [pc, #148]	; (8003db0 <xTaskRemoveFromEventList+0x19c>)
 8003d1a:	441a      	add	r2, r3
 8003d1c:	6a3b      	ldr	r3, [r7, #32]
 8003d1e:	615a      	str	r2, [r3, #20]
 8003d20:	6a3b      	ldr	r3, [r7, #32]
 8003d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d24:	4922      	ldr	r1, [pc, #136]	; (8003db0 <xTaskRemoveFromEventList+0x19c>)
 8003d26:	4613      	mov	r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	4413      	add	r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	440b      	add	r3, r1
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	1c59      	adds	r1, r3, #1
 8003d34:	481e      	ldr	r0, [pc, #120]	; (8003db0 <xTaskRemoveFromEventList+0x19c>)
 8003d36:	4613      	mov	r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	4413      	add	r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	4403      	add	r3, r0
 8003d40:	6019      	str	r1, [r3, #0]
 8003d42:	e01b      	b.n	8003d7c <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003d44:	4b1b      	ldr	r3, [pc, #108]	; (8003db4 <xTaskRemoveFromEventList+0x1a0>)
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	61bb      	str	r3, [r7, #24]
 8003d4a:	6a3b      	ldr	r3, [r7, #32]
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	61da      	str	r2, [r3, #28]
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	689a      	ldr	r2, [r3, #8]
 8003d54:	6a3b      	ldr	r3, [r7, #32]
 8003d56:	621a      	str	r2, [r3, #32]
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	6a3a      	ldr	r2, [r7, #32]
 8003d5e:	3218      	adds	r2, #24
 8003d60:	605a      	str	r2, [r3, #4]
 8003d62:	6a3b      	ldr	r3, [r7, #32]
 8003d64:	f103 0218 	add.w	r2, r3, #24
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	609a      	str	r2, [r3, #8]
 8003d6c:	6a3b      	ldr	r3, [r7, #32]
 8003d6e:	4a11      	ldr	r2, [pc, #68]	; (8003db4 <xTaskRemoveFromEventList+0x1a0>)
 8003d70:	629a      	str	r2, [r3, #40]	; 0x28
 8003d72:	4b10      	ldr	r3, [pc, #64]	; (8003db4 <xTaskRemoveFromEventList+0x1a0>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	3301      	adds	r3, #1
 8003d78:	4a0e      	ldr	r2, [pc, #56]	; (8003db4 <xTaskRemoveFromEventList+0x1a0>)
 8003d7a:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003d7c:	6a3b      	ldr	r3, [r7, #32]
 8003d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d80:	4b0d      	ldr	r3, [pc, #52]	; (8003db8 <xTaskRemoveFromEventList+0x1a4>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d905      	bls.n	8003d96 <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003d8e:	4b0b      	ldr	r3, [pc, #44]	; (8003dbc <xTaskRemoveFromEventList+0x1a8>)
 8003d90:	2201      	movs	r2, #1
 8003d92:	601a      	str	r2, [r3, #0]
 8003d94:	e001      	b.n	8003d9a <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 8003d96:	2300      	movs	r3, #0
 8003d98:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	372c      	adds	r7, #44	; 0x2c
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr
 8003da8:	20000208 	.word	0x20000208
 8003dac:	200001e8 	.word	0x200001e8
 8003db0:	2000010c 	.word	0x2000010c
 8003db4:	200001a0 	.word	0x200001a0
 8003db8:	20000108 	.word	0x20000108
 8003dbc:	200001f4 	.word	0x200001f4

08003dc0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003dc8:	4b06      	ldr	r3, [pc, #24]	; (8003de4 <vTaskInternalSetTimeOutState+0x24>)
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003dd0:	4b05      	ldr	r3, [pc, #20]	; (8003de8 <vTaskInternalSetTimeOutState+0x28>)
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	605a      	str	r2, [r3, #4]
}
 8003dd8:	bf00      	nop
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	200001f8 	.word	0x200001f8
 8003de8:	200001e4 	.word	0x200001e4

08003dec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b088      	sub	sp, #32
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d10a      	bne.n	8003e12 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e00:	f383 8811 	msr	BASEPRI, r3
 8003e04:	f3bf 8f6f 	isb	sy
 8003e08:	f3bf 8f4f 	dsb	sy
 8003e0c:	613b      	str	r3, [r7, #16]
    }
 8003e0e:	bf00      	nop
 8003e10:	e7fe      	b.n	8003e10 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d10a      	bne.n	8003e2e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e1c:	f383 8811 	msr	BASEPRI, r3
 8003e20:	f3bf 8f6f 	isb	sy
 8003e24:	f3bf 8f4f 	dsb	sy
 8003e28:	60fb      	str	r3, [r7, #12]
    }
 8003e2a:	bf00      	nop
 8003e2c:	e7fe      	b.n	8003e2c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003e2e:	f000 ff63 	bl	8004cf8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003e32:	4b1f      	ldr	r3, [pc, #124]	; (8003eb0 <xTaskCheckForTimeOut+0xc4>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	69ba      	ldr	r2, [r7, #24]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e4a:	d102      	bne.n	8003e52 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	61fb      	str	r3, [r7, #28]
 8003e50:	e026      	b.n	8003ea0 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	4b17      	ldr	r3, [pc, #92]	; (8003eb4 <xTaskCheckForTimeOut+0xc8>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d00a      	beq.n	8003e74 <xTaskCheckForTimeOut+0x88>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	69ba      	ldr	r2, [r7, #24]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d305      	bcc.n	8003e74 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	601a      	str	r2, [r3, #0]
 8003e72:	e015      	b.n	8003ea0 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d20b      	bcs.n	8003e96 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	1ad2      	subs	r2, r2, r3
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7ff ff98 	bl	8003dc0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003e90:	2300      	movs	r3, #0
 8003e92:	61fb      	str	r3, [r7, #28]
 8003e94:	e004      	b.n	8003ea0 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003ea0:	f000 ff5a 	bl	8004d58 <vPortExitCritical>

    return xReturn;
 8003ea4:	69fb      	ldr	r3, [r7, #28]
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3720      	adds	r7, #32
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	200001e4 	.word	0x200001e4
 8003eb4:	200001f8 	.word	0x200001f8

08003eb8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003eb8:	b480      	push	{r7}
 8003eba:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003ebc:	4b03      	ldr	r3, [pc, #12]	; (8003ecc <vTaskMissedYield+0x14>)
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	601a      	str	r2, [r3, #0]
}
 8003ec2:	bf00      	nop
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr
 8003ecc:	200001f4 	.word	0x200001f4

08003ed0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003ed8:	f000 f852 	bl	8003f80 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003edc:	4b06      	ldr	r3, [pc, #24]	; (8003ef8 <prvIdleTask+0x28>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d9f9      	bls.n	8003ed8 <prvIdleTask+0x8>
            {
                taskYIELD();
 8003ee4:	4b05      	ldr	r3, [pc, #20]	; (8003efc <prvIdleTask+0x2c>)
 8003ee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eea:	601a      	str	r2, [r3, #0]
 8003eec:	f3bf 8f4f 	dsb	sy
 8003ef0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003ef4:	e7f0      	b.n	8003ed8 <prvIdleTask+0x8>
 8003ef6:	bf00      	nop
 8003ef8:	2000010c 	.word	0x2000010c
 8003efc:	e000ed04 	.word	0xe000ed04

08003f00 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f06:	2300      	movs	r3, #0
 8003f08:	607b      	str	r3, [r7, #4]
 8003f0a:	e00c      	b.n	8003f26 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	4413      	add	r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	4a12      	ldr	r2, [pc, #72]	; (8003f60 <prvInitialiseTaskLists+0x60>)
 8003f18:	4413      	add	r3, r2
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7fe fb7b 	bl	8002616 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	3301      	adds	r3, #1
 8003f24:	607b      	str	r3, [r7, #4]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2b04      	cmp	r3, #4
 8003f2a:	d9ef      	bls.n	8003f0c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003f2c:	480d      	ldr	r0, [pc, #52]	; (8003f64 <prvInitialiseTaskLists+0x64>)
 8003f2e:	f7fe fb72 	bl	8002616 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003f32:	480d      	ldr	r0, [pc, #52]	; (8003f68 <prvInitialiseTaskLists+0x68>)
 8003f34:	f7fe fb6f 	bl	8002616 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003f38:	480c      	ldr	r0, [pc, #48]	; (8003f6c <prvInitialiseTaskLists+0x6c>)
 8003f3a:	f7fe fb6c 	bl	8002616 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003f3e:	480c      	ldr	r0, [pc, #48]	; (8003f70 <prvInitialiseTaskLists+0x70>)
 8003f40:	f7fe fb69 	bl	8002616 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003f44:	480b      	ldr	r0, [pc, #44]	; (8003f74 <prvInitialiseTaskLists+0x74>)
 8003f46:	f7fe fb66 	bl	8002616 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003f4a:	4b0b      	ldr	r3, [pc, #44]	; (8003f78 <prvInitialiseTaskLists+0x78>)
 8003f4c:	4a05      	ldr	r2, [pc, #20]	; (8003f64 <prvInitialiseTaskLists+0x64>)
 8003f4e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003f50:	4b0a      	ldr	r3, [pc, #40]	; (8003f7c <prvInitialiseTaskLists+0x7c>)
 8003f52:	4a05      	ldr	r2, [pc, #20]	; (8003f68 <prvInitialiseTaskLists+0x68>)
 8003f54:	601a      	str	r2, [r3, #0]
}
 8003f56:	bf00      	nop
 8003f58:	3708      	adds	r7, #8
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	2000010c 	.word	0x2000010c
 8003f64:	20000170 	.word	0x20000170
 8003f68:	20000184 	.word	0x20000184
 8003f6c:	200001a0 	.word	0x200001a0
 8003f70:	200001b4 	.word	0x200001b4
 8003f74:	200001cc 	.word	0x200001cc
 8003f78:	20000198 	.word	0x20000198
 8003f7c:	2000019c 	.word	0x2000019c

08003f80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f86:	e019      	b.n	8003fbc <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003f88:	f000 feb6 	bl	8004cf8 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f8c:	4b10      	ldr	r3, [pc, #64]	; (8003fd0 <prvCheckTasksWaitingTermination+0x50>)
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	3304      	adds	r3, #4
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7fe fba2 	bl	80026e2 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003f9e:	4b0d      	ldr	r3, [pc, #52]	; (8003fd4 <prvCheckTasksWaitingTermination+0x54>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	4a0b      	ldr	r2, [pc, #44]	; (8003fd4 <prvCheckTasksWaitingTermination+0x54>)
 8003fa6:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003fa8:	4b0b      	ldr	r3, [pc, #44]	; (8003fd8 <prvCheckTasksWaitingTermination+0x58>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	3b01      	subs	r3, #1
 8003fae:	4a0a      	ldr	r2, [pc, #40]	; (8003fd8 <prvCheckTasksWaitingTermination+0x58>)
 8003fb0:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003fb2:	f000 fed1 	bl	8004d58 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f810 	bl	8003fdc <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003fbc:	4b06      	ldr	r3, [pc, #24]	; (8003fd8 <prvCheckTasksWaitingTermination+0x58>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1e1      	bne.n	8003f88 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003fc4:	bf00      	nop
 8003fc6:	bf00      	nop
 8003fc8:	3708      	adds	r7, #8
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	200001b4 	.word	0x200001b4
 8003fd4:	200001e0 	.word	0x200001e0
 8003fd8:	200001c8 	.word	0x200001c8

08003fdc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f001 f821 	bl	8005030 <vPortFree>
            vPortFree( pxTCB );
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f001 f81e 	bl	8005030 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003ff4:	bf00      	nop
 8003ff6:	3708      	adds	r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004000:	4b0a      	ldr	r3, [pc, #40]	; (800402c <prvResetNextTaskUnblockTime+0x30>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d104      	bne.n	8004014 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800400a:	4b09      	ldr	r3, [pc, #36]	; (8004030 <prvResetNextTaskUnblockTime+0x34>)
 800400c:	f04f 32ff 	mov.w	r2, #4294967295
 8004010:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004012:	e005      	b.n	8004020 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004014:	4b05      	ldr	r3, [pc, #20]	; (800402c <prvResetNextTaskUnblockTime+0x30>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a04      	ldr	r2, [pc, #16]	; (8004030 <prvResetNextTaskUnblockTime+0x34>)
 800401e:	6013      	str	r3, [r2, #0]
}
 8004020:	bf00      	nop
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	20000198 	.word	0x20000198
 8004030:	20000200 	.word	0x20000200

08004034 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800403a:	4b0b      	ldr	r3, [pc, #44]	; (8004068 <xTaskGetSchedulerState+0x34>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d102      	bne.n	8004048 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004042:	2301      	movs	r3, #1
 8004044:	607b      	str	r3, [r7, #4]
 8004046:	e008      	b.n	800405a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004048:	4b08      	ldr	r3, [pc, #32]	; (800406c <xTaskGetSchedulerState+0x38>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d102      	bne.n	8004056 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004050:	2302      	movs	r3, #2
 8004052:	607b      	str	r3, [r7, #4]
 8004054:	e001      	b.n	800405a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8004056:	2300      	movs	r3, #0
 8004058:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800405a:	687b      	ldr	r3, [r7, #4]
    }
 800405c:	4618      	mov	r0, r3
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr
 8004068:	200001ec 	.word	0x200001ec
 800406c:	20000208 	.word	0x20000208

08004070 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800407c:	2300      	movs	r3, #0
 800407e:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2b00      	cmp	r3, #0
 8004084:	f000 8087 	beq.w	8004196 <xTaskPriorityInherit+0x126>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800408c:	4b44      	ldr	r3, [pc, #272]	; (80041a0 <xTaskPriorityInherit+0x130>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004092:	429a      	cmp	r2, r3
 8004094:	d276      	bcs.n	8004184 <xTaskPriorityInherit+0x114>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	2b00      	cmp	r3, #0
 800409c:	db06      	blt.n	80040ac <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800409e:	4b40      	ldr	r3, [pc, #256]	; (80041a0 <xTaskPriorityInherit+0x130>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a4:	f1c3 0205 	rsb	r2, r3, #5
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	6959      	ldr	r1, [r3, #20]
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040b4:	4613      	mov	r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	4413      	add	r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	4a39      	ldr	r2, [pc, #228]	; (80041a4 <xTaskPriorityInherit+0x134>)
 80040be:	4413      	add	r3, r2
 80040c0:	4299      	cmp	r1, r3
 80040c2:	d157      	bne.n	8004174 <xTaskPriorityInherit+0x104>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	3304      	adds	r3, #4
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7fe fb0a 	bl	80026e2 <uxListRemove>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10a      	bne.n	80040ea <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d8:	2201      	movs	r2, #1
 80040da:	fa02 f303 	lsl.w	r3, r2, r3
 80040de:	43da      	mvns	r2, r3
 80040e0:	4b31      	ldr	r3, [pc, #196]	; (80041a8 <xTaskPriorityInherit+0x138>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4013      	ands	r3, r2
 80040e6:	4a30      	ldr	r2, [pc, #192]	; (80041a8 <xTaskPriorityInherit+0x138>)
 80040e8:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80040ea:	4b2d      	ldr	r3, [pc, #180]	; (80041a0 <xTaskPriorityInherit+0x130>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f8:	2201      	movs	r2, #1
 80040fa:	409a      	lsls	r2, r3
 80040fc:	4b2a      	ldr	r3, [pc, #168]	; (80041a8 <xTaskPriorityInherit+0x138>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4313      	orrs	r3, r2
 8004102:	4a29      	ldr	r2, [pc, #164]	; (80041a8 <xTaskPriorityInherit+0x138>)
 8004104:	6013      	str	r3, [r2, #0]
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800410a:	4926      	ldr	r1, [pc, #152]	; (80041a4 <xTaskPriorityInherit+0x134>)
 800410c:	4613      	mov	r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4413      	add	r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	440b      	add	r3, r1
 8004116:	3304      	adds	r3, #4
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	60fb      	str	r3, [r7, #12]
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	609a      	str	r2, [r3, #8]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	689a      	ldr	r2, [r3, #8]
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	60da      	str	r2, [r3, #12]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	3204      	adds	r2, #4
 8004132:	605a      	str	r2, [r3, #4]
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	1d1a      	adds	r2, r3, #4
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	609a      	str	r2, [r3, #8]
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004140:	4613      	mov	r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	4413      	add	r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4a16      	ldr	r2, [pc, #88]	; (80041a4 <xTaskPriorityInherit+0x134>)
 800414a:	441a      	add	r2, r3
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	615a      	str	r2, [r3, #20]
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004154:	4913      	ldr	r1, [pc, #76]	; (80041a4 <xTaskPriorityInherit+0x134>)
 8004156:	4613      	mov	r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	4413      	add	r3, r2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	440b      	add	r3, r1
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	1c59      	adds	r1, r3, #1
 8004164:	480f      	ldr	r0, [pc, #60]	; (80041a4 <xTaskPriorityInherit+0x134>)
 8004166:	4613      	mov	r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	4413      	add	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	4403      	add	r3, r0
 8004170:	6019      	str	r1, [r3, #0]
 8004172:	e004      	b.n	800417e <xTaskPriorityInherit+0x10e>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004174:	4b0a      	ldr	r3, [pc, #40]	; (80041a0 <xTaskPriorityInherit+0x130>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 800417e:	2301      	movs	r3, #1
 8004180:	617b      	str	r3, [r7, #20]
 8004182:	e008      	b.n	8004196 <xTaskPriorityInherit+0x126>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004188:	4b05      	ldr	r3, [pc, #20]	; (80041a0 <xTaskPriorityInherit+0x130>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418e:	429a      	cmp	r2, r3
 8004190:	d201      	bcs.n	8004196 <xTaskPriorityInherit+0x126>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8004192:	2301      	movs	r3, #1
 8004194:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004196:	697b      	ldr	r3, [r7, #20]
    }
 8004198:	4618      	mov	r0, r3
 800419a:	3718      	adds	r7, #24
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	20000108 	.word	0x20000108
 80041a4:	2000010c 	.word	0x2000010c
 80041a8:	200001e8 	.word	0x200001e8

080041ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b088      	sub	sp, #32
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 80041b8:	2300      	movs	r3, #0
 80041ba:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	f000 808c 	beq.w	80042dc <xTaskPriorityDisinherit+0x130>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80041c4:	4b48      	ldr	r3, [pc, #288]	; (80042e8 <xTaskPriorityDisinherit+0x13c>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d00a      	beq.n	80041e4 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 80041ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d2:	f383 8811 	msr	BASEPRI, r3
 80041d6:	f3bf 8f6f 	isb	sy
 80041da:	f3bf 8f4f 	dsb	sy
 80041de:	613b      	str	r3, [r7, #16]
    }
 80041e0:	bf00      	nop
 80041e2:	e7fe      	b.n	80041e2 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10a      	bne.n	8004202 <xTaskPriorityDisinherit+0x56>
        __asm volatile
 80041ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f0:	f383 8811 	msr	BASEPRI, r3
 80041f4:	f3bf 8f6f 	isb	sy
 80041f8:	f3bf 8f4f 	dsb	sy
 80041fc:	60fb      	str	r3, [r7, #12]
    }
 80041fe:	bf00      	nop
 8004200:	e7fe      	b.n	8004200 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004206:	1e5a      	subs	r2, r3, #1
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004214:	429a      	cmp	r2, r3
 8004216:	d061      	beq.n	80042dc <xTaskPriorityDisinherit+0x130>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421c:	2b00      	cmp	r3, #0
 800421e:	d15d      	bne.n	80042dc <xTaskPriorityDisinherit+0x130>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	3304      	adds	r3, #4
 8004224:	4618      	mov	r0, r3
 8004226:	f7fe fa5c 	bl	80026e2 <uxListRemove>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d10a      	bne.n	8004246 <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004234:	2201      	movs	r2, #1
 8004236:	fa02 f303 	lsl.w	r3, r2, r3
 800423a:	43da      	mvns	r2, r3
 800423c:	4b2b      	ldr	r3, [pc, #172]	; (80042ec <xTaskPriorityDisinherit+0x140>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4013      	ands	r3, r2
 8004242:	4a2a      	ldr	r2, [pc, #168]	; (80042ec <xTaskPriorityDisinherit+0x140>)
 8004244:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004252:	f1c3 0205 	rsb	r2, r3, #5
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425e:	2201      	movs	r2, #1
 8004260:	409a      	lsls	r2, r3
 8004262:	4b22      	ldr	r3, [pc, #136]	; (80042ec <xTaskPriorityDisinherit+0x140>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4313      	orrs	r3, r2
 8004268:	4a20      	ldr	r2, [pc, #128]	; (80042ec <xTaskPriorityDisinherit+0x140>)
 800426a:	6013      	str	r3, [r2, #0]
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004270:	491f      	ldr	r1, [pc, #124]	; (80042f0 <xTaskPriorityDisinherit+0x144>)
 8004272:	4613      	mov	r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	4413      	add	r3, r2
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	440b      	add	r3, r1
 800427c:	3304      	adds	r3, #4
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	617b      	str	r3, [r7, #20]
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	697a      	ldr	r2, [r7, #20]
 8004286:	609a      	str	r2, [r3, #8]
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	689a      	ldr	r2, [r3, #8]
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	60da      	str	r2, [r3, #12]
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	3204      	adds	r2, #4
 8004298:	605a      	str	r2, [r3, #4]
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	1d1a      	adds	r2, r3, #4
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	609a      	str	r2, [r3, #8]
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042a6:	4613      	mov	r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	4413      	add	r3, r2
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	4a10      	ldr	r2, [pc, #64]	; (80042f0 <xTaskPriorityDisinherit+0x144>)
 80042b0:	441a      	add	r2, r3
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	615a      	str	r2, [r3, #20]
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ba:	490d      	ldr	r1, [pc, #52]	; (80042f0 <xTaskPriorityDisinherit+0x144>)
 80042bc:	4613      	mov	r3, r2
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	4413      	add	r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	440b      	add	r3, r1
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	1c59      	adds	r1, r3, #1
 80042ca:	4809      	ldr	r0, [pc, #36]	; (80042f0 <xTaskPriorityDisinherit+0x144>)
 80042cc:	4613      	mov	r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4413      	add	r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	4403      	add	r3, r0
 80042d6:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80042d8:	2301      	movs	r3, #1
 80042da:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80042dc:	69fb      	ldr	r3, [r7, #28]
    }
 80042de:	4618      	mov	r0, r3
 80042e0:	3720      	adds	r7, #32
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	20000108 	.word	0x20000108
 80042ec:	200001e8 	.word	0x200001e8
 80042f0:	2000010c 	.word	0x2000010c

080042f4 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b08a      	sub	sp, #40	; 0x28
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004302:	2301      	movs	r3, #1
 8004304:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2b00      	cmp	r3, #0
 800430a:	f000 80a1 	beq.w	8004450 <vTaskPriorityDisinheritAfterTimeout+0x15c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800430e:	6a3b      	ldr	r3, [r7, #32]
 8004310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10a      	bne.n	800432c <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 8004316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800431a:	f383 8811 	msr	BASEPRI, r3
 800431e:	f3bf 8f6f 	isb	sy
 8004322:	f3bf 8f4f 	dsb	sy
 8004326:	613b      	str	r3, [r7, #16]
    }
 8004328:	bf00      	nop
 800432a:	e7fe      	b.n	800432a <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800432c:	6a3b      	ldr	r3, [r7, #32]
 800432e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	429a      	cmp	r2, r3
 8004334:	d902      	bls.n	800433c <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	627b      	str	r3, [r7, #36]	; 0x24
 800433a:	e002      	b.n	8004342 <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800433c:	6a3b      	ldr	r3, [r7, #32]
 800433e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004340:	627b      	str	r3, [r7, #36]	; 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8004342:	6a3b      	ldr	r3, [r7, #32]
 8004344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004348:	429a      	cmp	r2, r3
 800434a:	f000 8081 	beq.w	8004450 <vTaskPriorityDisinheritAfterTimeout+0x15c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800434e:	6a3b      	ldr	r3, [r7, #32]
 8004350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004352:	69fa      	ldr	r2, [r7, #28]
 8004354:	429a      	cmp	r2, r3
 8004356:	d17b      	bne.n	8004450 <vTaskPriorityDisinheritAfterTimeout+0x15c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8004358:	4b3f      	ldr	r3, [pc, #252]	; (8004458 <vTaskPriorityDisinheritAfterTimeout+0x164>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	6a3a      	ldr	r2, [r7, #32]
 800435e:	429a      	cmp	r2, r3
 8004360:	d10a      	bne.n	8004378 <vTaskPriorityDisinheritAfterTimeout+0x84>
        __asm volatile
 8004362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004366:	f383 8811 	msr	BASEPRI, r3
 800436a:	f3bf 8f6f 	isb	sy
 800436e:	f3bf 8f4f 	dsb	sy
 8004372:	60fb      	str	r3, [r7, #12]
    }
 8004374:	bf00      	nop
 8004376:	e7fe      	b.n	8004376 <vTaskPriorityDisinheritAfterTimeout+0x82>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004378:	6a3b      	ldr	r3, [r7, #32]
 800437a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437c:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 800437e:	6a3b      	ldr	r3, [r7, #32]
 8004380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004382:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004384:	6a3b      	ldr	r3, [r7, #32]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	2b00      	cmp	r3, #0
 800438a:	db04      	blt.n	8004396 <vTaskPriorityDisinheritAfterTimeout+0xa2>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800438c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438e:	f1c3 0205 	rsb	r2, r3, #5
 8004392:	6a3b      	ldr	r3, [r7, #32]
 8004394:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004396:	6a3b      	ldr	r3, [r7, #32]
 8004398:	6959      	ldr	r1, [r3, #20]
 800439a:	69ba      	ldr	r2, [r7, #24]
 800439c:	4613      	mov	r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	4413      	add	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4a2d      	ldr	r2, [pc, #180]	; (800445c <vTaskPriorityDisinheritAfterTimeout+0x168>)
 80043a6:	4413      	add	r3, r2
 80043a8:	4299      	cmp	r1, r3
 80043aa:	d151      	bne.n	8004450 <vTaskPriorityDisinheritAfterTimeout+0x15c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043ac:	6a3b      	ldr	r3, [r7, #32]
 80043ae:	3304      	adds	r3, #4
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7fe f996 	bl	80026e2 <uxListRemove>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10a      	bne.n	80043d2 <vTaskPriorityDisinheritAfterTimeout+0xde>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80043bc:	6a3b      	ldr	r3, [r7, #32]
 80043be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c0:	2201      	movs	r2, #1
 80043c2:	fa02 f303 	lsl.w	r3, r2, r3
 80043c6:	43da      	mvns	r2, r3
 80043c8:	4b25      	ldr	r3, [pc, #148]	; (8004460 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4013      	ands	r3, r2
 80043ce:	4a24      	ldr	r2, [pc, #144]	; (8004460 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 80043d0:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 80043d2:	6a3b      	ldr	r3, [r7, #32]
 80043d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d6:	2201      	movs	r2, #1
 80043d8:	409a      	lsls	r2, r3
 80043da:	4b21      	ldr	r3, [pc, #132]	; (8004460 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4313      	orrs	r3, r2
 80043e0:	4a1f      	ldr	r2, [pc, #124]	; (8004460 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 80043e2:	6013      	str	r3, [r2, #0]
 80043e4:	6a3b      	ldr	r3, [r7, #32]
 80043e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043e8:	491c      	ldr	r1, [pc, #112]	; (800445c <vTaskPriorityDisinheritAfterTimeout+0x168>)
 80043ea:	4613      	mov	r3, r2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	4413      	add	r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	440b      	add	r3, r1
 80043f4:	3304      	adds	r3, #4
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	617b      	str	r3, [r7, #20]
 80043fa:	6a3b      	ldr	r3, [r7, #32]
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	609a      	str	r2, [r3, #8]
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	689a      	ldr	r2, [r3, #8]
 8004404:	6a3b      	ldr	r3, [r7, #32]
 8004406:	60da      	str	r2, [r3, #12]
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	6a3a      	ldr	r2, [r7, #32]
 800440e:	3204      	adds	r2, #4
 8004410:	605a      	str	r2, [r3, #4]
 8004412:	6a3b      	ldr	r3, [r7, #32]
 8004414:	1d1a      	adds	r2, r3, #4
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	609a      	str	r2, [r3, #8]
 800441a:	6a3b      	ldr	r3, [r7, #32]
 800441c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800441e:	4613      	mov	r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4413      	add	r3, r2
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	4a0d      	ldr	r2, [pc, #52]	; (800445c <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8004428:	441a      	add	r2, r3
 800442a:	6a3b      	ldr	r3, [r7, #32]
 800442c:	615a      	str	r2, [r3, #20]
 800442e:	6a3b      	ldr	r3, [r7, #32]
 8004430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004432:	490a      	ldr	r1, [pc, #40]	; (800445c <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8004434:	4613      	mov	r3, r2
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	4413      	add	r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	440b      	add	r3, r1
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	1c59      	adds	r1, r3, #1
 8004442:	4806      	ldr	r0, [pc, #24]	; (800445c <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8004444:	4613      	mov	r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	4413      	add	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4403      	add	r3, r0
 800444e:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004450:	bf00      	nop
 8004452:	3728      	adds	r7, #40	; 0x28
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	20000108 	.word	0x20000108
 800445c:	2000010c 	.word	0x2000010c
 8004460:	200001e8 	.word	0x200001e8

08004464 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8004464:	b480      	push	{r7}
 8004466:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8004468:	4b07      	ldr	r3, [pc, #28]	; (8004488 <pvTaskIncrementMutexHeldCount+0x24>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d004      	beq.n	800447a <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8004470:	4b05      	ldr	r3, [pc, #20]	; (8004488 <pvTaskIncrementMutexHeldCount+0x24>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004476:	3201      	adds	r2, #1
 8004478:	655a      	str	r2, [r3, #84]	; 0x54
        }

        return pxCurrentTCB;
 800447a:	4b03      	ldr	r3, [pc, #12]	; (8004488 <pvTaskIncrementMutexHeldCount+0x24>)
 800447c:	681b      	ldr	r3, [r3, #0]
    }
 800447e:	4618      	mov	r0, r3
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr
 8004488:	20000108 	.word	0x20000108

0800448c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004496:	4b36      	ldr	r3, [pc, #216]	; (8004570 <prvAddCurrentTaskToDelayedList+0xe4>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800449c:	4b35      	ldr	r3, [pc, #212]	; (8004574 <prvAddCurrentTaskToDelayedList+0xe8>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	3304      	adds	r3, #4
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7fe f91d 	bl	80026e2 <uxListRemove>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10b      	bne.n	80044c6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80044ae:	4b31      	ldr	r3, [pc, #196]	; (8004574 <prvAddCurrentTaskToDelayedList+0xe8>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b4:	2201      	movs	r2, #1
 80044b6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ba:	43da      	mvns	r2, r3
 80044bc:	4b2e      	ldr	r3, [pc, #184]	; (8004578 <prvAddCurrentTaskToDelayedList+0xec>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4013      	ands	r3, r2
 80044c2:	4a2d      	ldr	r2, [pc, #180]	; (8004578 <prvAddCurrentTaskToDelayedList+0xec>)
 80044c4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044cc:	d124      	bne.n	8004518 <prvAddCurrentTaskToDelayedList+0x8c>
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d021      	beq.n	8004518 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044d4:	4b29      	ldr	r3, [pc, #164]	; (800457c <prvAddCurrentTaskToDelayedList+0xf0>)
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	613b      	str	r3, [r7, #16]
 80044da:	4b26      	ldr	r3, [pc, #152]	; (8004574 <prvAddCurrentTaskToDelayedList+0xe8>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	609a      	str	r2, [r3, #8]
 80044e2:	4b24      	ldr	r3, [pc, #144]	; (8004574 <prvAddCurrentTaskToDelayedList+0xe8>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	6892      	ldr	r2, [r2, #8]
 80044ea:	60da      	str	r2, [r3, #12]
 80044ec:	4b21      	ldr	r3, [pc, #132]	; (8004574 <prvAddCurrentTaskToDelayedList+0xe8>)
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	3204      	adds	r2, #4
 80044f6:	605a      	str	r2, [r3, #4]
 80044f8:	4b1e      	ldr	r3, [pc, #120]	; (8004574 <prvAddCurrentTaskToDelayedList+0xe8>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	1d1a      	adds	r2, r3, #4
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	609a      	str	r2, [r3, #8]
 8004502:	4b1c      	ldr	r3, [pc, #112]	; (8004574 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a1d      	ldr	r2, [pc, #116]	; (800457c <prvAddCurrentTaskToDelayedList+0xf0>)
 8004508:	615a      	str	r2, [r3, #20]
 800450a:	4b1c      	ldr	r3, [pc, #112]	; (800457c <prvAddCurrentTaskToDelayedList+0xf0>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	3301      	adds	r3, #1
 8004510:	4a1a      	ldr	r2, [pc, #104]	; (800457c <prvAddCurrentTaskToDelayedList+0xf0>)
 8004512:	6013      	str	r3, [r2, #0]
 8004514:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004516:	e026      	b.n	8004566 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4413      	add	r3, r2
 800451e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004520:	4b14      	ldr	r3, [pc, #80]	; (8004574 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	429a      	cmp	r2, r3
 800452e:	d209      	bcs.n	8004544 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004530:	4b13      	ldr	r3, [pc, #76]	; (8004580 <prvAddCurrentTaskToDelayedList+0xf4>)
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	4b0f      	ldr	r3, [pc, #60]	; (8004574 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	3304      	adds	r3, #4
 800453a:	4619      	mov	r1, r3
 800453c:	4610      	mov	r0, r2
 800453e:	f7fe f897 	bl	8002670 <vListInsert>
}
 8004542:	e010      	b.n	8004566 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004544:	4b0f      	ldr	r3, [pc, #60]	; (8004584 <prvAddCurrentTaskToDelayedList+0xf8>)
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	4b0a      	ldr	r3, [pc, #40]	; (8004574 <prvAddCurrentTaskToDelayedList+0xe8>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	3304      	adds	r3, #4
 800454e:	4619      	mov	r1, r3
 8004550:	4610      	mov	r0, r2
 8004552:	f7fe f88d 	bl	8002670 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8004556:	4b0c      	ldr	r3, [pc, #48]	; (8004588 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	429a      	cmp	r2, r3
 800455e:	d202      	bcs.n	8004566 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8004560:	4a09      	ldr	r2, [pc, #36]	; (8004588 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6013      	str	r3, [r2, #0]
}
 8004566:	bf00      	nop
 8004568:	3718      	adds	r7, #24
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	200001e4 	.word	0x200001e4
 8004574:	20000108 	.word	0x20000108
 8004578:	200001e8 	.word	0x200001e8
 800457c:	200001cc 	.word	0x200001cc
 8004580:	2000019c 	.word	0x2000019c
 8004584:	20000198 	.word	0x20000198
 8004588:	20000200 	.word	0x20000200

0800458c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004592:	2300      	movs	r3, #0
 8004594:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004596:	f000 fa47 	bl	8004a28 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800459a:	4b11      	ldr	r3, [pc, #68]	; (80045e0 <xTimerCreateTimerTask+0x54>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00b      	beq.n	80045ba <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80045a2:	4b10      	ldr	r3, [pc, #64]	; (80045e4 <xTimerCreateTimerTask+0x58>)
 80045a4:	9301      	str	r3, [sp, #4]
 80045a6:	2302      	movs	r3, #2
 80045a8:	9300      	str	r3, [sp, #0]
 80045aa:	2300      	movs	r3, #0
 80045ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80045b0:	490d      	ldr	r1, [pc, #52]	; (80045e8 <xTimerCreateTimerTask+0x5c>)
 80045b2:	480e      	ldr	r0, [pc, #56]	; (80045ec <xTimerCreateTimerTask+0x60>)
 80045b4:	f7fe fe48 	bl	8003248 <xTaskCreate>
 80045b8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d10a      	bne.n	80045d6 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80045c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c4:	f383 8811 	msr	BASEPRI, r3
 80045c8:	f3bf 8f6f 	isb	sy
 80045cc:	f3bf 8f4f 	dsb	sy
 80045d0:	603b      	str	r3, [r7, #0]
    }
 80045d2:	bf00      	nop
 80045d4:	e7fe      	b.n	80045d4 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80045d6:	687b      	ldr	r3, [r7, #4]
    }
 80045d8:	4618      	mov	r0, r3
 80045da:	3708      	adds	r7, #8
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	2000023c 	.word	0x2000023c
 80045e4:	20000240 	.word	0x20000240
 80045e8:	08005300 	.word	0x08005300
 80045ec:	08004695 	.word	0x08004695

080045f0 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80045fc:	e008      	b.n	8004610 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	68ba      	ldr	r2, [r7, #8]
 8004604:	4413      	add	r3, r2
 8004606:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6a1b      	ldr	r3, [r3, #32]
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	699a      	ldr	r2, [r3, #24]
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	18d1      	adds	r1, r2, r3
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f000 f8dd 	bl	80047dc <prvInsertTimerInActiveList>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1ea      	bne.n	80045fe <prvReloadTimer+0xe>
        }
    }
 8004628:	bf00      	nop
 800462a:	bf00      	nop
 800462c:	3710      	adds	r7, #16
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
	...

08004634 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800463e:	4b14      	ldr	r3, [pc, #80]	; (8004690 <prvProcessExpiredTimer+0x5c>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	3304      	adds	r3, #4
 800464c:	4618      	mov	r0, r3
 800464e:	f7fe f848 	bl	80026e2 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004658:	f003 0304 	and.w	r3, r3, #4
 800465c:	2b00      	cmp	r3, #0
 800465e:	d005      	beq.n	800466c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004660:	683a      	ldr	r2, [r7, #0]
 8004662:	6879      	ldr	r1, [r7, #4]
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f7ff ffc3 	bl	80045f0 <prvReloadTimer>
 800466a:	e008      	b.n	800467e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004672:	f023 0301 	bic.w	r3, r3, #1
 8004676:	b2da      	uxtb	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	4798      	blx	r3
    }
 8004686:	bf00      	nop
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	20000234 	.word	0x20000234

08004694 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800469c:	f107 0308 	add.w	r3, r7, #8
 80046a0:	4618      	mov	r0, r3
 80046a2:	f000 f857 	bl	8004754 <prvGetNextExpireTime>
 80046a6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	4619      	mov	r1, r3
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	f000 f803 	bl	80046b8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80046b2:	f000 f8d5 	bl	8004860 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80046b6:	e7f1      	b.n	800469c <prvTimerTask+0x8>

080046b8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80046c2:	f7fe ffb1 	bl	8003628 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80046c6:	f107 0308 	add.w	r3, r7, #8
 80046ca:	4618      	mov	r0, r3
 80046cc:	f000 f866 	bl	800479c <prvSampleTimeNow>
 80046d0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d130      	bne.n	800473a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d10a      	bne.n	80046f4 <prvProcessTimerOrBlockTask+0x3c>
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d806      	bhi.n	80046f4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80046e6:	f7fe ffad 	bl	8003644 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80046ea:	68f9      	ldr	r1, [r7, #12]
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f7ff ffa1 	bl	8004634 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80046f2:	e024      	b.n	800473e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d008      	beq.n	800470c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80046fa:	4b13      	ldr	r3, [pc, #76]	; (8004748 <prvProcessTimerOrBlockTask+0x90>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d101      	bne.n	8004708 <prvProcessTimerOrBlockTask+0x50>
 8004704:	2301      	movs	r3, #1
 8004706:	e000      	b.n	800470a <prvProcessTimerOrBlockTask+0x52>
 8004708:	2300      	movs	r3, #0
 800470a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800470c:	4b0f      	ldr	r3, [pc, #60]	; (800474c <prvProcessTimerOrBlockTask+0x94>)
 800470e:	6818      	ldr	r0, [r3, #0]
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	683a      	ldr	r2, [r7, #0]
 8004718:	4619      	mov	r1, r3
 800471a:	f7fe fd61 	bl	80031e0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800471e:	f7fe ff91 	bl	8003644 <xTaskResumeAll>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d10a      	bne.n	800473e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004728:	4b09      	ldr	r3, [pc, #36]	; (8004750 <prvProcessTimerOrBlockTask+0x98>)
 800472a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800472e:	601a      	str	r2, [r3, #0]
 8004730:	f3bf 8f4f 	dsb	sy
 8004734:	f3bf 8f6f 	isb	sy
    }
 8004738:	e001      	b.n	800473e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800473a:	f7fe ff83 	bl	8003644 <xTaskResumeAll>
    }
 800473e:	bf00      	nop
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	20000238 	.word	0x20000238
 800474c:	2000023c 	.word	0x2000023c
 8004750:	e000ed04 	.word	0xe000ed04

08004754 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800475c:	4b0e      	ldr	r3, [pc, #56]	; (8004798 <prvGetNextExpireTime+0x44>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <prvGetNextExpireTime+0x16>
 8004766:	2201      	movs	r2, #1
 8004768:	e000      	b.n	800476c <prvGetNextExpireTime+0x18>
 800476a:	2200      	movs	r2, #0
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d105      	bne.n	8004784 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004778:	4b07      	ldr	r3, [pc, #28]	; (8004798 <prvGetNextExpireTime+0x44>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	60fb      	str	r3, [r7, #12]
 8004782:	e001      	b.n	8004788 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004784:	2300      	movs	r3, #0
 8004786:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004788:	68fb      	ldr	r3, [r7, #12]
    }
 800478a:	4618      	mov	r0, r3
 800478c:	3714      	adds	r7, #20
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	20000234 	.word	0x20000234

0800479c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80047a4:	f7ff f84a 	bl	800383c <xTaskGetTickCount>
 80047a8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80047aa:	4b0b      	ldr	r3, [pc, #44]	; (80047d8 <prvSampleTimeNow+0x3c>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d205      	bcs.n	80047c0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80047b4:	f000 f912 	bl	80049dc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	601a      	str	r2, [r3, #0]
 80047be:	e002      	b.n	80047c6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80047c6:	4a04      	ldr	r2, [pc, #16]	; (80047d8 <prvSampleTimeNow+0x3c>)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80047cc:	68fb      	ldr	r3, [r7, #12]
    }
 80047ce:	4618      	mov	r0, r3
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	20000244 	.word	0x20000244

080047dc <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80047dc:	b580      	push	{r7, lr}
 80047de:	b086      	sub	sp, #24
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
 80047e8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80047ea:	2300      	movs	r3, #0
 80047ec:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80047fa:	68ba      	ldr	r2, [r7, #8]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d812      	bhi.n	8004828 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	1ad2      	subs	r2, r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	429a      	cmp	r2, r3
 800480e:	d302      	bcc.n	8004816 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004810:	2301      	movs	r3, #1
 8004812:	617b      	str	r3, [r7, #20]
 8004814:	e01b      	b.n	800484e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004816:	4b10      	ldr	r3, [pc, #64]	; (8004858 <prvInsertTimerInActiveList+0x7c>)
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	3304      	adds	r3, #4
 800481e:	4619      	mov	r1, r3
 8004820:	4610      	mov	r0, r2
 8004822:	f7fd ff25 	bl	8002670 <vListInsert>
 8004826:	e012      	b.n	800484e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	429a      	cmp	r2, r3
 800482e:	d206      	bcs.n	800483e <prvInsertTimerInActiveList+0x62>
 8004830:	68ba      	ldr	r2, [r7, #8]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	429a      	cmp	r2, r3
 8004836:	d302      	bcc.n	800483e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004838:	2301      	movs	r3, #1
 800483a:	617b      	str	r3, [r7, #20]
 800483c:	e007      	b.n	800484e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800483e:	4b07      	ldr	r3, [pc, #28]	; (800485c <prvInsertTimerInActiveList+0x80>)
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	3304      	adds	r3, #4
 8004846:	4619      	mov	r1, r3
 8004848:	4610      	mov	r0, r2
 800484a:	f7fd ff11 	bl	8002670 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800484e:	697b      	ldr	r3, [r7, #20]
    }
 8004850:	4618      	mov	r0, r3
 8004852:	3718      	adds	r7, #24
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	20000238 	.word	0x20000238
 800485c:	20000234 	.word	0x20000234

08004860 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004860:	b580      	push	{r7, lr}
 8004862:	b088      	sub	sp, #32
 8004864:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004866:	e0a6      	b.n	80049b6 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	2b00      	cmp	r3, #0
 800486c:	f2c0 80a2 	blt.w	80049b4 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	695b      	ldr	r3, [r3, #20]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d004      	beq.n	8004886 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	3304      	adds	r3, #4
 8004880:	4618      	mov	r0, r3
 8004882:	f7fd ff2e 	bl	80026e2 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004886:	1d3b      	adds	r3, r7, #4
 8004888:	4618      	mov	r0, r3
 800488a:	f7ff ff87 	bl	800479c <prvSampleTimeNow>
 800488e:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	3b01      	subs	r3, #1
 8004894:	2b08      	cmp	r3, #8
 8004896:	f200 808e 	bhi.w	80049b6 <prvProcessReceivedCommands+0x156>
 800489a:	a201      	add	r2, pc, #4	; (adr r2, 80048a0 <prvProcessReceivedCommands+0x40>)
 800489c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a0:	080048c5 	.word	0x080048c5
 80048a4:	080048c5 	.word	0x080048c5
 80048a8:	0800492d 	.word	0x0800492d
 80048ac:	08004941 	.word	0x08004941
 80048b0:	0800498b 	.word	0x0800498b
 80048b4:	080048c5 	.word	0x080048c5
 80048b8:	080048c5 	.word	0x080048c5
 80048bc:	0800492d 	.word	0x0800492d
 80048c0:	08004941 	.word	0x08004941
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048ca:	f043 0301 	orr.w	r3, r3, #1
 80048ce:	b2da      	uxtb	r2, r3
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	18d1      	adds	r1, r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	69f8      	ldr	r0, [r7, #28]
 80048e4:	f7ff ff7a 	bl	80047dc <prvInsertTimerInActiveList>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d063      	beq.n	80049b6 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048f4:	f003 0304 	and.w	r3, r3, #4
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d009      	beq.n	8004910 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	4413      	add	r3, r2
 8004904:	69ba      	ldr	r2, [r7, #24]
 8004906:	4619      	mov	r1, r3
 8004908:	69f8      	ldr	r0, [r7, #28]
 800490a:	f7ff fe71 	bl	80045f0 <prvReloadTimer>
 800490e:	e008      	b.n	8004922 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004916:	f023 0301 	bic.w	r3, r3, #1
 800491a:	b2da      	uxtb	r2, r3
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	69f8      	ldr	r0, [r7, #28]
 8004928:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800492a:	e044      	b.n	80049b6 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004932:	f023 0301 	bic.w	r3, r3, #1
 8004936:	b2da      	uxtb	r2, r3
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800493e:	e03a      	b.n	80049b6 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004946:	f043 0301 	orr.w	r3, r3, #1
 800494a:	b2da      	uxtb	r2, r3
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10a      	bne.n	8004976 <prvProcessReceivedCommands+0x116>
        __asm volatile
 8004960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004964:	f383 8811 	msr	BASEPRI, r3
 8004968:	f3bf 8f6f 	isb	sy
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	617b      	str	r3, [r7, #20]
    }
 8004972:	bf00      	nop
 8004974:	e7fe      	b.n	8004974 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	699a      	ldr	r2, [r3, #24]
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	18d1      	adds	r1, r2, r3
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	69ba      	ldr	r2, [r7, #24]
 8004982:	69f8      	ldr	r0, [r7, #28]
 8004984:	f7ff ff2a 	bl	80047dc <prvInsertTimerInActiveList>
                        break;
 8004988:	e015      	b.n	80049b6 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004990:	f003 0302 	and.w	r3, r3, #2
 8004994:	2b00      	cmp	r3, #0
 8004996:	d103      	bne.n	80049a0 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8004998:	69f8      	ldr	r0, [r7, #28]
 800499a:	f000 fb49 	bl	8005030 <vPortFree>
 800499e:	e00a      	b.n	80049b6 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049a6:	f023 0301 	bic.w	r3, r3, #1
 80049aa:	b2da      	uxtb	r2, r3
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80049b2:	e000      	b.n	80049b6 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80049b4:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80049b6:	4b08      	ldr	r3, [pc, #32]	; (80049d8 <prvProcessReceivedCommands+0x178>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f107 0108 	add.w	r1, r7, #8
 80049be:	2200      	movs	r2, #0
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7fe f8b9 	bl	8002b38 <xQueueReceive>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f47f af4d 	bne.w	8004868 <prvProcessReceivedCommands+0x8>
        }
    }
 80049ce:	bf00      	nop
 80049d0:	bf00      	nop
 80049d2:	3720      	adds	r7, #32
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	2000023c 	.word	0x2000023c

080049dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80049e2:	e009      	b.n	80049f8 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80049e4:	4b0e      	ldr	r3, [pc, #56]	; (8004a20 <prvSwitchTimerLists+0x44>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80049ee:	f04f 31ff 	mov.w	r1, #4294967295
 80049f2:	6838      	ldr	r0, [r7, #0]
 80049f4:	f7ff fe1e 	bl	8004634 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80049f8:	4b09      	ldr	r3, [pc, #36]	; (8004a20 <prvSwitchTimerLists+0x44>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1f0      	bne.n	80049e4 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004a02:	4b07      	ldr	r3, [pc, #28]	; (8004a20 <prvSwitchTimerLists+0x44>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004a08:	4b06      	ldr	r3, [pc, #24]	; (8004a24 <prvSwitchTimerLists+0x48>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a04      	ldr	r2, [pc, #16]	; (8004a20 <prvSwitchTimerLists+0x44>)
 8004a0e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004a10:	4a04      	ldr	r2, [pc, #16]	; (8004a24 <prvSwitchTimerLists+0x48>)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6013      	str	r3, [r2, #0]
    }
 8004a16:	bf00      	nop
 8004a18:	3708      	adds	r7, #8
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	20000234 	.word	0x20000234
 8004a24:	20000238 	.word	0x20000238

08004a28 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004a2c:	f000 f964 	bl	8004cf8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004a30:	4b12      	ldr	r3, [pc, #72]	; (8004a7c <prvCheckForValidListAndQueue+0x54>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d11d      	bne.n	8004a74 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004a38:	4811      	ldr	r0, [pc, #68]	; (8004a80 <prvCheckForValidListAndQueue+0x58>)
 8004a3a:	f7fd fdec 	bl	8002616 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004a3e:	4811      	ldr	r0, [pc, #68]	; (8004a84 <prvCheckForValidListAndQueue+0x5c>)
 8004a40:	f7fd fde9 	bl	8002616 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004a44:	4b10      	ldr	r3, [pc, #64]	; (8004a88 <prvCheckForValidListAndQueue+0x60>)
 8004a46:	4a0e      	ldr	r2, [pc, #56]	; (8004a80 <prvCheckForValidListAndQueue+0x58>)
 8004a48:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004a4a:	4b10      	ldr	r3, [pc, #64]	; (8004a8c <prvCheckForValidListAndQueue+0x64>)
 8004a4c:	4a0d      	ldr	r2, [pc, #52]	; (8004a84 <prvCheckForValidListAndQueue+0x5c>)
 8004a4e:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004a50:	2200      	movs	r2, #0
 8004a52:	210c      	movs	r1, #12
 8004a54:	200a      	movs	r0, #10
 8004a56:	f7fd feff 	bl	8002858 <xQueueGenericCreate>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	4a07      	ldr	r2, [pc, #28]	; (8004a7c <prvCheckForValidListAndQueue+0x54>)
 8004a5e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004a60:	4b06      	ldr	r3, [pc, #24]	; (8004a7c <prvCheckForValidListAndQueue+0x54>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d005      	beq.n	8004a74 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004a68:	4b04      	ldr	r3, [pc, #16]	; (8004a7c <prvCheckForValidListAndQueue+0x54>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4908      	ldr	r1, [pc, #32]	; (8004a90 <prvCheckForValidListAndQueue+0x68>)
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7fe fb68 	bl	8003144 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004a74:	f000 f970 	bl	8004d58 <vPortExitCritical>
    }
 8004a78:	bf00      	nop
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	2000023c 	.word	0x2000023c
 8004a80:	2000020c 	.word	0x2000020c
 8004a84:	20000220 	.word	0x20000220
 8004a88:	20000234 	.word	0x20000234
 8004a8c:	20000238 	.word	0x20000238
 8004a90:	08005308 	.word	0x08005308

08004a94 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004a94:	b480      	push	{r7}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	3b04      	subs	r3, #4
 8004aa4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004aac:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	3b04      	subs	r3, #4
 8004ab2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	f023 0201 	bic.w	r2, r3, #1
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	3b04      	subs	r3, #4
 8004ac2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004ac4:	4a0c      	ldr	r2, [pc, #48]	; (8004af8 <pxPortInitialiseStack+0x64>)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	3b14      	subs	r3, #20
 8004ace:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	3b04      	subs	r3, #4
 8004ada:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f06f 0202 	mvn.w	r2, #2
 8004ae2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	3b20      	subs	r3, #32
 8004ae8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004aea:	68fb      	ldr	r3, [r7, #12]
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3714      	adds	r7, #20
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr
 8004af8:	08004afd 	.word	0x08004afd

08004afc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004b02:	2300      	movs	r3, #0
 8004b04:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004b06:	4b12      	ldr	r3, [pc, #72]	; (8004b50 <prvTaskExitError+0x54>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b0e:	d00a      	beq.n	8004b26 <prvTaskExitError+0x2a>
        __asm volatile
 8004b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b14:	f383 8811 	msr	BASEPRI, r3
 8004b18:	f3bf 8f6f 	isb	sy
 8004b1c:	f3bf 8f4f 	dsb	sy
 8004b20:	60fb      	str	r3, [r7, #12]
    }
 8004b22:	bf00      	nop
 8004b24:	e7fe      	b.n	8004b24 <prvTaskExitError+0x28>
        __asm volatile
 8004b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2a:	f383 8811 	msr	BASEPRI, r3
 8004b2e:	f3bf 8f6f 	isb	sy
 8004b32:	f3bf 8f4f 	dsb	sy
 8004b36:	60bb      	str	r3, [r7, #8]
    }
 8004b38:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004b3a:	bf00      	nop
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d0fc      	beq.n	8004b3c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004b42:	bf00      	nop
 8004b44:	bf00      	nop
 8004b46:	3714      	adds	r7, #20
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr
 8004b50:	20000010 	.word	0x20000010
	...

08004b60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004b60:	4b07      	ldr	r3, [pc, #28]	; (8004b80 <pxCurrentTCBConst2>)
 8004b62:	6819      	ldr	r1, [r3, #0]
 8004b64:	6808      	ldr	r0, [r1, #0]
 8004b66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b6a:	f380 8809 	msr	PSP, r0
 8004b6e:	f3bf 8f6f 	isb	sy
 8004b72:	f04f 0000 	mov.w	r0, #0
 8004b76:	f380 8811 	msr	BASEPRI, r0
 8004b7a:	4770      	bx	lr
 8004b7c:	f3af 8000 	nop.w

08004b80 <pxCurrentTCBConst2>:
 8004b80:	20000108 	.word	0x20000108
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004b84:	bf00      	nop
 8004b86:	bf00      	nop

08004b88 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004b88:	4808      	ldr	r0, [pc, #32]	; (8004bac <prvPortStartFirstTask+0x24>)
 8004b8a:	6800      	ldr	r0, [r0, #0]
 8004b8c:	6800      	ldr	r0, [r0, #0]
 8004b8e:	f380 8808 	msr	MSP, r0
 8004b92:	f04f 0000 	mov.w	r0, #0
 8004b96:	f380 8814 	msr	CONTROL, r0
 8004b9a:	b662      	cpsie	i
 8004b9c:	b661      	cpsie	f
 8004b9e:	f3bf 8f4f 	dsb	sy
 8004ba2:	f3bf 8f6f 	isb	sy
 8004ba6:	df00      	svc	0
 8004ba8:	bf00      	nop
 8004baa:	0000      	.short	0x0000
 8004bac:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004bb0:	bf00      	nop
 8004bb2:	bf00      	nop

08004bb4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b086      	sub	sp, #24
 8004bb8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004bba:	4b46      	ldr	r3, [pc, #280]	; (8004cd4 <xPortStartScheduler+0x120>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a46      	ldr	r2, [pc, #280]	; (8004cd8 <xPortStartScheduler+0x124>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d10a      	bne.n	8004bda <xPortStartScheduler+0x26>
        __asm volatile
 8004bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc8:	f383 8811 	msr	BASEPRI, r3
 8004bcc:	f3bf 8f6f 	isb	sy
 8004bd0:	f3bf 8f4f 	dsb	sy
 8004bd4:	613b      	str	r3, [r7, #16]
    }
 8004bd6:	bf00      	nop
 8004bd8:	e7fe      	b.n	8004bd8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004bda:	4b3e      	ldr	r3, [pc, #248]	; (8004cd4 <xPortStartScheduler+0x120>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a3f      	ldr	r2, [pc, #252]	; (8004cdc <xPortStartScheduler+0x128>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d10a      	bne.n	8004bfa <xPortStartScheduler+0x46>
        __asm volatile
 8004be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be8:	f383 8811 	msr	BASEPRI, r3
 8004bec:	f3bf 8f6f 	isb	sy
 8004bf0:	f3bf 8f4f 	dsb	sy
 8004bf4:	60fb      	str	r3, [r7, #12]
    }
 8004bf6:	bf00      	nop
 8004bf8:	e7fe      	b.n	8004bf8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004bfa:	4b39      	ldr	r3, [pc, #228]	; (8004ce0 <xPortStartScheduler+0x12c>)
 8004bfc:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	22ff      	movs	r2, #255	; 0xff
 8004c0a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004c14:	78fb      	ldrb	r3, [r7, #3]
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004c1c:	b2da      	uxtb	r2, r3
 8004c1e:	4b31      	ldr	r3, [pc, #196]	; (8004ce4 <xPortStartScheduler+0x130>)
 8004c20:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004c22:	4b31      	ldr	r3, [pc, #196]	; (8004ce8 <xPortStartScheduler+0x134>)
 8004c24:	2207      	movs	r2, #7
 8004c26:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c28:	e009      	b.n	8004c3e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8004c2a:	4b2f      	ldr	r3, [pc, #188]	; (8004ce8 <xPortStartScheduler+0x134>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	4a2d      	ldr	r2, [pc, #180]	; (8004ce8 <xPortStartScheduler+0x134>)
 8004c32:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004c34:	78fb      	ldrb	r3, [r7, #3]
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	005b      	lsls	r3, r3, #1
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c3e:	78fb      	ldrb	r3, [r7, #3]
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c46:	2b80      	cmp	r3, #128	; 0x80
 8004c48:	d0ef      	beq.n	8004c2a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004c4a:	4b27      	ldr	r3, [pc, #156]	; (8004ce8 <xPortStartScheduler+0x134>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f1c3 0307 	rsb	r3, r3, #7
 8004c52:	2b04      	cmp	r3, #4
 8004c54:	d00a      	beq.n	8004c6c <xPortStartScheduler+0xb8>
        __asm volatile
 8004c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5a:	f383 8811 	msr	BASEPRI, r3
 8004c5e:	f3bf 8f6f 	isb	sy
 8004c62:	f3bf 8f4f 	dsb	sy
 8004c66:	60bb      	str	r3, [r7, #8]
    }
 8004c68:	bf00      	nop
 8004c6a:	e7fe      	b.n	8004c6a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004c6c:	4b1e      	ldr	r3, [pc, #120]	; (8004ce8 <xPortStartScheduler+0x134>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	021b      	lsls	r3, r3, #8
 8004c72:	4a1d      	ldr	r2, [pc, #116]	; (8004ce8 <xPortStartScheduler+0x134>)
 8004c74:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004c76:	4b1c      	ldr	r3, [pc, #112]	; (8004ce8 <xPortStartScheduler+0x134>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c7e:	4a1a      	ldr	r2, [pc, #104]	; (8004ce8 <xPortStartScheduler+0x134>)
 8004c80:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	b2da      	uxtb	r2, r3
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004c8a:	4b18      	ldr	r3, [pc, #96]	; (8004cec <xPortStartScheduler+0x138>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a17      	ldr	r2, [pc, #92]	; (8004cec <xPortStartScheduler+0x138>)
 8004c90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c94:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004c96:	4b15      	ldr	r3, [pc, #84]	; (8004cec <xPortStartScheduler+0x138>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a14      	ldr	r2, [pc, #80]	; (8004cec <xPortStartScheduler+0x138>)
 8004c9c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004ca0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004ca2:	f000 f8db 	bl	8004e5c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004ca6:	4b12      	ldr	r3, [pc, #72]	; (8004cf0 <xPortStartScheduler+0x13c>)
 8004ca8:	2200      	movs	r2, #0
 8004caa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004cac:	f000 f8fa 	bl	8004ea4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004cb0:	4b10      	ldr	r3, [pc, #64]	; (8004cf4 <xPortStartScheduler+0x140>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a0f      	ldr	r2, [pc, #60]	; (8004cf4 <xPortStartScheduler+0x140>)
 8004cb6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004cba:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004cbc:	f7ff ff64 	bl	8004b88 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004cc0:	f7fe fee2 	bl	8003a88 <vTaskSwitchContext>
    prvTaskExitError();
 8004cc4:	f7ff ff1a 	bl	8004afc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3718      	adds	r7, #24
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	e000ed00 	.word	0xe000ed00
 8004cd8:	410fc271 	.word	0x410fc271
 8004cdc:	410fc270 	.word	0x410fc270
 8004ce0:	e000e400 	.word	0xe000e400
 8004ce4:	20000248 	.word	0x20000248
 8004ce8:	2000024c 	.word	0x2000024c
 8004cec:	e000ed20 	.word	0xe000ed20
 8004cf0:	20000010 	.word	0x20000010
 8004cf4:	e000ef34 	.word	0xe000ef34

08004cf8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
        __asm volatile
 8004cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d02:	f383 8811 	msr	BASEPRI, r3
 8004d06:	f3bf 8f6f 	isb	sy
 8004d0a:	f3bf 8f4f 	dsb	sy
 8004d0e:	607b      	str	r3, [r7, #4]
    }
 8004d10:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004d12:	4b0f      	ldr	r3, [pc, #60]	; (8004d50 <vPortEnterCritical+0x58>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	3301      	adds	r3, #1
 8004d18:	4a0d      	ldr	r2, [pc, #52]	; (8004d50 <vPortEnterCritical+0x58>)
 8004d1a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004d1c:	4b0c      	ldr	r3, [pc, #48]	; (8004d50 <vPortEnterCritical+0x58>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d10f      	bne.n	8004d44 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004d24:	4b0b      	ldr	r3, [pc, #44]	; (8004d54 <vPortEnterCritical+0x5c>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00a      	beq.n	8004d44 <vPortEnterCritical+0x4c>
        __asm volatile
 8004d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d32:	f383 8811 	msr	BASEPRI, r3
 8004d36:	f3bf 8f6f 	isb	sy
 8004d3a:	f3bf 8f4f 	dsb	sy
 8004d3e:	603b      	str	r3, [r7, #0]
    }
 8004d40:	bf00      	nop
 8004d42:	e7fe      	b.n	8004d42 <vPortEnterCritical+0x4a>
    }
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr
 8004d50:	20000010 	.word	0x20000010
 8004d54:	e000ed04 	.word	0xe000ed04

08004d58 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004d5e:	4b12      	ldr	r3, [pc, #72]	; (8004da8 <vPortExitCritical+0x50>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10a      	bne.n	8004d7c <vPortExitCritical+0x24>
        __asm volatile
 8004d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6a:	f383 8811 	msr	BASEPRI, r3
 8004d6e:	f3bf 8f6f 	isb	sy
 8004d72:	f3bf 8f4f 	dsb	sy
 8004d76:	607b      	str	r3, [r7, #4]
    }
 8004d78:	bf00      	nop
 8004d7a:	e7fe      	b.n	8004d7a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004d7c:	4b0a      	ldr	r3, [pc, #40]	; (8004da8 <vPortExitCritical+0x50>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	3b01      	subs	r3, #1
 8004d82:	4a09      	ldr	r2, [pc, #36]	; (8004da8 <vPortExitCritical+0x50>)
 8004d84:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004d86:	4b08      	ldr	r3, [pc, #32]	; (8004da8 <vPortExitCritical+0x50>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d105      	bne.n	8004d9a <vPortExitCritical+0x42>
 8004d8e:	2300      	movs	r3, #0
 8004d90:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004d98:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004d9a:	bf00      	nop
 8004d9c:	370c      	adds	r7, #12
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	20000010 	.word	0x20000010
 8004dac:	00000000 	.word	0x00000000

08004db0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004db0:	f3ef 8009 	mrs	r0, PSP
 8004db4:	f3bf 8f6f 	isb	sy
 8004db8:	4b15      	ldr	r3, [pc, #84]	; (8004e10 <pxCurrentTCBConst>)
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	f01e 0f10 	tst.w	lr, #16
 8004dc0:	bf08      	it	eq
 8004dc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004dc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dca:	6010      	str	r0, [r2, #0]
 8004dcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004dd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004dd4:	f380 8811 	msr	BASEPRI, r0
 8004dd8:	f3bf 8f4f 	dsb	sy
 8004ddc:	f3bf 8f6f 	isb	sy
 8004de0:	f7fe fe52 	bl	8003a88 <vTaskSwitchContext>
 8004de4:	f04f 0000 	mov.w	r0, #0
 8004de8:	f380 8811 	msr	BASEPRI, r0
 8004dec:	bc09      	pop	{r0, r3}
 8004dee:	6819      	ldr	r1, [r3, #0]
 8004df0:	6808      	ldr	r0, [r1, #0]
 8004df2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004df6:	f01e 0f10 	tst.w	lr, #16
 8004dfa:	bf08      	it	eq
 8004dfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004e00:	f380 8809 	msr	PSP, r0
 8004e04:	f3bf 8f6f 	isb	sy
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	f3af 8000 	nop.w

08004e10 <pxCurrentTCBConst>:
 8004e10:	20000108 	.word	0x20000108
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004e14:	bf00      	nop
 8004e16:	bf00      	nop

08004e18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0
        __asm volatile
 8004e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e22:	f383 8811 	msr	BASEPRI, r3
 8004e26:	f3bf 8f6f 	isb	sy
 8004e2a:	f3bf 8f4f 	dsb	sy
 8004e2e:	607b      	str	r3, [r7, #4]
    }
 8004e30:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004e32:	f7fe fd13 	bl	800385c <xTaskIncrementTick>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d003      	beq.n	8004e44 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004e3c:	4b06      	ldr	r3, [pc, #24]	; (8004e58 <SysTick_Handler+0x40>)
 8004e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e42:	601a      	str	r2, [r3, #0]
 8004e44:	2300      	movs	r3, #0
 8004e46:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	f383 8811 	msr	BASEPRI, r3
    }
 8004e4e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004e50:	bf00      	nop
 8004e52:	3708      	adds	r7, #8
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	e000ed04 	.word	0xe000ed04

08004e5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004e60:	4b0b      	ldr	r3, [pc, #44]	; (8004e90 <vPortSetupTimerInterrupt+0x34>)
 8004e62:	2200      	movs	r2, #0
 8004e64:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004e66:	4b0b      	ldr	r3, [pc, #44]	; (8004e94 <vPortSetupTimerInterrupt+0x38>)
 8004e68:	2200      	movs	r2, #0
 8004e6a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004e6c:	4b0a      	ldr	r3, [pc, #40]	; (8004e98 <vPortSetupTimerInterrupt+0x3c>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a0a      	ldr	r2, [pc, #40]	; (8004e9c <vPortSetupTimerInterrupt+0x40>)
 8004e72:	fba2 2303 	umull	r2, r3, r2, r3
 8004e76:	099b      	lsrs	r3, r3, #6
 8004e78:	4a09      	ldr	r2, [pc, #36]	; (8004ea0 <vPortSetupTimerInterrupt+0x44>)
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004e7e:	4b04      	ldr	r3, [pc, #16]	; (8004e90 <vPortSetupTimerInterrupt+0x34>)
 8004e80:	2207      	movs	r2, #7
 8004e82:	601a      	str	r2, [r3, #0]
}
 8004e84:	bf00      	nop
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	e000e010 	.word	0xe000e010
 8004e94:	e000e018 	.word	0xe000e018
 8004e98:	20000000 	.word	0x20000000
 8004e9c:	10624dd3 	.word	0x10624dd3
 8004ea0:	e000e014 	.word	0xe000e014

08004ea4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004ea4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004eb4 <vPortEnableVFP+0x10>
 8004ea8:	6801      	ldr	r1, [r0, #0]
 8004eaa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004eae:	6001      	str	r1, [r0, #0]
 8004eb0:	4770      	bx	lr
 8004eb2:	0000      	.short	0x0000
 8004eb4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004eb8:	bf00      	nop
 8004eba:	bf00      	nop

08004ebc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b08a      	sub	sp, #40	; 0x28
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004ec8:	f7fe fbae 	bl	8003628 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004ecc:	4b53      	ldr	r3, [pc, #332]	; (800501c <pvPortMalloc+0x160>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d101      	bne.n	8004ed8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004ed4:	f000 f908 	bl	80050e8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d012      	beq.n	8004f04 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8004ede:	2208      	movs	r2, #8
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f003 0307 	and.w	r3, r3, #7
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	3308      	adds	r3, #8
 8004eea:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	43db      	mvns	r3, r3
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d804      	bhi.n	8004f00 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	4413      	add	r3, r2
 8004efc:	607b      	str	r3, [r7, #4]
 8004efe:	e001      	b.n	8004f04 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004f00:	2300      	movs	r3, #0
 8004f02:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	db70      	blt.n	8004fec <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d06d      	beq.n	8004fec <pvPortMalloc+0x130>
 8004f10:	4b43      	ldr	r3, [pc, #268]	; (8005020 <pvPortMalloc+0x164>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d868      	bhi.n	8004fec <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004f1a:	4b42      	ldr	r3, [pc, #264]	; (8005024 <pvPortMalloc+0x168>)
 8004f1c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004f1e:	4b41      	ldr	r3, [pc, #260]	; (8005024 <pvPortMalloc+0x168>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f24:	e004      	b.n	8004f30 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8004f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f28:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d903      	bls.n	8004f42 <pvPortMalloc+0x86>
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1f1      	bne.n	8004f26 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004f42:	4b36      	ldr	r3, [pc, #216]	; (800501c <pvPortMalloc+0x160>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d04f      	beq.n	8004fec <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004f4c:	6a3b      	ldr	r3, [r7, #32]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2208      	movs	r2, #8
 8004f52:	4413      	add	r3, r2
 8004f54:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	6a3b      	ldr	r3, [r7, #32]
 8004f5c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f60:	685a      	ldr	r2, [r3, #4]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	1ad2      	subs	r2, r2, r3
 8004f66:	2308      	movs	r3, #8
 8004f68:	005b      	lsls	r3, r3, #1
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d91f      	bls.n	8004fae <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4413      	add	r3, r2
 8004f74:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	f003 0307 	and.w	r3, r3, #7
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d00a      	beq.n	8004f96 <pvPortMalloc+0xda>
        __asm volatile
 8004f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f84:	f383 8811 	msr	BASEPRI, r3
 8004f88:	f3bf 8f6f 	isb	sy
 8004f8c:	f3bf 8f4f 	dsb	sy
 8004f90:	613b      	str	r3, [r7, #16]
    }
 8004f92:	bf00      	nop
 8004f94:	e7fe      	b.n	8004f94 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f98:	685a      	ldr	r2, [r3, #4]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	1ad2      	subs	r2, r2, r3
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004fa8:	6978      	ldr	r0, [r7, #20]
 8004faa:	f000 f8f9 	bl	80051a0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004fae:	4b1c      	ldr	r3, [pc, #112]	; (8005020 <pvPortMalloc+0x164>)
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	4a19      	ldr	r2, [pc, #100]	; (8005020 <pvPortMalloc+0x164>)
 8004fba:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004fbc:	4b18      	ldr	r3, [pc, #96]	; (8005020 <pvPortMalloc+0x164>)
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	4b19      	ldr	r3, [pc, #100]	; (8005028 <pvPortMalloc+0x16c>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d203      	bcs.n	8004fd0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004fc8:	4b15      	ldr	r3, [pc, #84]	; (8005020 <pvPortMalloc+0x164>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a16      	ldr	r2, [pc, #88]	; (8005028 <pvPortMalloc+0x16c>)
 8004fce:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fda:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fde:	2200      	movs	r2, #0
 8004fe0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004fe2:	4b12      	ldr	r3, [pc, #72]	; (800502c <pvPortMalloc+0x170>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	4a10      	ldr	r2, [pc, #64]	; (800502c <pvPortMalloc+0x170>)
 8004fea:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004fec:	f7fe fb2a 	bl	8003644 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	f003 0307 	and.w	r3, r3, #7
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00a      	beq.n	8005010 <pvPortMalloc+0x154>
        __asm volatile
 8004ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ffe:	f383 8811 	msr	BASEPRI, r3
 8005002:	f3bf 8f6f 	isb	sy
 8005006:	f3bf 8f4f 	dsb	sy
 800500a:	60fb      	str	r3, [r7, #12]
    }
 800500c:	bf00      	nop
 800500e:	e7fe      	b.n	800500e <pvPortMalloc+0x152>
    return pvReturn;
 8005010:	69fb      	ldr	r3, [r7, #28]
}
 8005012:	4618      	mov	r0, r3
 8005014:	3728      	adds	r7, #40	; 0x28
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	20012e58 	.word	0x20012e58
 8005020:	20012e5c 	.word	0x20012e5c
 8005024:	20012e50 	.word	0x20012e50
 8005028:	20012e60 	.word	0x20012e60
 800502c:	20012e64 	.word	0x20012e64

08005030 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b086      	sub	sp, #24
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d049      	beq.n	80050d6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005042:	2308      	movs	r3, #8
 8005044:	425b      	negs	r3, r3
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	4413      	add	r3, r2
 800504a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	2b00      	cmp	r3, #0
 8005056:	db0a      	blt.n	800506e <vPortFree+0x3e>
        __asm volatile
 8005058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505c:	f383 8811 	msr	BASEPRI, r3
 8005060:	f3bf 8f6f 	isb	sy
 8005064:	f3bf 8f4f 	dsb	sy
 8005068:	60fb      	str	r3, [r7, #12]
    }
 800506a:	bf00      	nop
 800506c:	e7fe      	b.n	800506c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00a      	beq.n	800508c <vPortFree+0x5c>
        __asm volatile
 8005076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507a:	f383 8811 	msr	BASEPRI, r3
 800507e:	f3bf 8f6f 	isb	sy
 8005082:	f3bf 8f4f 	dsb	sy
 8005086:	60bb      	str	r3, [r7, #8]
    }
 8005088:	bf00      	nop
 800508a:	e7fe      	b.n	800508a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	0fdb      	lsrs	r3, r3, #31
 8005092:	f003 0301 	and.w	r3, r3, #1
 8005096:	b2db      	uxtb	r3, r3
 8005098:	2b00      	cmp	r3, #0
 800509a:	d01c      	beq.n	80050d6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d118      	bne.n	80050d6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80050b0:	f7fe faba 	bl	8003628 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	685a      	ldr	r2, [r3, #4]
 80050b8:	4b09      	ldr	r3, [pc, #36]	; (80050e0 <vPortFree+0xb0>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4413      	add	r3, r2
 80050be:	4a08      	ldr	r2, [pc, #32]	; (80050e0 <vPortFree+0xb0>)
 80050c0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80050c2:	6938      	ldr	r0, [r7, #16]
 80050c4:	f000 f86c 	bl	80051a0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80050c8:	4b06      	ldr	r3, [pc, #24]	; (80050e4 <vPortFree+0xb4>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	3301      	adds	r3, #1
 80050ce:	4a05      	ldr	r2, [pc, #20]	; (80050e4 <vPortFree+0xb4>)
 80050d0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80050d2:	f7fe fab7 	bl	8003644 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80050d6:	bf00      	nop
 80050d8:	3718      	adds	r7, #24
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	20012e5c 	.word	0x20012e5c
 80050e4:	20012e68 	.word	0x20012e68

080050e8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80050ee:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80050f2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80050f4:	4b25      	ldr	r3, [pc, #148]	; (800518c <prvHeapInit+0xa4>)
 80050f6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f003 0307 	and.w	r3, r3, #7
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00c      	beq.n	800511c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	3307      	adds	r3, #7
 8005106:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f023 0307 	bic.w	r3, r3, #7
 800510e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8005110:	68ba      	ldr	r2, [r7, #8]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	4a1d      	ldr	r2, [pc, #116]	; (800518c <prvHeapInit+0xa4>)
 8005118:	4413      	add	r3, r2
 800511a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005120:	4a1b      	ldr	r2, [pc, #108]	; (8005190 <prvHeapInit+0xa8>)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005126:	4b1a      	ldr	r3, [pc, #104]	; (8005190 <prvHeapInit+0xa8>)
 8005128:	2200      	movs	r2, #0
 800512a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	68ba      	ldr	r2, [r7, #8]
 8005130:	4413      	add	r3, r2
 8005132:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005134:	2208      	movs	r2, #8
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	1a9b      	subs	r3, r3, r2
 800513a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f023 0307 	bic.w	r3, r3, #7
 8005142:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	4a13      	ldr	r2, [pc, #76]	; (8005194 <prvHeapInit+0xac>)
 8005148:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800514a:	4b12      	ldr	r3, [pc, #72]	; (8005194 <prvHeapInit+0xac>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2200      	movs	r2, #0
 8005150:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005152:	4b10      	ldr	r3, [pc, #64]	; (8005194 <prvHeapInit+0xac>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2200      	movs	r2, #0
 8005158:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	1ad2      	subs	r2, r2, r3
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005168:	4b0a      	ldr	r3, [pc, #40]	; (8005194 <prvHeapInit+0xac>)
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	4a08      	ldr	r2, [pc, #32]	; (8005198 <prvHeapInit+0xb0>)
 8005176:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	4a07      	ldr	r2, [pc, #28]	; (800519c <prvHeapInit+0xb4>)
 800517e:	6013      	str	r3, [r2, #0]
}
 8005180:	bf00      	nop
 8005182:	3714      	adds	r7, #20
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr
 800518c:	20000250 	.word	0x20000250
 8005190:	20012e50 	.word	0x20012e50
 8005194:	20012e58 	.word	0x20012e58
 8005198:	20012e60 	.word	0x20012e60
 800519c:	20012e5c 	.word	0x20012e5c

080051a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80051a8:	4b28      	ldr	r3, [pc, #160]	; (800524c <prvInsertBlockIntoFreeList+0xac>)
 80051aa:	60fb      	str	r3, [r7, #12]
 80051ac:	e002      	b.n	80051b4 <prvInsertBlockIntoFreeList+0x14>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	60fb      	str	r3, [r7, #12]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d8f7      	bhi.n	80051ae <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	68ba      	ldr	r2, [r7, #8]
 80051c8:	4413      	add	r3, r2
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d108      	bne.n	80051e2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	685a      	ldr	r2, [r3, #4]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	441a      	add	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	68ba      	ldr	r2, [r7, #8]
 80051ec:	441a      	add	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d118      	bne.n	8005228 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	4b15      	ldr	r3, [pc, #84]	; (8005250 <prvInsertBlockIntoFreeList+0xb0>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d00d      	beq.n	800521e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685a      	ldr	r2, [r3, #4]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	441a      	add	r2, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	601a      	str	r2, [r3, #0]
 800521c:	e008      	b.n	8005230 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800521e:	4b0c      	ldr	r3, [pc, #48]	; (8005250 <prvInsertBlockIntoFreeList+0xb0>)
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	601a      	str	r2, [r3, #0]
 8005226:	e003      	b.n	8005230 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	429a      	cmp	r2, r3
 8005236:	d002      	beq.n	800523e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800523e:	bf00      	nop
 8005240:	3714      	adds	r7, #20
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	20012e50 	.word	0x20012e50
 8005250:	20012e58 	.word	0x20012e58

08005254 <__libc_init_array>:
 8005254:	b570      	push	{r4, r5, r6, lr}
 8005256:	4d0d      	ldr	r5, [pc, #52]	; (800528c <__libc_init_array+0x38>)
 8005258:	4c0d      	ldr	r4, [pc, #52]	; (8005290 <__libc_init_array+0x3c>)
 800525a:	1b64      	subs	r4, r4, r5
 800525c:	10a4      	asrs	r4, r4, #2
 800525e:	2600      	movs	r6, #0
 8005260:	42a6      	cmp	r6, r4
 8005262:	d109      	bne.n	8005278 <__libc_init_array+0x24>
 8005264:	4d0b      	ldr	r5, [pc, #44]	; (8005294 <__libc_init_array+0x40>)
 8005266:	4c0c      	ldr	r4, [pc, #48]	; (8005298 <__libc_init_array+0x44>)
 8005268:	f000 f82e 	bl	80052c8 <_init>
 800526c:	1b64      	subs	r4, r4, r5
 800526e:	10a4      	asrs	r4, r4, #2
 8005270:	2600      	movs	r6, #0
 8005272:	42a6      	cmp	r6, r4
 8005274:	d105      	bne.n	8005282 <__libc_init_array+0x2e>
 8005276:	bd70      	pop	{r4, r5, r6, pc}
 8005278:	f855 3b04 	ldr.w	r3, [r5], #4
 800527c:	4798      	blx	r3
 800527e:	3601      	adds	r6, #1
 8005280:	e7ee      	b.n	8005260 <__libc_init_array+0xc>
 8005282:	f855 3b04 	ldr.w	r3, [r5], #4
 8005286:	4798      	blx	r3
 8005288:	3601      	adds	r6, #1
 800528a:	e7f2      	b.n	8005272 <__libc_init_array+0x1e>
 800528c:	08005330 	.word	0x08005330
 8005290:	08005330 	.word	0x08005330
 8005294:	08005330 	.word	0x08005330
 8005298:	08005334 	.word	0x08005334

0800529c <memcpy>:
 800529c:	440a      	add	r2, r1
 800529e:	4291      	cmp	r1, r2
 80052a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80052a4:	d100      	bne.n	80052a8 <memcpy+0xc>
 80052a6:	4770      	bx	lr
 80052a8:	b510      	push	{r4, lr}
 80052aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052b2:	4291      	cmp	r1, r2
 80052b4:	d1f9      	bne.n	80052aa <memcpy+0xe>
 80052b6:	bd10      	pop	{r4, pc}

080052b8 <memset>:
 80052b8:	4402      	add	r2, r0
 80052ba:	4603      	mov	r3, r0
 80052bc:	4293      	cmp	r3, r2
 80052be:	d100      	bne.n	80052c2 <memset+0xa>
 80052c0:	4770      	bx	lr
 80052c2:	f803 1b01 	strb.w	r1, [r3], #1
 80052c6:	e7f9      	b.n	80052bc <memset+0x4>

080052c8 <_init>:
 80052c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ca:	bf00      	nop
 80052cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ce:	bc08      	pop	{r3}
 80052d0:	469e      	mov	lr, r3
 80052d2:	4770      	bx	lr

080052d4 <_fini>:
 80052d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052d6:	bf00      	nop
 80052d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052da:	bc08      	pop	{r3}
 80052dc:	469e      	mov	lr, r3
 80052de:	4770      	bx	lr
