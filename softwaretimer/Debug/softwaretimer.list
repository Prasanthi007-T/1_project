
softwaretimer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b3c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001ccc  08001ccc  00011ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ce4  08001ce4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001ce4  08001ce4  00011ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001cec  08001cec  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001cec  08001cec  00011cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001cf0  08001cf0  00011cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001cf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000f4  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000100  20000100  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b344  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019b8  00000000  00000000  0002b380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b68  00000000  00000000  0002cd38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000aa0  00000000  00000000  0002d8a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e1e5  00000000  00000000  0002e340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bd21  00000000  00000000  0004c525  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3d07  00000000  00000000  00058246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011bf4d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002f4c  00000000  00000000  0011bfa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000000c 	.word	0x2000000c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001cb4 	.word	0x08001cb4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000010 	.word	0x20000010
 80001cc:	08001cb4 	.word	0x08001cb4

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 f97a 	bl	80007d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f802 	bl	80004e4 <SystemClock_Config>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e0:	e7fe      	b.n	80004e0 <main+0xc>
	...

080004e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b094      	sub	sp, #80	; 0x50
 80004e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ea:	f107 0320 	add.w	r3, r7, #32
 80004ee:	2230      	movs	r2, #48	; 0x30
 80004f0:	2100      	movs	r1, #0
 80004f2:	4618      	mov	r0, r3
 80004f4:	f001 fbd6 	bl	8001ca4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f8:	f107 030c 	add.w	r3, r7, #12
 80004fc:	2200      	movs	r2, #0
 80004fe:	601a      	str	r2, [r3, #0]
 8000500:	605a      	str	r2, [r3, #4]
 8000502:	609a      	str	r2, [r3, #8]
 8000504:	60da      	str	r2, [r3, #12]
 8000506:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000508:	2300      	movs	r3, #0
 800050a:	60bb      	str	r3, [r7, #8]
 800050c:	4b22      	ldr	r3, [pc, #136]	; (8000598 <SystemClock_Config+0xb4>)
 800050e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000510:	4a21      	ldr	r2, [pc, #132]	; (8000598 <SystemClock_Config+0xb4>)
 8000512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000516:	6413      	str	r3, [r2, #64]	; 0x40
 8000518:	4b1f      	ldr	r3, [pc, #124]	; (8000598 <SystemClock_Config+0xb4>)
 800051a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800051c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000520:	60bb      	str	r3, [r7, #8]
 8000522:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000524:	2300      	movs	r3, #0
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	4b1c      	ldr	r3, [pc, #112]	; (800059c <SystemClock_Config+0xb8>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a1b      	ldr	r2, [pc, #108]	; (800059c <SystemClock_Config+0xb8>)
 800052e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000532:	6013      	str	r3, [r2, #0]
 8000534:	4b19      	ldr	r3, [pc, #100]	; (800059c <SystemClock_Config+0xb8>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800053c:	607b      	str	r3, [r7, #4]
 800053e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000540:	2302      	movs	r3, #2
 8000542:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000544:	2301      	movs	r3, #1
 8000546:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000548:	2310      	movs	r3, #16
 800054a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800054c:	2300      	movs	r3, #0
 800054e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000550:	f107 0320 	add.w	r3, r7, #32
 8000554:	4618      	mov	r0, r3
 8000556:	f000 fa5f 	bl	8000a18 <HAL_RCC_OscConfig>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000560:	f000 f830 	bl	80005c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000564:	230f      	movs	r3, #15
 8000566:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000568:	2300      	movs	r3, #0
 800056a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800056c:	2300      	movs	r3, #0
 800056e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000570:	2300      	movs	r3, #0
 8000572:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000574:	2300      	movs	r3, #0
 8000576:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000578:	f107 030c 	add.w	r3, r7, #12
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f000 fcc2 	bl	8000f08 <HAL_RCC_ClockConfig>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800058a:	f000 f81b 	bl	80005c4 <Error_Handler>
  }
}
 800058e:	bf00      	nop
 8000590:	3750      	adds	r7, #80	; 0x50
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40023800 	.word	0x40023800
 800059c:	40007000 	.word	0x40007000

080005a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a04      	ldr	r2, [pc, #16]	; (80005c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d101      	bne.n	80005b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005b2:	f000 f92f 	bl	8000814 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40001000 	.word	0x40001000

080005c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c8:	b672      	cpsid	i
}
 80005ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005cc:	e7fe      	b.n	80005cc <Error_Handler+0x8>
	...

080005d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	4b10      	ldr	r3, [pc, #64]	; (800061c <HAL_MspInit+0x4c>)
 80005dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005de:	4a0f      	ldr	r2, [pc, #60]	; (800061c <HAL_MspInit+0x4c>)
 80005e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005e4:	6453      	str	r3, [r2, #68]	; 0x44
 80005e6:	4b0d      	ldr	r3, [pc, #52]	; (800061c <HAL_MspInit+0x4c>)
 80005e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	603b      	str	r3, [r7, #0]
 80005f6:	4b09      	ldr	r3, [pc, #36]	; (800061c <HAL_MspInit+0x4c>)
 80005f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fa:	4a08      	ldr	r2, [pc, #32]	; (800061c <HAL_MspInit+0x4c>)
 80005fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000600:	6413      	str	r3, [r2, #64]	; 0x40
 8000602:	4b06      	ldr	r3, [pc, #24]	; (800061c <HAL_MspInit+0x4c>)
 8000604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800060a:	603b      	str	r3, [r7, #0]
 800060c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800060e:	bf00      	nop
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	40023800 	.word	0x40023800

08000620 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b08e      	sub	sp, #56	; 0x38
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000628:	2300      	movs	r3, #0
 800062a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800062c:	2300      	movs	r3, #0
 800062e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000630:	2300      	movs	r3, #0
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	4b33      	ldr	r3, [pc, #204]	; (8000704 <HAL_InitTick+0xe4>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000638:	4a32      	ldr	r2, [pc, #200]	; (8000704 <HAL_InitTick+0xe4>)
 800063a:	f043 0310 	orr.w	r3, r3, #16
 800063e:	6413      	str	r3, [r2, #64]	; 0x40
 8000640:	4b30      	ldr	r3, [pc, #192]	; (8000704 <HAL_InitTick+0xe4>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	f003 0310 	and.w	r3, r3, #16
 8000648:	60fb      	str	r3, [r7, #12]
 800064a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800064c:	f107 0210 	add.w	r2, r7, #16
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	4611      	mov	r1, r2
 8000656:	4618      	mov	r0, r3
 8000658:	f000 fe22 	bl	80012a0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800065c:	6a3b      	ldr	r3, [r7, #32]
 800065e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000662:	2b00      	cmp	r3, #0
 8000664:	d103      	bne.n	800066e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000666:	f000 fe07 	bl	8001278 <HAL_RCC_GetPCLK1Freq>
 800066a:	6378      	str	r0, [r7, #52]	; 0x34
 800066c:	e004      	b.n	8000678 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800066e:	f000 fe03 	bl	8001278 <HAL_RCC_GetPCLK1Freq>
 8000672:	4603      	mov	r3, r0
 8000674:	005b      	lsls	r3, r3, #1
 8000676:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800067a:	4a23      	ldr	r2, [pc, #140]	; (8000708 <HAL_InitTick+0xe8>)
 800067c:	fba2 2303 	umull	r2, r3, r2, r3
 8000680:	0c9b      	lsrs	r3, r3, #18
 8000682:	3b01      	subs	r3, #1
 8000684:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000686:	4b21      	ldr	r3, [pc, #132]	; (800070c <HAL_InitTick+0xec>)
 8000688:	4a21      	ldr	r2, [pc, #132]	; (8000710 <HAL_InitTick+0xf0>)
 800068a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800068c:	4b1f      	ldr	r3, [pc, #124]	; (800070c <HAL_InitTick+0xec>)
 800068e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000692:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000694:	4a1d      	ldr	r2, [pc, #116]	; (800070c <HAL_InitTick+0xec>)
 8000696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000698:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800069a:	4b1c      	ldr	r3, [pc, #112]	; (800070c <HAL_InitTick+0xec>)
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a0:	4b1a      	ldr	r3, [pc, #104]	; (800070c <HAL_InitTick+0xec>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006a6:	4b19      	ldr	r3, [pc, #100]	; (800070c <HAL_InitTick+0xec>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80006ac:	4817      	ldr	r0, [pc, #92]	; (800070c <HAL_InitTick+0xec>)
 80006ae:	f000 fe29 	bl	8001304 <HAL_TIM_Base_Init>
 80006b2:	4603      	mov	r3, r0
 80006b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80006b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d11b      	bne.n	80006f8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80006c0:	4812      	ldr	r0, [pc, #72]	; (800070c <HAL_InitTick+0xec>)
 80006c2:	f000 fe79 	bl	80013b8 <HAL_TIM_Base_Start_IT>
 80006c6:	4603      	mov	r3, r0
 80006c8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80006cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d111      	bne.n	80006f8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80006d4:	2036      	movs	r0, #54	; 0x36
 80006d6:	f000 f991 	bl	80009fc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	2b0f      	cmp	r3, #15
 80006de:	d808      	bhi.n	80006f2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80006e0:	2200      	movs	r2, #0
 80006e2:	6879      	ldr	r1, [r7, #4]
 80006e4:	2036      	movs	r0, #54	; 0x36
 80006e6:	f000 f96d 	bl	80009c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006ea:	4a0a      	ldr	r2, [pc, #40]	; (8000714 <HAL_InitTick+0xf4>)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	6013      	str	r3, [r2, #0]
 80006f0:	e002      	b.n	80006f8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80006f2:	2301      	movs	r3, #1
 80006f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80006f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	3738      	adds	r7, #56	; 0x38
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40023800 	.word	0x40023800
 8000708:	431bde83 	.word	0x431bde83
 800070c:	20000028 	.word	0x20000028
 8000710:	40001000 	.word	0x40001000
 8000714:	20000004 	.word	0x20000004

08000718 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800071c:	e7fe      	b.n	800071c <NMI_Handler+0x4>

0800071e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000722:	e7fe      	b.n	8000722 <HardFault_Handler+0x4>

08000724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000728:	e7fe      	b.n	8000728 <MemManage_Handler+0x4>

0800072a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800072e:	e7fe      	b.n	800072e <BusFault_Handler+0x4>

08000730 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000734:	e7fe      	b.n	8000734 <UsageFault_Handler+0x4>

08000736 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr

08000744 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000748:	4802      	ldr	r0, [pc, #8]	; (8000754 <TIM6_DAC_IRQHandler+0x10>)
 800074a:	f000 fea5 	bl	8001498 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000028 	.word	0x20000028

08000758 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800075c:	4b06      	ldr	r3, [pc, #24]	; (8000778 <SystemInit+0x20>)
 800075e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000762:	4a05      	ldr	r2, [pc, #20]	; (8000778 <SystemInit+0x20>)
 8000764:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000768:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	e000ed00 	.word	0xe000ed00

0800077c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800077c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000780:	480d      	ldr	r0, [pc, #52]	; (80007b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000782:	490e      	ldr	r1, [pc, #56]	; (80007bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000784:	4a0e      	ldr	r2, [pc, #56]	; (80007c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000786:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000788:	e002      	b.n	8000790 <LoopCopyDataInit>

0800078a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800078a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800078c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800078e:	3304      	adds	r3, #4

08000790 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000790:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000792:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000794:	d3f9      	bcc.n	800078a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000796:	4a0b      	ldr	r2, [pc, #44]	; (80007c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000798:	4c0b      	ldr	r4, [pc, #44]	; (80007c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800079a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800079c:	e001      	b.n	80007a2 <LoopFillZerobss>

0800079e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800079e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007a0:	3204      	adds	r2, #4

080007a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007a4:	d3fb      	bcc.n	800079e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80007a6:	f7ff ffd7 	bl	8000758 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007aa:	f001 fa57 	bl	8001c5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007ae:	f7ff fe91 	bl	80004d4 <main>
  bx  lr    
 80007b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80007b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007c0:	08001cf4 	.word	0x08001cf4
  ldr r2, =_sbss
 80007c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007c8:	20000100 	.word	0x20000100

080007cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007cc:	e7fe      	b.n	80007cc <ADC_IRQHandler>
	...

080007d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007d4:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <HAL_Init+0x40>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a0d      	ldr	r2, [pc, #52]	; (8000810 <HAL_Init+0x40>)
 80007da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80007e0:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <HAL_Init+0x40>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a0a      	ldr	r2, [pc, #40]	; (8000810 <HAL_Init+0x40>)
 80007e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007ec:	4b08      	ldr	r3, [pc, #32]	; (8000810 <HAL_Init+0x40>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a07      	ldr	r2, [pc, #28]	; (8000810 <HAL_Init+0x40>)
 80007f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007f8:	2003      	movs	r0, #3
 80007fa:	f000 f8d8 	bl	80009ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007fe:	200f      	movs	r0, #15
 8000800:	f7ff ff0e 	bl	8000620 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000804:	f7ff fee4 	bl	80005d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000808:	2300      	movs	r3, #0
}
 800080a:	4618      	mov	r0, r3
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40023c00 	.word	0x40023c00

08000814 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000818:	4b06      	ldr	r3, [pc, #24]	; (8000834 <HAL_IncTick+0x20>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	461a      	mov	r2, r3
 800081e:	4b06      	ldr	r3, [pc, #24]	; (8000838 <HAL_IncTick+0x24>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4413      	add	r3, r2
 8000824:	4a04      	ldr	r2, [pc, #16]	; (8000838 <HAL_IncTick+0x24>)
 8000826:	6013      	str	r3, [r2, #0]
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	20000008 	.word	0x20000008
 8000838:	20000070 	.word	0x20000070

0800083c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  return uwTick;
 8000840:	4b03      	ldr	r3, [pc, #12]	; (8000850 <HAL_GetTick+0x14>)
 8000842:	681b      	ldr	r3, [r3, #0]
}
 8000844:	4618      	mov	r0, r3
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	20000070 	.word	0x20000070

08000854 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000854:	b480      	push	{r7}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	f003 0307 	and.w	r3, r3, #7
 8000862:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000864:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <__NVIC_SetPriorityGrouping+0x44>)
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800086a:	68ba      	ldr	r2, [r7, #8]
 800086c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000870:	4013      	ands	r3, r2
 8000872:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800087c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000884:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000886:	4a04      	ldr	r2, [pc, #16]	; (8000898 <__NVIC_SetPriorityGrouping+0x44>)
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	60d3      	str	r3, [r2, #12]
}
 800088c:	bf00      	nop
 800088e:	3714      	adds	r7, #20
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008a0:	4b04      	ldr	r3, [pc, #16]	; (80008b4 <__NVIC_GetPriorityGrouping+0x18>)
 80008a2:	68db      	ldr	r3, [r3, #12]
 80008a4:	0a1b      	lsrs	r3, r3, #8
 80008a6:	f003 0307 	and.w	r3, r3, #7
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	e000ed00 	.word	0xe000ed00

080008b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	db0b      	blt.n	80008e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	f003 021f 	and.w	r2, r3, #31
 80008d0:	4907      	ldr	r1, [pc, #28]	; (80008f0 <__NVIC_EnableIRQ+0x38>)
 80008d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d6:	095b      	lsrs	r3, r3, #5
 80008d8:	2001      	movs	r0, #1
 80008da:	fa00 f202 	lsl.w	r2, r0, r2
 80008de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008e2:	bf00      	nop
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	e000e100 	.word	0xe000e100

080008f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	6039      	str	r1, [r7, #0]
 80008fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000904:	2b00      	cmp	r3, #0
 8000906:	db0a      	blt.n	800091e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	b2da      	uxtb	r2, r3
 800090c:	490c      	ldr	r1, [pc, #48]	; (8000940 <__NVIC_SetPriority+0x4c>)
 800090e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000912:	0112      	lsls	r2, r2, #4
 8000914:	b2d2      	uxtb	r2, r2
 8000916:	440b      	add	r3, r1
 8000918:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800091c:	e00a      	b.n	8000934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	b2da      	uxtb	r2, r3
 8000922:	4908      	ldr	r1, [pc, #32]	; (8000944 <__NVIC_SetPriority+0x50>)
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	f003 030f 	and.w	r3, r3, #15
 800092a:	3b04      	subs	r3, #4
 800092c:	0112      	lsls	r2, r2, #4
 800092e:	b2d2      	uxtb	r2, r2
 8000930:	440b      	add	r3, r1
 8000932:	761a      	strb	r2, [r3, #24]
}
 8000934:	bf00      	nop
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	e000e100 	.word	0xe000e100
 8000944:	e000ed00 	.word	0xe000ed00

08000948 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000948:	b480      	push	{r7}
 800094a:	b089      	sub	sp, #36	; 0x24
 800094c:	af00      	add	r7, sp, #0
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	60b9      	str	r1, [r7, #8]
 8000952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	f003 0307 	and.w	r3, r3, #7
 800095a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800095c:	69fb      	ldr	r3, [r7, #28]
 800095e:	f1c3 0307 	rsb	r3, r3, #7
 8000962:	2b04      	cmp	r3, #4
 8000964:	bf28      	it	cs
 8000966:	2304      	movcs	r3, #4
 8000968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	3304      	adds	r3, #4
 800096e:	2b06      	cmp	r3, #6
 8000970:	d902      	bls.n	8000978 <NVIC_EncodePriority+0x30>
 8000972:	69fb      	ldr	r3, [r7, #28]
 8000974:	3b03      	subs	r3, #3
 8000976:	e000      	b.n	800097a <NVIC_EncodePriority+0x32>
 8000978:	2300      	movs	r3, #0
 800097a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800097c:	f04f 32ff 	mov.w	r2, #4294967295
 8000980:	69bb      	ldr	r3, [r7, #24]
 8000982:	fa02 f303 	lsl.w	r3, r2, r3
 8000986:	43da      	mvns	r2, r3
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	401a      	ands	r2, r3
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000990:	f04f 31ff 	mov.w	r1, #4294967295
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	fa01 f303 	lsl.w	r3, r1, r3
 800099a:	43d9      	mvns	r1, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a0:	4313      	orrs	r3, r2
         );
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3724      	adds	r7, #36	; 0x24
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr

080009ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b082      	sub	sp, #8
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f7ff ff4c 	bl	8000854 <__NVIC_SetPriorityGrouping>
}
 80009bc:	bf00      	nop
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	60b9      	str	r1, [r7, #8]
 80009ce:	607a      	str	r2, [r7, #4]
 80009d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009d2:	2300      	movs	r3, #0
 80009d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009d6:	f7ff ff61 	bl	800089c <__NVIC_GetPriorityGrouping>
 80009da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009dc:	687a      	ldr	r2, [r7, #4]
 80009de:	68b9      	ldr	r1, [r7, #8]
 80009e0:	6978      	ldr	r0, [r7, #20]
 80009e2:	f7ff ffb1 	bl	8000948 <NVIC_EncodePriority>
 80009e6:	4602      	mov	r2, r0
 80009e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ec:	4611      	mov	r1, r2
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff ff80 	bl	80008f4 <__NVIC_SetPriority>
}
 80009f4:	bf00      	nop
 80009f6:	3718      	adds	r7, #24
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff ff54 	bl	80008b8 <__NVIC_EnableIRQ>
}
 8000a10:	bf00      	nop
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d101      	bne.n	8000a2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000a26:	2301      	movs	r3, #1
 8000a28:	e267      	b.n	8000efa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d075      	beq.n	8000b22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000a36:	4b88      	ldr	r3, [pc, #544]	; (8000c58 <HAL_RCC_OscConfig+0x240>)
 8000a38:	689b      	ldr	r3, [r3, #8]
 8000a3a:	f003 030c 	and.w	r3, r3, #12
 8000a3e:	2b04      	cmp	r3, #4
 8000a40:	d00c      	beq.n	8000a5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000a42:	4b85      	ldr	r3, [pc, #532]	; (8000c58 <HAL_RCC_OscConfig+0x240>)
 8000a44:	689b      	ldr	r3, [r3, #8]
 8000a46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000a4a:	2b08      	cmp	r3, #8
 8000a4c:	d112      	bne.n	8000a74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000a4e:	4b82      	ldr	r3, [pc, #520]	; (8000c58 <HAL_RCC_OscConfig+0x240>)
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000a5a:	d10b      	bne.n	8000a74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a5c:	4b7e      	ldr	r3, [pc, #504]	; (8000c58 <HAL_RCC_OscConfig+0x240>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d05b      	beq.n	8000b20 <HAL_RCC_OscConfig+0x108>
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d157      	bne.n	8000b20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000a70:	2301      	movs	r3, #1
 8000a72:	e242      	b.n	8000efa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a7c:	d106      	bne.n	8000a8c <HAL_RCC_OscConfig+0x74>
 8000a7e:	4b76      	ldr	r3, [pc, #472]	; (8000c58 <HAL_RCC_OscConfig+0x240>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a75      	ldr	r2, [pc, #468]	; (8000c58 <HAL_RCC_OscConfig+0x240>)
 8000a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a88:	6013      	str	r3, [r2, #0]
 8000a8a:	e01d      	b.n	8000ac8 <HAL_RCC_OscConfig+0xb0>
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000a94:	d10c      	bne.n	8000ab0 <HAL_RCC_OscConfig+0x98>
 8000a96:	4b70      	ldr	r3, [pc, #448]	; (8000c58 <HAL_RCC_OscConfig+0x240>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a6f      	ldr	r2, [pc, #444]	; (8000c58 <HAL_RCC_OscConfig+0x240>)
 8000a9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000aa0:	6013      	str	r3, [r2, #0]
 8000aa2:	4b6d      	ldr	r3, [pc, #436]	; (8000c58 <HAL_RCC_OscConfig+0x240>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a6c      	ldr	r2, [pc, #432]	; (8000c58 <HAL_RCC_OscConfig+0x240>)
 8000aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000aac:	6013      	str	r3, [r2, #0]
 8000aae:	e00b      	b.n	8000ac8 <HAL_RCC_OscConfig+0xb0>
 8000ab0:	4b69      	ldr	r3, [pc, #420]	; (8000c58 <HAL_RCC_OscConfig+0x240>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a68      	ldr	r2, [pc, #416]	; (8000c58 <HAL_RCC_OscConfig+0x240>)
 8000ab6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000aba:	6013      	str	r3, [r2, #0]
 8000abc:	4b66      	ldr	r3, [pc, #408]	; (8000c58 <HAL_RCC_OscConfig+0x240>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a65      	ldr	r2, [pc, #404]	; (8000c58 <HAL_RCC_OscConfig+0x240>)
 8000ac2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ac6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d013      	beq.n	8000af8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ad0:	f7ff feb4 	bl	800083c <HAL_GetTick>
 8000ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ad6:	e008      	b.n	8000aea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ad8:	f7ff feb0 	bl	800083c <HAL_GetTick>
 8000adc:	4602      	mov	r2, r0
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	1ad3      	subs	r3, r2, r3
 8000ae2:	2b64      	cmp	r3, #100	; 0x64
 8000ae4:	d901      	bls.n	8000aea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	e207      	b.n	8000efa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000aea:	4b5b      	ldr	r3, [pc, #364]	; (8000c58 <HAL_RCC_OscConfig+0x240>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d0f0      	beq.n	8000ad8 <HAL_RCC_OscConfig+0xc0>
 8000af6:	e014      	b.n	8000b22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000af8:	f7ff fea0 	bl	800083c <HAL_GetTick>
 8000afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000afe:	e008      	b.n	8000b12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b00:	f7ff fe9c 	bl	800083c <HAL_GetTick>
 8000b04:	4602      	mov	r2, r0
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	2b64      	cmp	r3, #100	; 0x64
 8000b0c:	d901      	bls.n	8000b12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	e1f3      	b.n	8000efa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b12:	4b51      	ldr	r3, [pc, #324]	; (8000c58 <HAL_RCC_OscConfig+0x240>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d1f0      	bne.n	8000b00 <HAL_RCC_OscConfig+0xe8>
 8000b1e:	e000      	b.n	8000b22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f003 0302 	and.w	r3, r3, #2
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d063      	beq.n	8000bf6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000b2e:	4b4a      	ldr	r3, [pc, #296]	; (8000c58 <HAL_RCC_OscConfig+0x240>)
 8000b30:	689b      	ldr	r3, [r3, #8]
 8000b32:	f003 030c 	and.w	r3, r3, #12
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d00b      	beq.n	8000b52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000b3a:	4b47      	ldr	r3, [pc, #284]	; (8000c58 <HAL_RCC_OscConfig+0x240>)
 8000b3c:	689b      	ldr	r3, [r3, #8]
 8000b3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000b42:	2b08      	cmp	r3, #8
 8000b44:	d11c      	bne.n	8000b80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000b46:	4b44      	ldr	r3, [pc, #272]	; (8000c58 <HAL_RCC_OscConfig+0x240>)
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d116      	bne.n	8000b80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b52:	4b41      	ldr	r3, [pc, #260]	; (8000c58 <HAL_RCC_OscConfig+0x240>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f003 0302 	and.w	r3, r3, #2
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d005      	beq.n	8000b6a <HAL_RCC_OscConfig+0x152>
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	68db      	ldr	r3, [r3, #12]
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d001      	beq.n	8000b6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
 8000b68:	e1c7      	b.n	8000efa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b6a:	4b3b      	ldr	r3, [pc, #236]	; (8000c58 <HAL_RCC_OscConfig+0x240>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	691b      	ldr	r3, [r3, #16]
 8000b76:	00db      	lsls	r3, r3, #3
 8000b78:	4937      	ldr	r1, [pc, #220]	; (8000c58 <HAL_RCC_OscConfig+0x240>)
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b7e:	e03a      	b.n	8000bf6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d020      	beq.n	8000bca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000b88:	4b34      	ldr	r3, [pc, #208]	; (8000c5c <HAL_RCC_OscConfig+0x244>)
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b8e:	f7ff fe55 	bl	800083c <HAL_GetTick>
 8000b92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b94:	e008      	b.n	8000ba8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b96:	f7ff fe51 	bl	800083c <HAL_GetTick>
 8000b9a:	4602      	mov	r2, r0
 8000b9c:	693b      	ldr	r3, [r7, #16]
 8000b9e:	1ad3      	subs	r3, r2, r3
 8000ba0:	2b02      	cmp	r3, #2
 8000ba2:	d901      	bls.n	8000ba8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000ba4:	2303      	movs	r3, #3
 8000ba6:	e1a8      	b.n	8000efa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ba8:	4b2b      	ldr	r3, [pc, #172]	; (8000c58 <HAL_RCC_OscConfig+0x240>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f003 0302 	and.w	r3, r3, #2
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d0f0      	beq.n	8000b96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bb4:	4b28      	ldr	r3, [pc, #160]	; (8000c58 <HAL_RCC_OscConfig+0x240>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	691b      	ldr	r3, [r3, #16]
 8000bc0:	00db      	lsls	r3, r3, #3
 8000bc2:	4925      	ldr	r1, [pc, #148]	; (8000c58 <HAL_RCC_OscConfig+0x240>)
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	600b      	str	r3, [r1, #0]
 8000bc8:	e015      	b.n	8000bf6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000bca:	4b24      	ldr	r3, [pc, #144]	; (8000c5c <HAL_RCC_OscConfig+0x244>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000bd0:	f7ff fe34 	bl	800083c <HAL_GetTick>
 8000bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bd6:	e008      	b.n	8000bea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bd8:	f7ff fe30 	bl	800083c <HAL_GetTick>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	2b02      	cmp	r3, #2
 8000be4:	d901      	bls.n	8000bea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000be6:	2303      	movs	r3, #3
 8000be8:	e187      	b.n	8000efa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bea:	4b1b      	ldr	r3, [pc, #108]	; (8000c58 <HAL_RCC_OscConfig+0x240>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f003 0302 	and.w	r3, r3, #2
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d1f0      	bne.n	8000bd8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f003 0308 	and.w	r3, r3, #8
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d036      	beq.n	8000c70 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	695b      	ldr	r3, [r3, #20]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d016      	beq.n	8000c38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <HAL_RCC_OscConfig+0x248>)
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000c10:	f7ff fe14 	bl	800083c <HAL_GetTick>
 8000c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c16:	e008      	b.n	8000c2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c18:	f7ff fe10 	bl	800083c <HAL_GetTick>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	2b02      	cmp	r3, #2
 8000c24:	d901      	bls.n	8000c2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000c26:	2303      	movs	r3, #3
 8000c28:	e167      	b.n	8000efa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c2a:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <HAL_RCC_OscConfig+0x240>)
 8000c2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c2e:	f003 0302 	and.w	r3, r3, #2
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d0f0      	beq.n	8000c18 <HAL_RCC_OscConfig+0x200>
 8000c36:	e01b      	b.n	8000c70 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000c38:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <HAL_RCC_OscConfig+0x248>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c3e:	f7ff fdfd 	bl	800083c <HAL_GetTick>
 8000c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c44:	e00e      	b.n	8000c64 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c46:	f7ff fdf9 	bl	800083c <HAL_GetTick>
 8000c4a:	4602      	mov	r2, r0
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	1ad3      	subs	r3, r2, r3
 8000c50:	2b02      	cmp	r3, #2
 8000c52:	d907      	bls.n	8000c64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000c54:	2303      	movs	r3, #3
 8000c56:	e150      	b.n	8000efa <HAL_RCC_OscConfig+0x4e2>
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	42470000 	.word	0x42470000
 8000c60:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c64:	4b88      	ldr	r3, [pc, #544]	; (8000e88 <HAL_RCC_OscConfig+0x470>)
 8000c66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c68:	f003 0302 	and.w	r3, r3, #2
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d1ea      	bne.n	8000c46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f003 0304 	and.w	r3, r3, #4
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	f000 8097 	beq.w	8000dac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c82:	4b81      	ldr	r3, [pc, #516]	; (8000e88 <HAL_RCC_OscConfig+0x470>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d10f      	bne.n	8000cae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60bb      	str	r3, [r7, #8]
 8000c92:	4b7d      	ldr	r3, [pc, #500]	; (8000e88 <HAL_RCC_OscConfig+0x470>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c96:	4a7c      	ldr	r2, [pc, #496]	; (8000e88 <HAL_RCC_OscConfig+0x470>)
 8000c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c9e:	4b7a      	ldr	r3, [pc, #488]	; (8000e88 <HAL_RCC_OscConfig+0x470>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca6:	60bb      	str	r3, [r7, #8]
 8000ca8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000caa:	2301      	movs	r3, #1
 8000cac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cae:	4b77      	ldr	r3, [pc, #476]	; (8000e8c <HAL_RCC_OscConfig+0x474>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d118      	bne.n	8000cec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000cba:	4b74      	ldr	r3, [pc, #464]	; (8000e8c <HAL_RCC_OscConfig+0x474>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a73      	ldr	r2, [pc, #460]	; (8000e8c <HAL_RCC_OscConfig+0x474>)
 8000cc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000cc6:	f7ff fdb9 	bl	800083c <HAL_GetTick>
 8000cca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ccc:	e008      	b.n	8000ce0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cce:	f7ff fdb5 	bl	800083c <HAL_GetTick>
 8000cd2:	4602      	mov	r2, r0
 8000cd4:	693b      	ldr	r3, [r7, #16]
 8000cd6:	1ad3      	subs	r3, r2, r3
 8000cd8:	2b02      	cmp	r3, #2
 8000cda:	d901      	bls.n	8000ce0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000cdc:	2303      	movs	r3, #3
 8000cde:	e10c      	b.n	8000efa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ce0:	4b6a      	ldr	r3, [pc, #424]	; (8000e8c <HAL_RCC_OscConfig+0x474>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d0f0      	beq.n	8000cce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d106      	bne.n	8000d02 <HAL_RCC_OscConfig+0x2ea>
 8000cf4:	4b64      	ldr	r3, [pc, #400]	; (8000e88 <HAL_RCC_OscConfig+0x470>)
 8000cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000cf8:	4a63      	ldr	r2, [pc, #396]	; (8000e88 <HAL_RCC_OscConfig+0x470>)
 8000cfa:	f043 0301 	orr.w	r3, r3, #1
 8000cfe:	6713      	str	r3, [r2, #112]	; 0x70
 8000d00:	e01c      	b.n	8000d3c <HAL_RCC_OscConfig+0x324>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	2b05      	cmp	r3, #5
 8000d08:	d10c      	bne.n	8000d24 <HAL_RCC_OscConfig+0x30c>
 8000d0a:	4b5f      	ldr	r3, [pc, #380]	; (8000e88 <HAL_RCC_OscConfig+0x470>)
 8000d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d0e:	4a5e      	ldr	r2, [pc, #376]	; (8000e88 <HAL_RCC_OscConfig+0x470>)
 8000d10:	f043 0304 	orr.w	r3, r3, #4
 8000d14:	6713      	str	r3, [r2, #112]	; 0x70
 8000d16:	4b5c      	ldr	r3, [pc, #368]	; (8000e88 <HAL_RCC_OscConfig+0x470>)
 8000d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d1a:	4a5b      	ldr	r2, [pc, #364]	; (8000e88 <HAL_RCC_OscConfig+0x470>)
 8000d1c:	f043 0301 	orr.w	r3, r3, #1
 8000d20:	6713      	str	r3, [r2, #112]	; 0x70
 8000d22:	e00b      	b.n	8000d3c <HAL_RCC_OscConfig+0x324>
 8000d24:	4b58      	ldr	r3, [pc, #352]	; (8000e88 <HAL_RCC_OscConfig+0x470>)
 8000d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d28:	4a57      	ldr	r2, [pc, #348]	; (8000e88 <HAL_RCC_OscConfig+0x470>)
 8000d2a:	f023 0301 	bic.w	r3, r3, #1
 8000d2e:	6713      	str	r3, [r2, #112]	; 0x70
 8000d30:	4b55      	ldr	r3, [pc, #340]	; (8000e88 <HAL_RCC_OscConfig+0x470>)
 8000d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d34:	4a54      	ldr	r2, [pc, #336]	; (8000e88 <HAL_RCC_OscConfig+0x470>)
 8000d36:	f023 0304 	bic.w	r3, r3, #4
 8000d3a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d015      	beq.n	8000d70 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d44:	f7ff fd7a 	bl	800083c <HAL_GetTick>
 8000d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d4a:	e00a      	b.n	8000d62 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d4c:	f7ff fd76 	bl	800083c <HAL_GetTick>
 8000d50:	4602      	mov	r2, r0
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d901      	bls.n	8000d62 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	e0cb      	b.n	8000efa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d62:	4b49      	ldr	r3, [pc, #292]	; (8000e88 <HAL_RCC_OscConfig+0x470>)
 8000d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d66:	f003 0302 	and.w	r3, r3, #2
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d0ee      	beq.n	8000d4c <HAL_RCC_OscConfig+0x334>
 8000d6e:	e014      	b.n	8000d9a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d70:	f7ff fd64 	bl	800083c <HAL_GetTick>
 8000d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d76:	e00a      	b.n	8000d8e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d78:	f7ff fd60 	bl	800083c <HAL_GetTick>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d901      	bls.n	8000d8e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	e0b5      	b.n	8000efa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d8e:	4b3e      	ldr	r3, [pc, #248]	; (8000e88 <HAL_RCC_OscConfig+0x470>)
 8000d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d92:	f003 0302 	and.w	r3, r3, #2
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d1ee      	bne.n	8000d78 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000d9a:	7dfb      	ldrb	r3, [r7, #23]
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d105      	bne.n	8000dac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000da0:	4b39      	ldr	r3, [pc, #228]	; (8000e88 <HAL_RCC_OscConfig+0x470>)
 8000da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da4:	4a38      	ldr	r2, [pc, #224]	; (8000e88 <HAL_RCC_OscConfig+0x470>)
 8000da6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000daa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	f000 80a1 	beq.w	8000ef8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000db6:	4b34      	ldr	r3, [pc, #208]	; (8000e88 <HAL_RCC_OscConfig+0x470>)
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	f003 030c 	and.w	r3, r3, #12
 8000dbe:	2b08      	cmp	r3, #8
 8000dc0:	d05c      	beq.n	8000e7c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	699b      	ldr	r3, [r3, #24]
 8000dc6:	2b02      	cmp	r3, #2
 8000dc8:	d141      	bne.n	8000e4e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000dca:	4b31      	ldr	r3, [pc, #196]	; (8000e90 <HAL_RCC_OscConfig+0x478>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dd0:	f7ff fd34 	bl	800083c <HAL_GetTick>
 8000dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000dd6:	e008      	b.n	8000dea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000dd8:	f7ff fd30 	bl	800083c <HAL_GetTick>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	d901      	bls.n	8000dea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8000de6:	2303      	movs	r3, #3
 8000de8:	e087      	b.n	8000efa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000dea:	4b27      	ldr	r3, [pc, #156]	; (8000e88 <HAL_RCC_OscConfig+0x470>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d1f0      	bne.n	8000dd8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	69da      	ldr	r2, [r3, #28]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6a1b      	ldr	r3, [r3, #32]
 8000dfe:	431a      	orrs	r2, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e04:	019b      	lsls	r3, r3, #6
 8000e06:	431a      	orrs	r2, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e0c:	085b      	lsrs	r3, r3, #1
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	041b      	lsls	r3, r3, #16
 8000e12:	431a      	orrs	r2, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e18:	061b      	lsls	r3, r3, #24
 8000e1a:	491b      	ldr	r1, [pc, #108]	; (8000e88 <HAL_RCC_OscConfig+0x470>)
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000e20:	4b1b      	ldr	r3, [pc, #108]	; (8000e90 <HAL_RCC_OscConfig+0x478>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e26:	f7ff fd09 	bl	800083c <HAL_GetTick>
 8000e2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e2c:	e008      	b.n	8000e40 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e2e:	f7ff fd05 	bl	800083c <HAL_GetTick>
 8000e32:	4602      	mov	r2, r0
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	1ad3      	subs	r3, r2, r3
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d901      	bls.n	8000e40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	e05c      	b.n	8000efa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e40:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <HAL_RCC_OscConfig+0x470>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d0f0      	beq.n	8000e2e <HAL_RCC_OscConfig+0x416>
 8000e4c:	e054      	b.n	8000ef8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e4e:	4b10      	ldr	r3, [pc, #64]	; (8000e90 <HAL_RCC_OscConfig+0x478>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e54:	f7ff fcf2 	bl	800083c <HAL_GetTick>
 8000e58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e5a:	e008      	b.n	8000e6e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e5c:	f7ff fcee 	bl	800083c <HAL_GetTick>
 8000e60:	4602      	mov	r2, r0
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d901      	bls.n	8000e6e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	e045      	b.n	8000efa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <HAL_RCC_OscConfig+0x470>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d1f0      	bne.n	8000e5c <HAL_RCC_OscConfig+0x444>
 8000e7a:	e03d      	b.n	8000ef8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d107      	bne.n	8000e94 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8000e84:	2301      	movs	r3, #1
 8000e86:	e038      	b.n	8000efa <HAL_RCC_OscConfig+0x4e2>
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40007000 	.word	0x40007000
 8000e90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8000e94:	4b1b      	ldr	r3, [pc, #108]	; (8000f04 <HAL_RCC_OscConfig+0x4ec>)
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	699b      	ldr	r3, [r3, #24]
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d028      	beq.n	8000ef4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d121      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d11a      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000ebe:	68fa      	ldr	r2, [r7, #12]
 8000ec0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000eca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d111      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eda:	085b      	lsrs	r3, r3, #1
 8000edc:	3b01      	subs	r3, #1
 8000ede:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d107      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d001      	beq.n	8000ef8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e000      	b.n	8000efa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40023800 	.word	0x40023800

08000f08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d101      	bne.n	8000f1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e0cc      	b.n	80010b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f1c:	4b68      	ldr	r3, [pc, #416]	; (80010c0 <HAL_RCC_ClockConfig+0x1b8>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f003 0307 	and.w	r3, r3, #7
 8000f24:	683a      	ldr	r2, [r7, #0]
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d90c      	bls.n	8000f44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f2a:	4b65      	ldr	r3, [pc, #404]	; (80010c0 <HAL_RCC_ClockConfig+0x1b8>)
 8000f2c:	683a      	ldr	r2, [r7, #0]
 8000f2e:	b2d2      	uxtb	r2, r2
 8000f30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f32:	4b63      	ldr	r3, [pc, #396]	; (80010c0 <HAL_RCC_ClockConfig+0x1b8>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	683a      	ldr	r2, [r7, #0]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d001      	beq.n	8000f44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000f40:	2301      	movs	r3, #1
 8000f42:	e0b8      	b.n	80010b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f003 0302 	and.w	r3, r3, #2
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d020      	beq.n	8000f92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f003 0304 	and.w	r3, r3, #4
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d005      	beq.n	8000f68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f5c:	4b59      	ldr	r3, [pc, #356]	; (80010c4 <HAL_RCC_ClockConfig+0x1bc>)
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	4a58      	ldr	r2, [pc, #352]	; (80010c4 <HAL_RCC_ClockConfig+0x1bc>)
 8000f62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000f66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f003 0308 	and.w	r3, r3, #8
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d005      	beq.n	8000f80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f74:	4b53      	ldr	r3, [pc, #332]	; (80010c4 <HAL_RCC_ClockConfig+0x1bc>)
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	4a52      	ldr	r2, [pc, #328]	; (80010c4 <HAL_RCC_ClockConfig+0x1bc>)
 8000f7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000f7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f80:	4b50      	ldr	r3, [pc, #320]	; (80010c4 <HAL_RCC_ClockConfig+0x1bc>)
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	494d      	ldr	r1, [pc, #308]	; (80010c4 <HAL_RCC_ClockConfig+0x1bc>)
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d044      	beq.n	8001028 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d107      	bne.n	8000fb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fa6:	4b47      	ldr	r3, [pc, #284]	; (80010c4 <HAL_RCC_ClockConfig+0x1bc>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d119      	bne.n	8000fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e07f      	b.n	80010b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d003      	beq.n	8000fc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000fc2:	2b03      	cmp	r3, #3
 8000fc4:	d107      	bne.n	8000fd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fc6:	4b3f      	ldr	r3, [pc, #252]	; (80010c4 <HAL_RCC_ClockConfig+0x1bc>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d109      	bne.n	8000fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e06f      	b.n	80010b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fd6:	4b3b      	ldr	r3, [pc, #236]	; (80010c4 <HAL_RCC_ClockConfig+0x1bc>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f003 0302 	and.w	r3, r3, #2
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d101      	bne.n	8000fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e067      	b.n	80010b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000fe6:	4b37      	ldr	r3, [pc, #220]	; (80010c4 <HAL_RCC_ClockConfig+0x1bc>)
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	f023 0203 	bic.w	r2, r3, #3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	4934      	ldr	r1, [pc, #208]	; (80010c4 <HAL_RCC_ClockConfig+0x1bc>)
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000ff8:	f7ff fc20 	bl	800083c <HAL_GetTick>
 8000ffc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ffe:	e00a      	b.n	8001016 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001000:	f7ff fc1c 	bl	800083c <HAL_GetTick>
 8001004:	4602      	mov	r2, r0
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	f241 3288 	movw	r2, #5000	; 0x1388
 800100e:	4293      	cmp	r3, r2
 8001010:	d901      	bls.n	8001016 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001012:	2303      	movs	r3, #3
 8001014:	e04f      	b.n	80010b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001016:	4b2b      	ldr	r3, [pc, #172]	; (80010c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	f003 020c 	and.w	r2, r3, #12
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	429a      	cmp	r2, r3
 8001026:	d1eb      	bne.n	8001000 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001028:	4b25      	ldr	r3, [pc, #148]	; (80010c0 <HAL_RCC_ClockConfig+0x1b8>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f003 0307 	and.w	r3, r3, #7
 8001030:	683a      	ldr	r2, [r7, #0]
 8001032:	429a      	cmp	r2, r3
 8001034:	d20c      	bcs.n	8001050 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001036:	4b22      	ldr	r3, [pc, #136]	; (80010c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001038:	683a      	ldr	r2, [r7, #0]
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800103e:	4b20      	ldr	r3, [pc, #128]	; (80010c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	683a      	ldr	r2, [r7, #0]
 8001048:	429a      	cmp	r2, r3
 800104a:	d001      	beq.n	8001050 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	e032      	b.n	80010b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 0304 	and.w	r3, r3, #4
 8001058:	2b00      	cmp	r3, #0
 800105a:	d008      	beq.n	800106e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800105c:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <HAL_RCC_ClockConfig+0x1bc>)
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	4916      	ldr	r1, [pc, #88]	; (80010c4 <HAL_RCC_ClockConfig+0x1bc>)
 800106a:	4313      	orrs	r3, r2
 800106c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 0308 	and.w	r3, r3, #8
 8001076:	2b00      	cmp	r3, #0
 8001078:	d009      	beq.n	800108e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800107a:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <HAL_RCC_ClockConfig+0x1bc>)
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	691b      	ldr	r3, [r3, #16]
 8001086:	00db      	lsls	r3, r3, #3
 8001088:	490e      	ldr	r1, [pc, #56]	; (80010c4 <HAL_RCC_ClockConfig+0x1bc>)
 800108a:	4313      	orrs	r3, r2
 800108c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800108e:	f000 f821 	bl	80010d4 <HAL_RCC_GetSysClockFreq>
 8001092:	4602      	mov	r2, r0
 8001094:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	091b      	lsrs	r3, r3, #4
 800109a:	f003 030f 	and.w	r3, r3, #15
 800109e:	490a      	ldr	r1, [pc, #40]	; (80010c8 <HAL_RCC_ClockConfig+0x1c0>)
 80010a0:	5ccb      	ldrb	r3, [r1, r3]
 80010a2:	fa22 f303 	lsr.w	r3, r2, r3
 80010a6:	4a09      	ldr	r2, [pc, #36]	; (80010cc <HAL_RCC_ClockConfig+0x1c4>)
 80010a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80010aa:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <HAL_RCC_ClockConfig+0x1c8>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff fab6 	bl	8000620 <HAL_InitTick>

  return HAL_OK;
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40023c00 	.word	0x40023c00
 80010c4:	40023800 	.word	0x40023800
 80010c8:	08001ccc 	.word	0x08001ccc
 80010cc:	20000000 	.word	0x20000000
 80010d0:	20000004 	.word	0x20000004

080010d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80010d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80010d8:	b090      	sub	sp, #64	; 0x40
 80010da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80010dc:	2300      	movs	r3, #0
 80010de:	637b      	str	r3, [r7, #52]	; 0x34
 80010e0:	2300      	movs	r3, #0
 80010e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80010e4:	2300      	movs	r3, #0
 80010e6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80010e8:	2300      	movs	r3, #0
 80010ea:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80010ec:	4b59      	ldr	r3, [pc, #356]	; (8001254 <HAL_RCC_GetSysClockFreq+0x180>)
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	f003 030c 	and.w	r3, r3, #12
 80010f4:	2b08      	cmp	r3, #8
 80010f6:	d00d      	beq.n	8001114 <HAL_RCC_GetSysClockFreq+0x40>
 80010f8:	2b08      	cmp	r3, #8
 80010fa:	f200 80a1 	bhi.w	8001240 <HAL_RCC_GetSysClockFreq+0x16c>
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d002      	beq.n	8001108 <HAL_RCC_GetSysClockFreq+0x34>
 8001102:	2b04      	cmp	r3, #4
 8001104:	d003      	beq.n	800110e <HAL_RCC_GetSysClockFreq+0x3a>
 8001106:	e09b      	b.n	8001240 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001108:	4b53      	ldr	r3, [pc, #332]	; (8001258 <HAL_RCC_GetSysClockFreq+0x184>)
 800110a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800110c:	e09b      	b.n	8001246 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800110e:	4b53      	ldr	r3, [pc, #332]	; (800125c <HAL_RCC_GetSysClockFreq+0x188>)
 8001110:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001112:	e098      	b.n	8001246 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001114:	4b4f      	ldr	r3, [pc, #316]	; (8001254 <HAL_RCC_GetSysClockFreq+0x180>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800111c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800111e:	4b4d      	ldr	r3, [pc, #308]	; (8001254 <HAL_RCC_GetSysClockFreq+0x180>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d028      	beq.n	800117c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800112a:	4b4a      	ldr	r3, [pc, #296]	; (8001254 <HAL_RCC_GetSysClockFreq+0x180>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	099b      	lsrs	r3, r3, #6
 8001130:	2200      	movs	r2, #0
 8001132:	623b      	str	r3, [r7, #32]
 8001134:	627a      	str	r2, [r7, #36]	; 0x24
 8001136:	6a3b      	ldr	r3, [r7, #32]
 8001138:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800113c:	2100      	movs	r1, #0
 800113e:	4b47      	ldr	r3, [pc, #284]	; (800125c <HAL_RCC_GetSysClockFreq+0x188>)
 8001140:	fb03 f201 	mul.w	r2, r3, r1
 8001144:	2300      	movs	r3, #0
 8001146:	fb00 f303 	mul.w	r3, r0, r3
 800114a:	4413      	add	r3, r2
 800114c:	4a43      	ldr	r2, [pc, #268]	; (800125c <HAL_RCC_GetSysClockFreq+0x188>)
 800114e:	fba0 1202 	umull	r1, r2, r0, r2
 8001152:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001154:	460a      	mov	r2, r1
 8001156:	62ba      	str	r2, [r7, #40]	; 0x28
 8001158:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800115a:	4413      	add	r3, r2
 800115c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800115e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001160:	2200      	movs	r2, #0
 8001162:	61bb      	str	r3, [r7, #24]
 8001164:	61fa      	str	r2, [r7, #28]
 8001166:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800116a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800116e:	f7ff f82f 	bl	80001d0 <__aeabi_uldivmod>
 8001172:	4602      	mov	r2, r0
 8001174:	460b      	mov	r3, r1
 8001176:	4613      	mov	r3, r2
 8001178:	63fb      	str	r3, [r7, #60]	; 0x3c
 800117a:	e053      	b.n	8001224 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800117c:	4b35      	ldr	r3, [pc, #212]	; (8001254 <HAL_RCC_GetSysClockFreq+0x180>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	099b      	lsrs	r3, r3, #6
 8001182:	2200      	movs	r2, #0
 8001184:	613b      	str	r3, [r7, #16]
 8001186:	617a      	str	r2, [r7, #20]
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800118e:	f04f 0b00 	mov.w	fp, #0
 8001192:	4652      	mov	r2, sl
 8001194:	465b      	mov	r3, fp
 8001196:	f04f 0000 	mov.w	r0, #0
 800119a:	f04f 0100 	mov.w	r1, #0
 800119e:	0159      	lsls	r1, r3, #5
 80011a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80011a4:	0150      	lsls	r0, r2, #5
 80011a6:	4602      	mov	r2, r0
 80011a8:	460b      	mov	r3, r1
 80011aa:	ebb2 080a 	subs.w	r8, r2, sl
 80011ae:	eb63 090b 	sbc.w	r9, r3, fp
 80011b2:	f04f 0200 	mov.w	r2, #0
 80011b6:	f04f 0300 	mov.w	r3, #0
 80011ba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80011be:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80011c2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80011c6:	ebb2 0408 	subs.w	r4, r2, r8
 80011ca:	eb63 0509 	sbc.w	r5, r3, r9
 80011ce:	f04f 0200 	mov.w	r2, #0
 80011d2:	f04f 0300 	mov.w	r3, #0
 80011d6:	00eb      	lsls	r3, r5, #3
 80011d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80011dc:	00e2      	lsls	r2, r4, #3
 80011de:	4614      	mov	r4, r2
 80011e0:	461d      	mov	r5, r3
 80011e2:	eb14 030a 	adds.w	r3, r4, sl
 80011e6:	603b      	str	r3, [r7, #0]
 80011e8:	eb45 030b 	adc.w	r3, r5, fp
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	f04f 0200 	mov.w	r2, #0
 80011f2:	f04f 0300 	mov.w	r3, #0
 80011f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80011fa:	4629      	mov	r1, r5
 80011fc:	028b      	lsls	r3, r1, #10
 80011fe:	4621      	mov	r1, r4
 8001200:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001204:	4621      	mov	r1, r4
 8001206:	028a      	lsls	r2, r1, #10
 8001208:	4610      	mov	r0, r2
 800120a:	4619      	mov	r1, r3
 800120c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800120e:	2200      	movs	r2, #0
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	60fa      	str	r2, [r7, #12]
 8001214:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001218:	f7fe ffda 	bl	80001d0 <__aeabi_uldivmod>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4613      	mov	r3, r2
 8001222:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001224:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <HAL_RCC_GetSysClockFreq+0x180>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	0c1b      	lsrs	r3, r3, #16
 800122a:	f003 0303 	and.w	r3, r3, #3
 800122e:	3301      	adds	r3, #1
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001234:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001238:	fbb2 f3f3 	udiv	r3, r2, r3
 800123c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800123e:	e002      	b.n	8001246 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001240:	4b05      	ldr	r3, [pc, #20]	; (8001258 <HAL_RCC_GetSysClockFreq+0x184>)
 8001242:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001244:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001248:	4618      	mov	r0, r3
 800124a:	3740      	adds	r7, #64	; 0x40
 800124c:	46bd      	mov	sp, r7
 800124e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001252:	bf00      	nop
 8001254:	40023800 	.word	0x40023800
 8001258:	00f42400 	.word	0x00f42400
 800125c:	017d7840 	.word	0x017d7840

08001260 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001264:	4b03      	ldr	r3, [pc, #12]	; (8001274 <HAL_RCC_GetHCLKFreq+0x14>)
 8001266:	681b      	ldr	r3, [r3, #0]
}
 8001268:	4618      	mov	r0, r3
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	20000000 	.word	0x20000000

08001278 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800127c:	f7ff fff0 	bl	8001260 <HAL_RCC_GetHCLKFreq>
 8001280:	4602      	mov	r2, r0
 8001282:	4b05      	ldr	r3, [pc, #20]	; (8001298 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	0a9b      	lsrs	r3, r3, #10
 8001288:	f003 0307 	and.w	r3, r3, #7
 800128c:	4903      	ldr	r1, [pc, #12]	; (800129c <HAL_RCC_GetPCLK1Freq+0x24>)
 800128e:	5ccb      	ldrb	r3, [r1, r3]
 8001290:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001294:	4618      	mov	r0, r3
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40023800 	.word	0x40023800
 800129c:	08001cdc 	.word	0x08001cdc

080012a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	220f      	movs	r2, #15
 80012ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80012b0:	4b12      	ldr	r3, [pc, #72]	; (80012fc <HAL_RCC_GetClockConfig+0x5c>)
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	f003 0203 	and.w	r2, r3, #3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80012bc:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <HAL_RCC_GetClockConfig+0x5c>)
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80012c8:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <HAL_RCC_GetClockConfig+0x5c>)
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80012d4:	4b09      	ldr	r3, [pc, #36]	; (80012fc <HAL_RCC_GetClockConfig+0x5c>)
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	08db      	lsrs	r3, r3, #3
 80012da:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80012e2:	4b07      	ldr	r3, [pc, #28]	; (8001300 <HAL_RCC_GetClockConfig+0x60>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0207 	and.w	r2, r3, #7
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	601a      	str	r2, [r3, #0]
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	40023800 	.word	0x40023800
 8001300:	40023c00 	.word	0x40023c00

08001304 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d101      	bne.n	8001316 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e041      	b.n	800139a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	d106      	bne.n	8001330 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2200      	movs	r2, #0
 8001326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f000 f839 	bl	80013a2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2202      	movs	r2, #2
 8001334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3304      	adds	r3, #4
 8001340:	4619      	mov	r1, r3
 8001342:	4610      	mov	r0, r2
 8001344:	f000 f9d8 	bl	80016f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2201      	movs	r2, #1
 800134c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2201      	movs	r2, #1
 8001354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2201      	movs	r2, #1
 800135c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2201      	movs	r2, #1
 8001364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2201      	movs	r2, #1
 800136c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2201      	movs	r2, #1
 8001374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2201      	movs	r2, #1
 800137c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2201      	movs	r2, #1
 8001384:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2201      	movs	r2, #1
 800138c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2201      	movs	r2, #1
 8001394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001398:	2300      	movs	r3, #0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80013a2:	b480      	push	{r7}
 80013a4:	b083      	sub	sp, #12
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
	...

080013b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d001      	beq.n	80013d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e04e      	b.n	800146e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2202      	movs	r2, #2
 80013d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	68da      	ldr	r2, [r3, #12]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f042 0201 	orr.w	r2, r2, #1
 80013e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a23      	ldr	r2, [pc, #140]	; (800147c <HAL_TIM_Base_Start_IT+0xc4>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d022      	beq.n	8001438 <HAL_TIM_Base_Start_IT+0x80>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013fa:	d01d      	beq.n	8001438 <HAL_TIM_Base_Start_IT+0x80>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a1f      	ldr	r2, [pc, #124]	; (8001480 <HAL_TIM_Base_Start_IT+0xc8>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d018      	beq.n	8001438 <HAL_TIM_Base_Start_IT+0x80>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a1e      	ldr	r2, [pc, #120]	; (8001484 <HAL_TIM_Base_Start_IT+0xcc>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d013      	beq.n	8001438 <HAL_TIM_Base_Start_IT+0x80>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a1c      	ldr	r2, [pc, #112]	; (8001488 <HAL_TIM_Base_Start_IT+0xd0>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d00e      	beq.n	8001438 <HAL_TIM_Base_Start_IT+0x80>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a1b      	ldr	r2, [pc, #108]	; (800148c <HAL_TIM_Base_Start_IT+0xd4>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d009      	beq.n	8001438 <HAL_TIM_Base_Start_IT+0x80>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a19      	ldr	r2, [pc, #100]	; (8001490 <HAL_TIM_Base_Start_IT+0xd8>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d004      	beq.n	8001438 <HAL_TIM_Base_Start_IT+0x80>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a18      	ldr	r2, [pc, #96]	; (8001494 <HAL_TIM_Base_Start_IT+0xdc>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d111      	bne.n	800145c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f003 0307 	and.w	r3, r3, #7
 8001442:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	2b06      	cmp	r3, #6
 8001448:	d010      	beq.n	800146c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f042 0201 	orr.w	r2, r2, #1
 8001458:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800145a:	e007      	b.n	800146c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f042 0201 	orr.w	r2, r2, #1
 800146a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3714      	adds	r7, #20
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	40010000 	.word	0x40010000
 8001480:	40000400 	.word	0x40000400
 8001484:	40000800 	.word	0x40000800
 8001488:	40000c00 	.word	0x40000c00
 800148c:	40010400 	.word	0x40010400
 8001490:	40014000 	.word	0x40014000
 8001494:	40001800 	.word	0x40001800

08001498 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	691b      	ldr	r3, [r3, #16]
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d122      	bne.n	80014f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	f003 0302 	and.w	r3, r3, #2
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d11b      	bne.n	80014f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f06f 0202 	mvn.w	r2, #2
 80014c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2201      	movs	r2, #1
 80014ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	f003 0303 	and.w	r3, r3, #3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d003      	beq.n	80014e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f000 f8ee 	bl	80016bc <HAL_TIM_IC_CaptureCallback>
 80014e0:	e005      	b.n	80014ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f000 f8e0 	bl	80016a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f000 f8f1 	bl	80016d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	691b      	ldr	r3, [r3, #16]
 80014fa:	f003 0304 	and.w	r3, r3, #4
 80014fe:	2b04      	cmp	r3, #4
 8001500:	d122      	bne.n	8001548 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	f003 0304 	and.w	r3, r3, #4
 800150c:	2b04      	cmp	r3, #4
 800150e:	d11b      	bne.n	8001548 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f06f 0204 	mvn.w	r2, #4
 8001518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2202      	movs	r2, #2
 800151e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f000 f8c4 	bl	80016bc <HAL_TIM_IC_CaptureCallback>
 8001534:	e005      	b.n	8001542 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f000 f8b6 	bl	80016a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f000 f8c7 	bl	80016d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	691b      	ldr	r3, [r3, #16]
 800154e:	f003 0308 	and.w	r3, r3, #8
 8001552:	2b08      	cmp	r3, #8
 8001554:	d122      	bne.n	800159c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	f003 0308 	and.w	r3, r3, #8
 8001560:	2b08      	cmp	r3, #8
 8001562:	d11b      	bne.n	800159c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f06f 0208 	mvn.w	r2, #8
 800156c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2204      	movs	r2, #4
 8001572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	f003 0303 	and.w	r3, r3, #3
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f000 f89a 	bl	80016bc <HAL_TIM_IC_CaptureCallback>
 8001588:	e005      	b.n	8001596 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f000 f88c 	bl	80016a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f000 f89d 	bl	80016d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	691b      	ldr	r3, [r3, #16]
 80015a2:	f003 0310 	and.w	r3, r3, #16
 80015a6:	2b10      	cmp	r3, #16
 80015a8:	d122      	bne.n	80015f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	f003 0310 	and.w	r3, r3, #16
 80015b4:	2b10      	cmp	r3, #16
 80015b6:	d11b      	bne.n	80015f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f06f 0210 	mvn.w	r2, #16
 80015c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2208      	movs	r2, #8
 80015c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d003      	beq.n	80015de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f000 f870 	bl	80016bc <HAL_TIM_IC_CaptureCallback>
 80015dc:	e005      	b.n	80015ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f000 f862 	bl	80016a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f000 f873 	bl	80016d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d10e      	bne.n	800161c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	2b01      	cmp	r3, #1
 800160a:	d107      	bne.n	800161c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f06f 0201 	mvn.w	r2, #1
 8001614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7fe ffc2 	bl	80005a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	691b      	ldr	r3, [r3, #16]
 8001622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001626:	2b80      	cmp	r3, #128	; 0x80
 8001628:	d10e      	bne.n	8001648 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001634:	2b80      	cmp	r3, #128	; 0x80
 8001636:	d107      	bne.n	8001648 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f000 f902 	bl	800184c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	691b      	ldr	r3, [r3, #16]
 800164e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001652:	2b40      	cmp	r3, #64	; 0x40
 8001654:	d10e      	bne.n	8001674 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001660:	2b40      	cmp	r3, #64	; 0x40
 8001662:	d107      	bne.n	8001674 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800166c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f000 f838 	bl	80016e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	f003 0320 	and.w	r3, r3, #32
 800167e:	2b20      	cmp	r3, #32
 8001680:	d10e      	bne.n	80016a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	f003 0320 	and.w	r3, r3, #32
 800168c:	2b20      	cmp	r3, #32
 800168e:	d107      	bne.n	80016a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f06f 0220 	mvn.w	r2, #32
 8001698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 f8cc 	bl	8001838 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80016a0:	bf00      	nop
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4a40      	ldr	r2, [pc, #256]	; (800180c <TIM_Base_SetConfig+0x114>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d013      	beq.n	8001738 <TIM_Base_SetConfig+0x40>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001716:	d00f      	beq.n	8001738 <TIM_Base_SetConfig+0x40>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a3d      	ldr	r2, [pc, #244]	; (8001810 <TIM_Base_SetConfig+0x118>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d00b      	beq.n	8001738 <TIM_Base_SetConfig+0x40>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4a3c      	ldr	r2, [pc, #240]	; (8001814 <TIM_Base_SetConfig+0x11c>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d007      	beq.n	8001738 <TIM_Base_SetConfig+0x40>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4a3b      	ldr	r2, [pc, #236]	; (8001818 <TIM_Base_SetConfig+0x120>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d003      	beq.n	8001738 <TIM_Base_SetConfig+0x40>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4a3a      	ldr	r2, [pc, #232]	; (800181c <TIM_Base_SetConfig+0x124>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d108      	bne.n	800174a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800173e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	68fa      	ldr	r2, [r7, #12]
 8001746:	4313      	orrs	r3, r2
 8001748:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a2f      	ldr	r2, [pc, #188]	; (800180c <TIM_Base_SetConfig+0x114>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d02b      	beq.n	80017aa <TIM_Base_SetConfig+0xb2>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001758:	d027      	beq.n	80017aa <TIM_Base_SetConfig+0xb2>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a2c      	ldr	r2, [pc, #176]	; (8001810 <TIM_Base_SetConfig+0x118>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d023      	beq.n	80017aa <TIM_Base_SetConfig+0xb2>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a2b      	ldr	r2, [pc, #172]	; (8001814 <TIM_Base_SetConfig+0x11c>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d01f      	beq.n	80017aa <TIM_Base_SetConfig+0xb2>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a2a      	ldr	r2, [pc, #168]	; (8001818 <TIM_Base_SetConfig+0x120>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d01b      	beq.n	80017aa <TIM_Base_SetConfig+0xb2>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a29      	ldr	r2, [pc, #164]	; (800181c <TIM_Base_SetConfig+0x124>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d017      	beq.n	80017aa <TIM_Base_SetConfig+0xb2>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a28      	ldr	r2, [pc, #160]	; (8001820 <TIM_Base_SetConfig+0x128>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d013      	beq.n	80017aa <TIM_Base_SetConfig+0xb2>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a27      	ldr	r2, [pc, #156]	; (8001824 <TIM_Base_SetConfig+0x12c>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d00f      	beq.n	80017aa <TIM_Base_SetConfig+0xb2>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a26      	ldr	r2, [pc, #152]	; (8001828 <TIM_Base_SetConfig+0x130>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d00b      	beq.n	80017aa <TIM_Base_SetConfig+0xb2>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a25      	ldr	r2, [pc, #148]	; (800182c <TIM_Base_SetConfig+0x134>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d007      	beq.n	80017aa <TIM_Base_SetConfig+0xb2>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a24      	ldr	r2, [pc, #144]	; (8001830 <TIM_Base_SetConfig+0x138>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d003      	beq.n	80017aa <TIM_Base_SetConfig+0xb2>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a23      	ldr	r2, [pc, #140]	; (8001834 <TIM_Base_SetConfig+0x13c>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d108      	bne.n	80017bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	695b      	ldr	r3, [r3, #20]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	68fa      	ldr	r2, [r7, #12]
 80017ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	689a      	ldr	r2, [r3, #8]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4a0a      	ldr	r2, [pc, #40]	; (800180c <TIM_Base_SetConfig+0x114>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d003      	beq.n	80017f0 <TIM_Base_SetConfig+0xf8>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4a0c      	ldr	r2, [pc, #48]	; (800181c <TIM_Base_SetConfig+0x124>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d103      	bne.n	80017f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	691a      	ldr	r2, [r3, #16]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2201      	movs	r2, #1
 80017fc:	615a      	str	r2, [r3, #20]
}
 80017fe:	bf00      	nop
 8001800:	3714      	adds	r7, #20
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	40010000 	.word	0x40010000
 8001810:	40000400 	.word	0x40000400
 8001814:	40000800 	.word	0x40000800
 8001818:	40000c00 	.word	0x40000c00
 800181c:	40010400 	.word	0x40010400
 8001820:	40014000 	.word	0x40014000
 8001824:	40014400 	.word	0x40014400
 8001828:	40014800 	.word	0x40014800
 800182c:	40001800 	.word	0x40001800
 8001830:	40001c00 	.word	0x40001c00
 8001834:	40002000 	.word	0x40002000

08001838 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08a      	sub	sp, #40	; 0x28
 8001864:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001866:	2300      	movs	r3, #0
 8001868:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800186a:	4b7d      	ldr	r3, [pc, #500]	; (8001a60 <xTaskIncrementTick+0x200>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	f040 80ec 	bne.w	8001a4c <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001874:	4b7b      	ldr	r3, [pc, #492]	; (8001a64 <xTaskIncrementTick+0x204>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	3301      	adds	r3, #1
 800187a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800187c:	4a79      	ldr	r2, [pc, #484]	; (8001a64 <xTaskIncrementTick+0x204>)
 800187e:	6a3b      	ldr	r3, [r7, #32]
 8001880:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001882:	6a3b      	ldr	r3, [r7, #32]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d120      	bne.n	80018ca <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8001888:	4b77      	ldr	r3, [pc, #476]	; (8001a68 <xTaskIncrementTick+0x208>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d00a      	beq.n	80018a8 <xTaskIncrementTick+0x48>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001896:	f383 8811 	msr	BASEPRI, r3
 800189a:	f3bf 8f6f 	isb	sy
 800189e:	f3bf 8f4f 	dsb	sy
 80018a2:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80018a4:	bf00      	nop
 80018a6:	e7fe      	b.n	80018a6 <xTaskIncrementTick+0x46>
 80018a8:	4b6f      	ldr	r3, [pc, #444]	; (8001a68 <xTaskIncrementTick+0x208>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	61fb      	str	r3, [r7, #28]
 80018ae:	4b6f      	ldr	r3, [pc, #444]	; (8001a6c <xTaskIncrementTick+0x20c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a6d      	ldr	r2, [pc, #436]	; (8001a68 <xTaskIncrementTick+0x208>)
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	4a6d      	ldr	r2, [pc, #436]	; (8001a6c <xTaskIncrementTick+0x20c>)
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	6013      	str	r3, [r2, #0]
 80018bc:	4b6c      	ldr	r3, [pc, #432]	; (8001a70 <xTaskIncrementTick+0x210>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	3301      	adds	r3, #1
 80018c2:	4a6b      	ldr	r2, [pc, #428]	; (8001a70 <xTaskIncrementTick+0x210>)
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	f000 f93d 	bl	8001b44 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80018ca:	4b6a      	ldr	r3, [pc, #424]	; (8001a74 <xTaskIncrementTick+0x214>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	6a3a      	ldr	r2, [r7, #32]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	f0c0 80a6 	bcc.w	8001a22 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80018d6:	4b64      	ldr	r3, [pc, #400]	; (8001a68 <xTaskIncrementTick+0x208>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d104      	bne.n	80018ea <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80018e0:	4b64      	ldr	r3, [pc, #400]	; (8001a74 <xTaskIncrementTick+0x214>)
 80018e2:	f04f 32ff 	mov.w	r2, #4294967295
 80018e6:	601a      	str	r2, [r3, #0]
                    break;
 80018e8:	e09b      	b.n	8001a22 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80018ea:	4b5f      	ldr	r3, [pc, #380]	; (8001a68 <xTaskIncrementTick+0x208>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80018fa:	6a3a      	ldr	r2, [r7, #32]
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d203      	bcs.n	800190a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001902:	4a5c      	ldr	r2, [pc, #368]	; (8001a74 <xTaskIncrementTick+0x214>)
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001908:	e08b      	b.n	8001a22 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	613b      	str	r3, [r7, #16]
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	68d2      	ldr	r2, [r2, #12]
 8001918:	609a      	str	r2, [r3, #8]
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	6892      	ldr	r2, [r2, #8]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	685a      	ldr	r2, [r3, #4]
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	3304      	adds	r3, #4
 800192c:	429a      	cmp	r2, r3
 800192e:	d103      	bne.n	8001938 <xTaskIncrementTick+0xd8>
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	68da      	ldr	r2, [r3, #12]
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	605a      	str	r2, [r3, #4]
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	2200      	movs	r2, #0
 800193c:	615a      	str	r2, [r3, #20]
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	1e5a      	subs	r2, r3, #1
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194c:	2b00      	cmp	r3, #0
 800194e:	d01e      	beq.n	800198e <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	6a12      	ldr	r2, [r2, #32]
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	6a1b      	ldr	r3, [r3, #32]
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	69d2      	ldr	r2, [r2, #28]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	685a      	ldr	r2, [r3, #4]
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	3318      	adds	r3, #24
 8001972:	429a      	cmp	r2, r3
 8001974:	d103      	bne.n	800197e <xTaskIncrementTick+0x11e>
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	6a1a      	ldr	r2, [r3, #32]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	2200      	movs	r2, #0
 8001982:	629a      	str	r2, [r3, #40]	; 0x28
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	1e5a      	subs	r2, r3, #1
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001992:	2201      	movs	r2, #1
 8001994:	409a      	lsls	r2, r3
 8001996:	4b38      	ldr	r3, [pc, #224]	; (8001a78 <xTaskIncrementTick+0x218>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4313      	orrs	r3, r2
 800199c:	4a36      	ldr	r2, [pc, #216]	; (8001a78 <xTaskIncrementTick+0x218>)
 800199e:	6013      	str	r3, [r2, #0]
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019a4:	4935      	ldr	r1, [pc, #212]	; (8001a7c <xTaskIncrementTick+0x21c>)
 80019a6:	4613      	mov	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	440b      	add	r3, r1
 80019b0:	3304      	adds	r3, #4
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	60bb      	str	r3, [r7, #8]
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	68ba      	ldr	r2, [r7, #8]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	60da      	str	r2, [r3, #12]
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	3204      	adds	r2, #4
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	1d1a      	adds	r2, r3, #4
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	609a      	str	r2, [r3, #8]
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019da:	4613      	mov	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	4a26      	ldr	r2, [pc, #152]	; (8001a7c <xTaskIncrementTick+0x21c>)
 80019e4:	441a      	add	r2, r3
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	615a      	str	r2, [r3, #20]
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019ee:	4923      	ldr	r1, [pc, #140]	; (8001a7c <xTaskIncrementTick+0x21c>)
 80019f0:	4613      	mov	r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4413      	add	r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	440b      	add	r3, r1
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	1c59      	adds	r1, r3, #1
 80019fe:	481f      	ldr	r0, [pc, #124]	; (8001a7c <xTaskIncrementTick+0x21c>)
 8001a00:	4613      	mov	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4403      	add	r3, r0
 8001a0a:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a10:	4b1b      	ldr	r3, [pc, #108]	; (8001a80 <xTaskIncrementTick+0x220>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a16:	429a      	cmp	r2, r3
 8001a18:	f67f af5d 	bls.w	80018d6 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001a20:	e759      	b.n	80018d6 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001a22:	4b17      	ldr	r3, [pc, #92]	; (8001a80 <xTaskIncrementTick+0x220>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a28:	4914      	ldr	r1, [pc, #80]	; (8001a7c <xTaskIncrementTick+0x21c>)
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	4413      	add	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	440b      	add	r3, r1
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d901      	bls.n	8001a3e <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8001a3e:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <xTaskIncrementTick+0x224>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d007      	beq.n	8001a56 <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8001a46:	2301      	movs	r3, #1
 8001a48:	627b      	str	r3, [r7, #36]	; 0x24
 8001a4a:	e004      	b.n	8001a56 <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001a4c:	4b0e      	ldr	r3, [pc, #56]	; (8001a88 <xTaskIncrementTick+0x228>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	3301      	adds	r3, #1
 8001a52:	4a0d      	ldr	r2, [pc, #52]	; (8001a88 <xTaskIncrementTick+0x228>)
 8001a54:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3728      	adds	r7, #40	; 0x28
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	200000fc 	.word	0x200000fc
 8001a64:	200000e4 	.word	0x200000e4
 8001a68:	200000dc 	.word	0x200000dc
 8001a6c:	200000e0 	.word	0x200000e0
 8001a70:	200000f4 	.word	0x200000f4
 8001a74:	200000f8 	.word	0x200000f8
 8001a78:	200000e8 	.word	0x200000e8
 8001a7c:	20000078 	.word	0x20000078
 8001a80:	20000074 	.word	0x20000074
 8001a84:	200000f0 	.word	0x200000f0
 8001a88:	200000ec 	.word	0x200000ec

08001a8c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b087      	sub	sp, #28
 8001a90:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001a92:	4b27      	ldr	r3, [pc, #156]	; (8001b30 <vTaskSwitchContext+0xa4>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001a9a:	4b26      	ldr	r3, [pc, #152]	; (8001b34 <vTaskSwitchContext+0xa8>)
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8001aa0:	e03f      	b.n	8001b22 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8001aa2:	4b24      	ldr	r3, [pc, #144]	; (8001b34 <vTaskSwitchContext+0xa8>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001aa8:	4b23      	ldr	r3, [pc, #140]	; (8001b38 <vTaskSwitchContext+0xac>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	fab3 f383 	clz	r3, r3
 8001ab4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8001ab6:	7afb      	ldrb	r3, [r7, #11]
 8001ab8:	f1c3 031f 	rsb	r3, r3, #31
 8001abc:	617b      	str	r3, [r7, #20]
 8001abe:	491f      	ldr	r1, [pc, #124]	; (8001b3c <vTaskSwitchContext+0xb0>)
 8001ac0:	697a      	ldr	r2, [r7, #20]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	4413      	add	r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	440b      	add	r3, r1
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d10a      	bne.n	8001ae8 <vTaskSwitchContext+0x5c>
        __asm volatile
 8001ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ad6:	f383 8811 	msr	BASEPRI, r3
 8001ada:	f3bf 8f6f 	isb	sy
 8001ade:	f3bf 8f4f 	dsb	sy
 8001ae2:	607b      	str	r3, [r7, #4]
    }
 8001ae4:	bf00      	nop
 8001ae6:	e7fe      	b.n	8001ae6 <vTaskSwitchContext+0x5a>
 8001ae8:	697a      	ldr	r2, [r7, #20]
 8001aea:	4613      	mov	r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4413      	add	r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	4a12      	ldr	r2, [pc, #72]	; (8001b3c <vTaskSwitchContext+0xb0>)
 8001af4:	4413      	add	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	685a      	ldr	r2, [r3, #4]
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	685a      	ldr	r2, [r3, #4]
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	3308      	adds	r3, #8
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d104      	bne.n	8001b18 <vTaskSwitchContext+0x8c>
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	685a      	ldr	r2, [r3, #4]
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	605a      	str	r2, [r3, #4]
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	4a08      	ldr	r2, [pc, #32]	; (8001b40 <vTaskSwitchContext+0xb4>)
 8001b20:	6013      	str	r3, [r2, #0]
}
 8001b22:	bf00      	nop
 8001b24:	371c      	adds	r7, #28
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	200000fc 	.word	0x200000fc
 8001b34:	200000f0 	.word	0x200000f0
 8001b38:	200000e8 	.word	0x200000e8
 8001b3c:	20000078 	.word	0x20000078
 8001b40:	20000074 	.word	0x20000074

08001b44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001b48:	4b0a      	ldr	r3, [pc, #40]	; (8001b74 <prvResetNextTaskUnblockTime+0x30>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d104      	bne.n	8001b5c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001b52:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <prvResetNextTaskUnblockTime+0x34>)
 8001b54:	f04f 32ff 	mov.w	r2, #4294967295
 8001b58:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001b5a:	e005      	b.n	8001b68 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001b5c:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <prvResetNextTaskUnblockTime+0x30>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a04      	ldr	r2, [pc, #16]	; (8001b78 <prvResetNextTaskUnblockTime+0x34>)
 8001b66:	6013      	str	r3, [r2, #0]
}
 8001b68:	bf00      	nop
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	200000dc 	.word	0x200000dc
 8001b78:	200000f8 	.word	0x200000f8
 8001b7c:	00000000 	.word	0x00000000

08001b80 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001b80:	4b07      	ldr	r3, [pc, #28]	; (8001ba0 <pxCurrentTCBConst2>)
 8001b82:	6819      	ldr	r1, [r3, #0]
 8001b84:	6808      	ldr	r0, [r1, #0]
 8001b86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b8a:	f380 8809 	msr	PSP, r0
 8001b8e:	f3bf 8f6f 	isb	sy
 8001b92:	f04f 0000 	mov.w	r0, #0
 8001b96:	f380 8811 	msr	BASEPRI, r0
 8001b9a:	4770      	bx	lr
 8001b9c:	f3af 8000 	nop.w

08001ba0 <pxCurrentTCBConst2>:
 8001ba0:	20000074 	.word	0x20000074
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001ba4:	bf00      	nop
 8001ba6:	bf00      	nop
	...

08001bb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001bb0:	f3ef 8009 	mrs	r0, PSP
 8001bb4:	f3bf 8f6f 	isb	sy
 8001bb8:	4b15      	ldr	r3, [pc, #84]	; (8001c10 <pxCurrentTCBConst>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	f01e 0f10 	tst.w	lr, #16
 8001bc0:	bf08      	it	eq
 8001bc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001bc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bca:	6010      	str	r0, [r2, #0]
 8001bcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001bd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001bd4:	f380 8811 	msr	BASEPRI, r0
 8001bd8:	f3bf 8f4f 	dsb	sy
 8001bdc:	f3bf 8f6f 	isb	sy
 8001be0:	f7ff ff54 	bl	8001a8c <vTaskSwitchContext>
 8001be4:	f04f 0000 	mov.w	r0, #0
 8001be8:	f380 8811 	msr	BASEPRI, r0
 8001bec:	bc09      	pop	{r0, r3}
 8001bee:	6819      	ldr	r1, [r3, #0]
 8001bf0:	6808      	ldr	r0, [r1, #0]
 8001bf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bf6:	f01e 0f10 	tst.w	lr, #16
 8001bfa:	bf08      	it	eq
 8001bfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001c00:	f380 8809 	msr	PSP, r0
 8001c04:	f3bf 8f6f 	isb	sy
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	f3af 8000 	nop.w

08001c10 <pxCurrentTCBConst>:
 8001c10:	20000074 	.word	0x20000074
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001c14:	bf00      	nop
 8001c16:	bf00      	nop

08001c18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
        __asm volatile
 8001c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c22:	f383 8811 	msr	BASEPRI, r3
 8001c26:	f3bf 8f6f 	isb	sy
 8001c2a:	f3bf 8f4f 	dsb	sy
 8001c2e:	607b      	str	r3, [r7, #4]
    }
 8001c30:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001c32:	f7ff fe15 	bl	8001860 <xTaskIncrementTick>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d003      	beq.n	8001c44 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001c3c:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <SysTick_Handler+0x40>)
 8001c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	2300      	movs	r3, #0
 8001c46:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8001c4e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8001c50:	bf00      	nop
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	e000ed04 	.word	0xe000ed04

08001c5c <__libc_init_array>:
 8001c5c:	b570      	push	{r4, r5, r6, lr}
 8001c5e:	4d0d      	ldr	r5, [pc, #52]	; (8001c94 <__libc_init_array+0x38>)
 8001c60:	4c0d      	ldr	r4, [pc, #52]	; (8001c98 <__libc_init_array+0x3c>)
 8001c62:	1b64      	subs	r4, r4, r5
 8001c64:	10a4      	asrs	r4, r4, #2
 8001c66:	2600      	movs	r6, #0
 8001c68:	42a6      	cmp	r6, r4
 8001c6a:	d109      	bne.n	8001c80 <__libc_init_array+0x24>
 8001c6c:	4d0b      	ldr	r5, [pc, #44]	; (8001c9c <__libc_init_array+0x40>)
 8001c6e:	4c0c      	ldr	r4, [pc, #48]	; (8001ca0 <__libc_init_array+0x44>)
 8001c70:	f000 f820 	bl	8001cb4 <_init>
 8001c74:	1b64      	subs	r4, r4, r5
 8001c76:	10a4      	asrs	r4, r4, #2
 8001c78:	2600      	movs	r6, #0
 8001c7a:	42a6      	cmp	r6, r4
 8001c7c:	d105      	bne.n	8001c8a <__libc_init_array+0x2e>
 8001c7e:	bd70      	pop	{r4, r5, r6, pc}
 8001c80:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c84:	4798      	blx	r3
 8001c86:	3601      	adds	r6, #1
 8001c88:	e7ee      	b.n	8001c68 <__libc_init_array+0xc>
 8001c8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c8e:	4798      	blx	r3
 8001c90:	3601      	adds	r6, #1
 8001c92:	e7f2      	b.n	8001c7a <__libc_init_array+0x1e>
 8001c94:	08001cec 	.word	0x08001cec
 8001c98:	08001cec 	.word	0x08001cec
 8001c9c:	08001cec 	.word	0x08001cec
 8001ca0:	08001cf0 	.word	0x08001cf0

08001ca4 <memset>:
 8001ca4:	4402      	add	r2, r0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d100      	bne.n	8001cae <memset+0xa>
 8001cac:	4770      	bx	lr
 8001cae:	f803 1b01 	strb.w	r1, [r3], #1
 8001cb2:	e7f9      	b.n	8001ca8 <memset+0x4>

08001cb4 <_init>:
 8001cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cb6:	bf00      	nop
 8001cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cba:	bc08      	pop	{r3}
 8001cbc:	469e      	mov	lr, r3
 8001cbe:	4770      	bx	lr

08001cc0 <_fini>:
 8001cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cc2:	bf00      	nop
 8001cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cc6:	bc08      	pop	{r3}
 8001cc8:	469e      	mov	lr, r3
 8001cca:	4770      	bx	lr
