
QUEUE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005174  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08005304  08005304  00015304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005420  08005420  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005420  08005420  00015420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005428  08005428  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005428  08005428  00015428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800542c  0800542c  0001542c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005430  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00012e54  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012ecc  20012ecc  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ed38  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002514  00000000  00000000  0002ede0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ed8  00000000  00000000  000312f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000dc0  00000000  00000000  000321d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020c85  00000000  00000000  00032f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fd6c  00000000  00000000  00053c15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7ef1  00000000  00000000  00063981  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012b872  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000459c  00000000  00000000  0012b8c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080052ec 	.word	0x080052ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080052ec 	.word	0x080052ec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <send>:

list sendData;

list receiveData;

void send(void *pvParameters) {
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]

	while (1) {

		for (uint8_t i = 0; i < 10; i++) {
 800057c:	2300      	movs	r3, #0
 800057e:	73fb      	strb	r3, [r7, #15]
 8000580:	e00a      	b.n	8000598 <send+0x24>

			//snprintf(sendData.data, sizeof(sendData.data), "%d", (i + 1) * 10);

			sendData.data[i]= i+1;
 8000582:	7bfb      	ldrb	r3, [r7, #15]
 8000584:	7bfa      	ldrb	r2, [r7, #15]
 8000586:	3201      	adds	r2, #1
 8000588:	b2d1      	uxtb	r1, r2
 800058a:	4a0c      	ldr	r2, [pc, #48]	; (80005bc <send+0x48>)
 800058c:	4413      	add	r3, r2
 800058e:	460a      	mov	r2, r1
 8000590:	711a      	strb	r2, [r3, #4]
		for (uint8_t i = 0; i < 10; i++) {
 8000592:	7bfb      	ldrb	r3, [r7, #15]
 8000594:	3301      	adds	r3, #1
 8000596:	73fb      	strb	r3, [r7, #15]
 8000598:	7bfb      	ldrb	r3, [r7, #15]
 800059a:	2b09      	cmp	r3, #9
 800059c:	d9f1      	bls.n	8000582 <send+0xe>

		}

		sendData.id = 10;
 800059e:	4b07      	ldr	r3, [pc, #28]	; (80005bc <send+0x48>)
 80005a0:	220a      	movs	r2, #10
 80005a2:	601a      	str	r2, [r3, #0]

		xQueueSend(xQueue1, (void* )&sendData, (TickType_t )10);
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <send+0x4c>)
 80005a6:	6818      	ldr	r0, [r3, #0]
 80005a8:	2300      	movs	r3, #0
 80005aa:	220a      	movs	r2, #10
 80005ac:	4903      	ldr	r1, [pc, #12]	; (80005bc <send+0x48>)
 80005ae:	f001 fc47 	bl	8001e40 <xQueueGenericSend>

		vTaskDelay(pdMS_TO_TICKS(500));
 80005b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005b6:	f002 f91d 	bl	80027f4 <vTaskDelay>
		for (uint8_t i = 0; i < 10; i++) {
 80005ba:	e7df      	b.n	800057c <send+0x8>
 80005bc:	200000a8 	.word	0x200000a8
 80005c0:	200000a4 	.word	0x200000a4

080005c4 <receive>:

	}

}

void receive(void *pvParameters) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]

	for (;;) {

		if (xQueueReceive(xQueue1, (void*) &receiveData,
 80005cc:	4b0a      	ldr	r3, [pc, #40]	; (80005f8 <receive+0x34>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	220a      	movs	r2, #10
 80005d2:	490a      	ldr	r1, [pc, #40]	; (80005fc <receive+0x38>)
 80005d4:	4618      	mov	r0, r3
 80005d6:	f001 fd31 	bl	800203c <xQueueReceive>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d1f5      	bne.n	80005cc <receive+0x8>

				(TickType_t) 10) == pdPASS) {

			printf("ID: %d\n", receiveData.id);
 80005e0:	4b06      	ldr	r3, [pc, #24]	; (80005fc <receive+0x38>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4619      	mov	r1, r3
 80005e6:	4806      	ldr	r0, [pc, #24]	; (8000600 <receive+0x3c>)
 80005e8:	f003 fe6e 	bl	80042c8 <iprintf>

			printf("Data: %s\n", receiveData.data);
 80005ec:	4905      	ldr	r1, [pc, #20]	; (8000604 <receive+0x40>)
 80005ee:	4806      	ldr	r0, [pc, #24]	; (8000608 <receive+0x44>)
 80005f0:	f003 fe6a 	bl	80042c8 <iprintf>
		if (xQueueReceive(xQueue1, (void*) &receiveData,
 80005f4:	e7ea      	b.n	80005cc <receive+0x8>
 80005f6:	bf00      	nop
 80005f8:	200000a4 	.word	0x200000a4
 80005fc:	200000b8 	.word	0x200000b8
 8000600:	08005304 	.word	0x08005304
 8000604:	200000bc 	.word	0x200000bc
 8000608:	0800530c 	.word	0x0800530c

0800060c <main>:

	// vTaskDelete(NULL);

}

int main(void) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af02      	add	r7, sp, #8

	HAL_Init();
 8000612:	f000 fa3b 	bl	8000a8c <HAL_Init>

	SystemClock_Config();
 8000616:	f000 f855 	bl	80006c4 <SystemClock_Config>

	/* Create queue before tasks */

	xQueue1 = xQueueCreate(10, sizeof(list));
 800061a:	2200      	movs	r2, #0
 800061c:	2110      	movs	r1, #16
 800061e:	200a      	movs	r0, #10
 8000620:	f001 fb9c 	bl	8001d5c <xQueueGenericCreate>
 8000624:	4603      	mov	r3, r0
 8000626:	4a1b      	ldr	r2, [pc, #108]	; (8000694 <main+0x88>)
 8000628:	6013      	str	r3, [r2, #0]

	if (xQueue1 == NULL) {
 800062a:	4b1a      	ldr	r3, [pc, #104]	; (8000694 <main+0x88>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d104      	bne.n	800063c <main+0x30>

		printf("Failed to create queue\n");
 8000632:	4819      	ldr	r0, [pc, #100]	; (8000698 <main+0x8c>)
 8000634:	f003 fece 	bl	80043d4 <puts>

		Error_Handler();
 8000638:	f000 f8b4 	bl	80007a4 <Error_Handler>

	}

	/* Create tasks */

	x1Return = xTaskCreate(send, "send", 128, NULL, 1, &x1Handle);
 800063c:	4b17      	ldr	r3, [pc, #92]	; (800069c <main+0x90>)
 800063e:	9301      	str	r3, [sp, #4]
 8000640:	2301      	movs	r3, #1
 8000642:	9300      	str	r3, [sp, #0]
 8000644:	2300      	movs	r3, #0
 8000646:	2280      	movs	r2, #128	; 0x80
 8000648:	4915      	ldr	r1, [pc, #84]	; (80006a0 <main+0x94>)
 800064a:	4816      	ldr	r0, [pc, #88]	; (80006a4 <main+0x98>)
 800064c:	f001 ff68 	bl	8002520 <xTaskCreate>
 8000650:	4603      	mov	r3, r0
 8000652:	4a15      	ldr	r2, [pc, #84]	; (80006a8 <main+0x9c>)
 8000654:	6013      	str	r3, [r2, #0]

	if (x1Return == pdPASS) {
 8000656:	4b14      	ldr	r3, [pc, #80]	; (80006a8 <main+0x9c>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	2b01      	cmp	r3, #1
 800065c:	d102      	bne.n	8000664 <main+0x58>

		printf("TASK 1 OK\n");
 800065e:	4813      	ldr	r0, [pc, #76]	; (80006ac <main+0xa0>)
 8000660:	f003 feb8 	bl	80043d4 <puts>

	}

	x2Return = xTaskCreate(receive, "receive", 128, NULL, 1, &x2Handle);
 8000664:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <main+0xa4>)
 8000666:	9301      	str	r3, [sp, #4]
 8000668:	2301      	movs	r3, #1
 800066a:	9300      	str	r3, [sp, #0]
 800066c:	2300      	movs	r3, #0
 800066e:	2280      	movs	r2, #128	; 0x80
 8000670:	4910      	ldr	r1, [pc, #64]	; (80006b4 <main+0xa8>)
 8000672:	4811      	ldr	r0, [pc, #68]	; (80006b8 <main+0xac>)
 8000674:	f001 ff54 	bl	8002520 <xTaskCreate>
 8000678:	4603      	mov	r3, r0
 800067a:	4a10      	ldr	r2, [pc, #64]	; (80006bc <main+0xb0>)
 800067c:	6013      	str	r3, [r2, #0]

	if (x2Return == pdPASS) {
 800067e:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <main+0xb0>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	2b01      	cmp	r3, #1
 8000684:	d102      	bne.n	800068c <main+0x80>

		printf("TASK 2 OK\n");
 8000686:	480e      	ldr	r0, [pc, #56]	; (80006c0 <main+0xb4>)
 8000688:	f003 fea4 	bl	80043d4 <puts>

	}

	vTaskStartScheduler();
 800068c:	f002 f8e6 	bl	800285c <vTaskStartScheduler>

	while (1) {
 8000690:	e7fe      	b.n	8000690 <main+0x84>
 8000692:	bf00      	nop
 8000694:	200000a4 	.word	0x200000a4
 8000698:	08005318 	.word	0x08005318
 800069c:	20000094 	.word	0x20000094
 80006a0:	08005330 	.word	0x08005330
 80006a4:	08000575 	.word	0x08000575
 80006a8:	2000009c 	.word	0x2000009c
 80006ac:	08005338 	.word	0x08005338
 80006b0:	20000098 	.word	0x20000098
 80006b4:	08005344 	.word	0x08005344
 80006b8:	080005c5 	.word	0x080005c5
 80006bc:	200000a0 	.word	0x200000a0
 80006c0:	0800534c 	.word	0x0800534c

080006c4 <SystemClock_Config>:

* @retval None

*/

void SystemClock_Config(void) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b094      	sub	sp, #80	; 0x50
 80006c8:	af00      	add	r7, sp, #0

	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80006ca:	f107 0320 	add.w	r3, r7, #32
 80006ce:	2230      	movs	r2, #48	; 0x30
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f003 fdf0 	bl	80042b8 <memset>

	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage

	 */

	__HAL_RCC_PWR_CLK_ENABLE();
 80006e8:	2300      	movs	r3, #0
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	4b22      	ldr	r3, [pc, #136]	; (8000778 <SystemClock_Config+0xb4>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	4a21      	ldr	r2, [pc, #132]	; (8000778 <SystemClock_Config+0xb4>)
 80006f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f6:	6413      	str	r3, [r2, #64]	; 0x40
 80006f8:	4b1f      	ldr	r3, [pc, #124]	; (8000778 <SystemClock_Config+0xb4>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]

	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000704:	2300      	movs	r3, #0
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	4b1c      	ldr	r3, [pc, #112]	; (800077c <SystemClock_Config+0xb8>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a1b      	ldr	r2, [pc, #108]	; (800077c <SystemClock_Config+0xb8>)
 800070e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000712:	6013      	str	r3, [r2, #0]
 8000714:	4b19      	ldr	r3, [pc, #100]	; (800077c <SystemClock_Config+0xb8>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	687b      	ldr	r3, [r7, #4]

	 * in the RCC_OscInitTypeDef structure.

	 */

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000720:	2302      	movs	r3, #2
 8000722:	623b      	str	r3, [r7, #32]

	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000724:	2301      	movs	r3, #1
 8000726:	62fb      	str	r3, [r7, #44]	; 0x2c

	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000728:	2310      	movs	r3, #16
 800072a:	633b      	str	r3, [r7, #48]	; 0x30

	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800072c:	2300      	movs	r3, #0
 800072e:	63bb      	str	r3, [r7, #56]	; 0x38

	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000730:	f107 0320 	add.w	r3, r7, #32
 8000734:	4618      	mov	r0, r3
 8000736:	f000 facd 	bl	8000cd4 <HAL_RCC_OscConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0x80>

		Error_Handler();
 8000740:	f000 f830 	bl	80007a4 <Error_Handler>

	/** Initializes the CPU, AHB and APB buses clocks

	 */

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000744:	230f      	movs	r3, #15
 8000746:	60fb      	str	r3, [r7, #12]

			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000748:	2300      	movs	r3, #0
 800074a:	613b      	str	r3, [r7, #16]

	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]

	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	61bb      	str	r3, [r7, #24]

	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000758:	f107 030c 	add.w	r3, r7, #12
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f000 fd30 	bl	80011c4 <HAL_RCC_ClockConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0xaa>

		Error_Handler();
 800076a:	f000 f81b 	bl	80007a4 <Error_Handler>

	}

}
 800076e:	bf00      	nop
 8000770:	3750      	adds	r7, #80	; 0x50
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40023800 	.word	0x40023800
 800077c:	40007000 	.word	0x40007000

08000780 <HAL_TIM_PeriodElapsedCallback>:

* @retval None

*/

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]

	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */

	if (htim->Instance == TIM6) {
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a04      	ldr	r2, [pc, #16]	; (80007a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d101      	bne.n	8000796 <HAL_TIM_PeriodElapsedCallback+0x16>

		HAL_IncTick();
 8000792:	f000 f99d 	bl	8000ad0 <HAL_IncTick>

	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */

}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40001000 	.word	0x40001000

080007a4 <Error_Handler>:

* @retval None

*/

void Error_Handler(void) {
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a8:	b672      	cpsid	i
}
 80007aa:	bf00      	nop

	/* User can add his own implementation to report the HAL error return state */

	__disable_irq();

	while (1) {
 80007ac:	e7fe      	b.n	80007ac <Error_Handler+0x8>
	...

080007b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <HAL_MspInit+0x4c>)
 80007bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007be:	4a0f      	ldr	r2, [pc, #60]	; (80007fc <HAL_MspInit+0x4c>)
 80007c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007c4:	6453      	str	r3, [r2, #68]	; 0x44
 80007c6:	4b0d      	ldr	r3, [pc, #52]	; (80007fc <HAL_MspInit+0x4c>)
 80007c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	603b      	str	r3, [r7, #0]
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <HAL_MspInit+0x4c>)
 80007d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007da:	4a08      	ldr	r2, [pc, #32]	; (80007fc <HAL_MspInit+0x4c>)
 80007dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e0:	6413      	str	r3, [r2, #64]	; 0x40
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <HAL_MspInit+0x4c>)
 80007e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ee:	bf00      	nop
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	40023800 	.word	0x40023800

08000800 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08e      	sub	sp, #56	; 0x38
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000808:	2300      	movs	r3, #0
 800080a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800080c:	2300      	movs	r3, #0
 800080e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000810:	2300      	movs	r3, #0
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	4b33      	ldr	r3, [pc, #204]	; (80008e4 <HAL_InitTick+0xe4>)
 8000816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000818:	4a32      	ldr	r2, [pc, #200]	; (80008e4 <HAL_InitTick+0xe4>)
 800081a:	f043 0310 	orr.w	r3, r3, #16
 800081e:	6413      	str	r3, [r2, #64]	; 0x40
 8000820:	4b30      	ldr	r3, [pc, #192]	; (80008e4 <HAL_InitTick+0xe4>)
 8000822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000824:	f003 0310 	and.w	r3, r3, #16
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800082c:	f107 0210 	add.w	r2, r7, #16
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	4611      	mov	r1, r2
 8000836:	4618      	mov	r0, r3
 8000838:	f000 fe90 	bl	800155c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800083c:	6a3b      	ldr	r3, [r7, #32]
 800083e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000842:	2b00      	cmp	r3, #0
 8000844:	d103      	bne.n	800084e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000846:	f000 fe75 	bl	8001534 <HAL_RCC_GetPCLK1Freq>
 800084a:	6378      	str	r0, [r7, #52]	; 0x34
 800084c:	e004      	b.n	8000858 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800084e:	f000 fe71 	bl	8001534 <HAL_RCC_GetPCLK1Freq>
 8000852:	4603      	mov	r3, r0
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800085a:	4a23      	ldr	r2, [pc, #140]	; (80008e8 <HAL_InitTick+0xe8>)
 800085c:	fba2 2303 	umull	r2, r3, r2, r3
 8000860:	0c9b      	lsrs	r3, r3, #18
 8000862:	3b01      	subs	r3, #1
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000866:	4b21      	ldr	r3, [pc, #132]	; (80008ec <HAL_InitTick+0xec>)
 8000868:	4a21      	ldr	r2, [pc, #132]	; (80008f0 <HAL_InitTick+0xf0>)
 800086a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800086c:	4b1f      	ldr	r3, [pc, #124]	; (80008ec <HAL_InitTick+0xec>)
 800086e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000872:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000874:	4a1d      	ldr	r2, [pc, #116]	; (80008ec <HAL_InitTick+0xec>)
 8000876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000878:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800087a:	4b1c      	ldr	r3, [pc, #112]	; (80008ec <HAL_InitTick+0xec>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000880:	4b1a      	ldr	r3, [pc, #104]	; (80008ec <HAL_InitTick+0xec>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000886:	4b19      	ldr	r3, [pc, #100]	; (80008ec <HAL_InitTick+0xec>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800088c:	4817      	ldr	r0, [pc, #92]	; (80008ec <HAL_InitTick+0xec>)
 800088e:	f000 fe97 	bl	80015c0 <HAL_TIM_Base_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000898:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800089c:	2b00      	cmp	r3, #0
 800089e:	d11b      	bne.n	80008d8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80008a0:	4812      	ldr	r0, [pc, #72]	; (80008ec <HAL_InitTick+0xec>)
 80008a2:	f000 fee7 	bl	8001674 <HAL_TIM_Base_Start_IT>
 80008a6:	4603      	mov	r3, r0
 80008a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80008ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d111      	bne.n	80008d8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80008b4:	2036      	movs	r0, #54	; 0x36
 80008b6:	f000 f9ff 	bl	8000cb8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	2b0f      	cmp	r3, #15
 80008be:	d808      	bhi.n	80008d2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80008c0:	2200      	movs	r2, #0
 80008c2:	6879      	ldr	r1, [r7, #4]
 80008c4:	2036      	movs	r0, #54	; 0x36
 80008c6:	f000 f9db 	bl	8000c80 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008ca:	4a0a      	ldr	r2, [pc, #40]	; (80008f4 <HAL_InitTick+0xf4>)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	6013      	str	r3, [r2, #0]
 80008d0:	e002      	b.n	80008d8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80008d2:	2301      	movs	r3, #1
 80008d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80008d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3738      	adds	r7, #56	; 0x38
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40023800 	.word	0x40023800
 80008e8:	431bde83 	.word	0x431bde83
 80008ec:	200000c8 	.word	0x200000c8
 80008f0:	40001000 	.word	0x40001000
 80008f4:	20000004 	.word	0x20000004

080008f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008fc:	e7fe      	b.n	80008fc <NMI_Handler+0x4>

080008fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000902:	e7fe      	b.n	8000902 <HardFault_Handler+0x4>

08000904 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000908:	e7fe      	b.n	8000908 <MemManage_Handler+0x4>

0800090a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800090e:	e7fe      	b.n	800090e <BusFault_Handler+0x4>

08000910 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000914:	e7fe      	b.n	8000914 <UsageFault_Handler+0x4>

08000916 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000928:	4802      	ldr	r0, [pc, #8]	; (8000934 <TIM6_DAC_IRQHandler+0x10>)
 800092a:	f000 ff13 	bl	8001754 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	200000c8 	.word	0x200000c8

08000938 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]
 8000948:	e00a      	b.n	8000960 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800094a:	f3af 8000 	nop.w
 800094e:	4601      	mov	r1, r0
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	1c5a      	adds	r2, r3, #1
 8000954:	60ba      	str	r2, [r7, #8]
 8000956:	b2ca      	uxtb	r2, r1
 8000958:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	3301      	adds	r3, #1
 800095e:	617b      	str	r3, [r7, #20]
 8000960:	697a      	ldr	r2, [r7, #20]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	429a      	cmp	r2, r3
 8000966:	dbf0      	blt.n	800094a <_read+0x12>
  }

  return len;
 8000968:	687b      	ldr	r3, [r7, #4]
}
 800096a:	4618      	mov	r0, r3
 800096c:	3718      	adds	r7, #24
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	b086      	sub	sp, #24
 8000976:	af00      	add	r7, sp, #0
 8000978:	60f8      	str	r0, [r7, #12]
 800097a:	60b9      	str	r1, [r7, #8]
 800097c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800097e:	2300      	movs	r3, #0
 8000980:	617b      	str	r3, [r7, #20]
 8000982:	e009      	b.n	8000998 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	1c5a      	adds	r2, r3, #1
 8000988:	60ba      	str	r2, [r7, #8]
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	4618      	mov	r0, r3
 800098e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	3301      	adds	r3, #1
 8000996:	617b      	str	r3, [r7, #20]
 8000998:	697a      	ldr	r2, [r7, #20]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	429a      	cmp	r2, r3
 800099e:	dbf1      	blt.n	8000984 <_write+0x12>
  }
  return len;
 80009a0:	687b      	ldr	r3, [r7, #4]
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3718      	adds	r7, #24
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}

080009aa <_close>:

int _close(int file)
{
 80009aa:	b480      	push	{r7}
 80009ac:	b083      	sub	sp, #12
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr

080009c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009c2:	b480      	push	{r7}
 80009c4:	b083      	sub	sp, #12
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	6078      	str	r0, [r7, #4]
 80009ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009d2:	605a      	str	r2, [r3, #4]
  return 0;
 80009d4:	2300      	movs	r3, #0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr

080009e2 <_isatty>:

int _isatty(int file)
{
 80009e2:	b480      	push	{r7}
 80009e4:	b083      	sub	sp, #12
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009ea:	2301      	movs	r3, #1
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	60b9      	str	r1, [r7, #8]
 8000a02:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a04:	2300      	movs	r3, #0
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3714      	adds	r7, #20
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
	...

08000a14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <SystemInit+0x20>)
 8000a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a1e:	4a05      	ldr	r2, [pc, #20]	; (8000a34 <SystemInit+0x20>)
 8000a20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a3c:	480d      	ldr	r0, [pc, #52]	; (8000a74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a3e:	490e      	ldr	r1, [pc, #56]	; (8000a78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a40:	4a0e      	ldr	r2, [pc, #56]	; (8000a7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a44:	e002      	b.n	8000a4c <LoopCopyDataInit>

08000a46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a4a:	3304      	adds	r3, #4

08000a4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a50:	d3f9      	bcc.n	8000a46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a52:	4a0b      	ldr	r2, [pc, #44]	; (8000a80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a54:	4c0b      	ldr	r4, [pc, #44]	; (8000a84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a58:	e001      	b.n	8000a5e <LoopFillZerobss>

08000a5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a5c:	3204      	adds	r2, #4

08000a5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a60:	d3fb      	bcc.n	8000a5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a62:	f7ff ffd7 	bl	8000a14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a66:	f003 fbf5 	bl	8004254 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a6a:	f7ff fdcf 	bl	800060c <main>
  bx  lr    
 8000a6e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a78:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000a7c:	08005430 	.word	0x08005430
  ldr r2, =_sbss
 8000a80:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000a84:	20012ecc 	.word	0x20012ecc

08000a88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a88:	e7fe      	b.n	8000a88 <ADC_IRQHandler>
	...

08000a8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a90:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <HAL_Init+0x40>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a0d      	ldr	r2, [pc, #52]	; (8000acc <HAL_Init+0x40>)
 8000a96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a9c:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <HAL_Init+0x40>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a0a      	ldr	r2, [pc, #40]	; (8000acc <HAL_Init+0x40>)
 8000aa2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aa6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aa8:	4b08      	ldr	r3, [pc, #32]	; (8000acc <HAL_Init+0x40>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a07      	ldr	r2, [pc, #28]	; (8000acc <HAL_Init+0x40>)
 8000aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ab2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab4:	2003      	movs	r0, #3
 8000ab6:	f000 f8d8 	bl	8000c6a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aba:	200f      	movs	r0, #15
 8000abc:	f7ff fea0 	bl	8000800 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ac0:	f7ff fe76 	bl	80007b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ac4:	2300      	movs	r3, #0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40023c00 	.word	0x40023c00

08000ad0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <HAL_IncTick+0x20>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <HAL_IncTick+0x24>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4413      	add	r3, r2
 8000ae0:	4a04      	ldr	r2, [pc, #16]	; (8000af4 <HAL_IncTick+0x24>)
 8000ae2:	6013      	str	r3, [r2, #0]
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	20000008 	.word	0x20000008
 8000af4:	20000110 	.word	0x20000110

08000af8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  return uwTick;
 8000afc:	4b03      	ldr	r3, [pc, #12]	; (8000b0c <HAL_GetTick+0x14>)
 8000afe:	681b      	ldr	r3, [r3, #0]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	20000110 	.word	0x20000110

08000b10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f003 0307 	and.w	r3, r3, #7
 8000b1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b20:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <__NVIC_SetPriorityGrouping+0x44>)
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b26:	68ba      	ldr	r2, [r7, #8]
 8000b28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b42:	4a04      	ldr	r2, [pc, #16]	; (8000b54 <__NVIC_SetPriorityGrouping+0x44>)
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	60d3      	str	r3, [r2, #12]
}
 8000b48:	bf00      	nop
 8000b4a:	3714      	adds	r7, #20
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b5c:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <__NVIC_GetPriorityGrouping+0x18>)
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	0a1b      	lsrs	r3, r3, #8
 8000b62:	f003 0307 	and.w	r3, r3, #7
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	db0b      	blt.n	8000b9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	f003 021f 	and.w	r2, r3, #31
 8000b8c:	4907      	ldr	r1, [pc, #28]	; (8000bac <__NVIC_EnableIRQ+0x38>)
 8000b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b92:	095b      	lsrs	r3, r3, #5
 8000b94:	2001      	movs	r0, #1
 8000b96:	fa00 f202 	lsl.w	r2, r0, r2
 8000b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b9e:	bf00      	nop
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	e000e100 	.word	0xe000e100

08000bb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	6039      	str	r1, [r7, #0]
 8000bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	db0a      	blt.n	8000bda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	490c      	ldr	r1, [pc, #48]	; (8000bfc <__NVIC_SetPriority+0x4c>)
 8000bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bce:	0112      	lsls	r2, r2, #4
 8000bd0:	b2d2      	uxtb	r2, r2
 8000bd2:	440b      	add	r3, r1
 8000bd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bd8:	e00a      	b.n	8000bf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	4908      	ldr	r1, [pc, #32]	; (8000c00 <__NVIC_SetPriority+0x50>)
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	f003 030f 	and.w	r3, r3, #15
 8000be6:	3b04      	subs	r3, #4
 8000be8:	0112      	lsls	r2, r2, #4
 8000bea:	b2d2      	uxtb	r2, r2
 8000bec:	440b      	add	r3, r1
 8000bee:	761a      	strb	r2, [r3, #24]
}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	e000e100 	.word	0xe000e100
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b089      	sub	sp, #36	; 0x24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	f003 0307 	and.w	r3, r3, #7
 8000c16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c18:	69fb      	ldr	r3, [r7, #28]
 8000c1a:	f1c3 0307 	rsb	r3, r3, #7
 8000c1e:	2b04      	cmp	r3, #4
 8000c20:	bf28      	it	cs
 8000c22:	2304      	movcs	r3, #4
 8000c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	3304      	adds	r3, #4
 8000c2a:	2b06      	cmp	r3, #6
 8000c2c:	d902      	bls.n	8000c34 <NVIC_EncodePriority+0x30>
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	3b03      	subs	r3, #3
 8000c32:	e000      	b.n	8000c36 <NVIC_EncodePriority+0x32>
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c38:	f04f 32ff 	mov.w	r2, #4294967295
 8000c3c:	69bb      	ldr	r3, [r7, #24]
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	43da      	mvns	r2, r3
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	401a      	ands	r2, r3
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	fa01 f303 	lsl.w	r3, r1, r3
 8000c56:	43d9      	mvns	r1, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c5c:	4313      	orrs	r3, r2
         );
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3724      	adds	r7, #36	; 0x24
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr

08000c6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f7ff ff4c 	bl	8000b10 <__NVIC_SetPriorityGrouping>
}
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
 8000c8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c92:	f7ff ff61 	bl	8000b58 <__NVIC_GetPriorityGrouping>
 8000c96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	68b9      	ldr	r1, [r7, #8]
 8000c9c:	6978      	ldr	r0, [r7, #20]
 8000c9e:	f7ff ffb1 	bl	8000c04 <NVIC_EncodePriority>
 8000ca2:	4602      	mov	r2, r0
 8000ca4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ca8:	4611      	mov	r1, r2
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff ff80 	bl	8000bb0 <__NVIC_SetPriority>
}
 8000cb0:	bf00      	nop
 8000cb2:	3718      	adds	r7, #24
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff ff54 	bl	8000b74 <__NVIC_EnableIRQ>
}
 8000ccc:	bf00      	nop
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d101      	bne.n	8000ce6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e267      	b.n	80011b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d075      	beq.n	8000dde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000cf2:	4b88      	ldr	r3, [pc, #544]	; (8000f14 <HAL_RCC_OscConfig+0x240>)
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	f003 030c 	and.w	r3, r3, #12
 8000cfa:	2b04      	cmp	r3, #4
 8000cfc:	d00c      	beq.n	8000d18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000cfe:	4b85      	ldr	r3, [pc, #532]	; (8000f14 <HAL_RCC_OscConfig+0x240>)
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000d06:	2b08      	cmp	r3, #8
 8000d08:	d112      	bne.n	8000d30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d0a:	4b82      	ldr	r3, [pc, #520]	; (8000f14 <HAL_RCC_OscConfig+0x240>)
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000d16:	d10b      	bne.n	8000d30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d18:	4b7e      	ldr	r3, [pc, #504]	; (8000f14 <HAL_RCC_OscConfig+0x240>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d05b      	beq.n	8000ddc <HAL_RCC_OscConfig+0x108>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d157      	bne.n	8000ddc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	e242      	b.n	80011b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d38:	d106      	bne.n	8000d48 <HAL_RCC_OscConfig+0x74>
 8000d3a:	4b76      	ldr	r3, [pc, #472]	; (8000f14 <HAL_RCC_OscConfig+0x240>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a75      	ldr	r2, [pc, #468]	; (8000f14 <HAL_RCC_OscConfig+0x240>)
 8000d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d44:	6013      	str	r3, [r2, #0]
 8000d46:	e01d      	b.n	8000d84 <HAL_RCC_OscConfig+0xb0>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d50:	d10c      	bne.n	8000d6c <HAL_RCC_OscConfig+0x98>
 8000d52:	4b70      	ldr	r3, [pc, #448]	; (8000f14 <HAL_RCC_OscConfig+0x240>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a6f      	ldr	r2, [pc, #444]	; (8000f14 <HAL_RCC_OscConfig+0x240>)
 8000d58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d5c:	6013      	str	r3, [r2, #0]
 8000d5e:	4b6d      	ldr	r3, [pc, #436]	; (8000f14 <HAL_RCC_OscConfig+0x240>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a6c      	ldr	r2, [pc, #432]	; (8000f14 <HAL_RCC_OscConfig+0x240>)
 8000d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d68:	6013      	str	r3, [r2, #0]
 8000d6a:	e00b      	b.n	8000d84 <HAL_RCC_OscConfig+0xb0>
 8000d6c:	4b69      	ldr	r3, [pc, #420]	; (8000f14 <HAL_RCC_OscConfig+0x240>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a68      	ldr	r2, [pc, #416]	; (8000f14 <HAL_RCC_OscConfig+0x240>)
 8000d72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d76:	6013      	str	r3, [r2, #0]
 8000d78:	4b66      	ldr	r3, [pc, #408]	; (8000f14 <HAL_RCC_OscConfig+0x240>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a65      	ldr	r2, [pc, #404]	; (8000f14 <HAL_RCC_OscConfig+0x240>)
 8000d7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d013      	beq.n	8000db4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d8c:	f7ff feb4 	bl	8000af8 <HAL_GetTick>
 8000d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d92:	e008      	b.n	8000da6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d94:	f7ff feb0 	bl	8000af8 <HAL_GetTick>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	2b64      	cmp	r3, #100	; 0x64
 8000da0:	d901      	bls.n	8000da6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000da2:	2303      	movs	r3, #3
 8000da4:	e207      	b.n	80011b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000da6:	4b5b      	ldr	r3, [pc, #364]	; (8000f14 <HAL_RCC_OscConfig+0x240>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d0f0      	beq.n	8000d94 <HAL_RCC_OscConfig+0xc0>
 8000db2:	e014      	b.n	8000dde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000db4:	f7ff fea0 	bl	8000af8 <HAL_GetTick>
 8000db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dba:	e008      	b.n	8000dce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dbc:	f7ff fe9c 	bl	8000af8 <HAL_GetTick>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	2b64      	cmp	r3, #100	; 0x64
 8000dc8:	d901      	bls.n	8000dce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	e1f3      	b.n	80011b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dce:	4b51      	ldr	r3, [pc, #324]	; (8000f14 <HAL_RCC_OscConfig+0x240>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d1f0      	bne.n	8000dbc <HAL_RCC_OscConfig+0xe8>
 8000dda:	e000      	b.n	8000dde <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ddc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f003 0302 	and.w	r3, r3, #2
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d063      	beq.n	8000eb2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000dea:	4b4a      	ldr	r3, [pc, #296]	; (8000f14 <HAL_RCC_OscConfig+0x240>)
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	f003 030c 	and.w	r3, r3, #12
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d00b      	beq.n	8000e0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000df6:	4b47      	ldr	r3, [pc, #284]	; (8000f14 <HAL_RCC_OscConfig+0x240>)
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000dfe:	2b08      	cmp	r3, #8
 8000e00:	d11c      	bne.n	8000e3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e02:	4b44      	ldr	r3, [pc, #272]	; (8000f14 <HAL_RCC_OscConfig+0x240>)
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d116      	bne.n	8000e3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e0e:	4b41      	ldr	r3, [pc, #260]	; (8000f14 <HAL_RCC_OscConfig+0x240>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f003 0302 	and.w	r3, r3, #2
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d005      	beq.n	8000e26 <HAL_RCC_OscConfig+0x152>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	68db      	ldr	r3, [r3, #12]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d001      	beq.n	8000e26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	e1c7      	b.n	80011b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e26:	4b3b      	ldr	r3, [pc, #236]	; (8000f14 <HAL_RCC_OscConfig+0x240>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	691b      	ldr	r3, [r3, #16]
 8000e32:	00db      	lsls	r3, r3, #3
 8000e34:	4937      	ldr	r1, [pc, #220]	; (8000f14 <HAL_RCC_OscConfig+0x240>)
 8000e36:	4313      	orrs	r3, r2
 8000e38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e3a:	e03a      	b.n	8000eb2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d020      	beq.n	8000e86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e44:	4b34      	ldr	r3, [pc, #208]	; (8000f18 <HAL_RCC_OscConfig+0x244>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e4a:	f7ff fe55 	bl	8000af8 <HAL_GetTick>
 8000e4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e50:	e008      	b.n	8000e64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e52:	f7ff fe51 	bl	8000af8 <HAL_GetTick>
 8000e56:	4602      	mov	r2, r0
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	1ad3      	subs	r3, r2, r3
 8000e5c:	2b02      	cmp	r3, #2
 8000e5e:	d901      	bls.n	8000e64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000e60:	2303      	movs	r3, #3
 8000e62:	e1a8      	b.n	80011b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e64:	4b2b      	ldr	r3, [pc, #172]	; (8000f14 <HAL_RCC_OscConfig+0x240>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f003 0302 	and.w	r3, r3, #2
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d0f0      	beq.n	8000e52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e70:	4b28      	ldr	r3, [pc, #160]	; (8000f14 <HAL_RCC_OscConfig+0x240>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	691b      	ldr	r3, [r3, #16]
 8000e7c:	00db      	lsls	r3, r3, #3
 8000e7e:	4925      	ldr	r1, [pc, #148]	; (8000f14 <HAL_RCC_OscConfig+0x240>)
 8000e80:	4313      	orrs	r3, r2
 8000e82:	600b      	str	r3, [r1, #0]
 8000e84:	e015      	b.n	8000eb2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e86:	4b24      	ldr	r3, [pc, #144]	; (8000f18 <HAL_RCC_OscConfig+0x244>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e8c:	f7ff fe34 	bl	8000af8 <HAL_GetTick>
 8000e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e92:	e008      	b.n	8000ea6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e94:	f7ff fe30 	bl	8000af8 <HAL_GetTick>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	d901      	bls.n	8000ea6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	e187      	b.n	80011b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ea6:	4b1b      	ldr	r3, [pc, #108]	; (8000f14 <HAL_RCC_OscConfig+0x240>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f003 0302 	and.w	r3, r3, #2
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d1f0      	bne.n	8000e94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f003 0308 	and.w	r3, r3, #8
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d036      	beq.n	8000f2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	695b      	ldr	r3, [r3, #20]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d016      	beq.n	8000ef4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ec6:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <HAL_RCC_OscConfig+0x248>)
 8000ec8:	2201      	movs	r2, #1
 8000eca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ecc:	f7ff fe14 	bl	8000af8 <HAL_GetTick>
 8000ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ed2:	e008      	b.n	8000ee6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ed4:	f7ff fe10 	bl	8000af8 <HAL_GetTick>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d901      	bls.n	8000ee6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	e167      	b.n	80011b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ee6:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <HAL_RCC_OscConfig+0x240>)
 8000ee8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000eea:	f003 0302 	and.w	r3, r3, #2
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d0f0      	beq.n	8000ed4 <HAL_RCC_OscConfig+0x200>
 8000ef2:	e01b      	b.n	8000f2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ef4:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <HAL_RCC_OscConfig+0x248>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000efa:	f7ff fdfd 	bl	8000af8 <HAL_GetTick>
 8000efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f00:	e00e      	b.n	8000f20 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f02:	f7ff fdf9 	bl	8000af8 <HAL_GetTick>
 8000f06:	4602      	mov	r2, r0
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d907      	bls.n	8000f20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000f10:	2303      	movs	r3, #3
 8000f12:	e150      	b.n	80011b6 <HAL_RCC_OscConfig+0x4e2>
 8000f14:	40023800 	.word	0x40023800
 8000f18:	42470000 	.word	0x42470000
 8000f1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f20:	4b88      	ldr	r3, [pc, #544]	; (8001144 <HAL_RCC_OscConfig+0x470>)
 8000f22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f24:	f003 0302 	and.w	r3, r3, #2
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d1ea      	bne.n	8000f02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f003 0304 	and.w	r3, r3, #4
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	f000 8097 	beq.w	8001068 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f3e:	4b81      	ldr	r3, [pc, #516]	; (8001144 <HAL_RCC_OscConfig+0x470>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d10f      	bne.n	8000f6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60bb      	str	r3, [r7, #8]
 8000f4e:	4b7d      	ldr	r3, [pc, #500]	; (8001144 <HAL_RCC_OscConfig+0x470>)
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f52:	4a7c      	ldr	r2, [pc, #496]	; (8001144 <HAL_RCC_OscConfig+0x470>)
 8000f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f58:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5a:	4b7a      	ldr	r3, [pc, #488]	; (8001144 <HAL_RCC_OscConfig+0x470>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f66:	2301      	movs	r3, #1
 8000f68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f6a:	4b77      	ldr	r3, [pc, #476]	; (8001148 <HAL_RCC_OscConfig+0x474>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d118      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f76:	4b74      	ldr	r3, [pc, #464]	; (8001148 <HAL_RCC_OscConfig+0x474>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a73      	ldr	r2, [pc, #460]	; (8001148 <HAL_RCC_OscConfig+0x474>)
 8000f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f82:	f7ff fdb9 	bl	8000af8 <HAL_GetTick>
 8000f86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f88:	e008      	b.n	8000f9c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f8a:	f7ff fdb5 	bl	8000af8 <HAL_GetTick>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d901      	bls.n	8000f9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	e10c      	b.n	80011b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f9c:	4b6a      	ldr	r3, [pc, #424]	; (8001148 <HAL_RCC_OscConfig+0x474>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d0f0      	beq.n	8000f8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d106      	bne.n	8000fbe <HAL_RCC_OscConfig+0x2ea>
 8000fb0:	4b64      	ldr	r3, [pc, #400]	; (8001144 <HAL_RCC_OscConfig+0x470>)
 8000fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fb4:	4a63      	ldr	r2, [pc, #396]	; (8001144 <HAL_RCC_OscConfig+0x470>)
 8000fb6:	f043 0301 	orr.w	r3, r3, #1
 8000fba:	6713      	str	r3, [r2, #112]	; 0x70
 8000fbc:	e01c      	b.n	8000ff8 <HAL_RCC_OscConfig+0x324>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	2b05      	cmp	r3, #5
 8000fc4:	d10c      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x30c>
 8000fc6:	4b5f      	ldr	r3, [pc, #380]	; (8001144 <HAL_RCC_OscConfig+0x470>)
 8000fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fca:	4a5e      	ldr	r2, [pc, #376]	; (8001144 <HAL_RCC_OscConfig+0x470>)
 8000fcc:	f043 0304 	orr.w	r3, r3, #4
 8000fd0:	6713      	str	r3, [r2, #112]	; 0x70
 8000fd2:	4b5c      	ldr	r3, [pc, #368]	; (8001144 <HAL_RCC_OscConfig+0x470>)
 8000fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fd6:	4a5b      	ldr	r2, [pc, #364]	; (8001144 <HAL_RCC_OscConfig+0x470>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	6713      	str	r3, [r2, #112]	; 0x70
 8000fde:	e00b      	b.n	8000ff8 <HAL_RCC_OscConfig+0x324>
 8000fe0:	4b58      	ldr	r3, [pc, #352]	; (8001144 <HAL_RCC_OscConfig+0x470>)
 8000fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fe4:	4a57      	ldr	r2, [pc, #348]	; (8001144 <HAL_RCC_OscConfig+0x470>)
 8000fe6:	f023 0301 	bic.w	r3, r3, #1
 8000fea:	6713      	str	r3, [r2, #112]	; 0x70
 8000fec:	4b55      	ldr	r3, [pc, #340]	; (8001144 <HAL_RCC_OscConfig+0x470>)
 8000fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ff0:	4a54      	ldr	r2, [pc, #336]	; (8001144 <HAL_RCC_OscConfig+0x470>)
 8000ff2:	f023 0304 	bic.w	r3, r3, #4
 8000ff6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d015      	beq.n	800102c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001000:	f7ff fd7a 	bl	8000af8 <HAL_GetTick>
 8001004:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001006:	e00a      	b.n	800101e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001008:	f7ff fd76 	bl	8000af8 <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	f241 3288 	movw	r2, #5000	; 0x1388
 8001016:	4293      	cmp	r3, r2
 8001018:	d901      	bls.n	800101e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800101a:	2303      	movs	r3, #3
 800101c:	e0cb      	b.n	80011b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800101e:	4b49      	ldr	r3, [pc, #292]	; (8001144 <HAL_RCC_OscConfig+0x470>)
 8001020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001022:	f003 0302 	and.w	r3, r3, #2
 8001026:	2b00      	cmp	r3, #0
 8001028:	d0ee      	beq.n	8001008 <HAL_RCC_OscConfig+0x334>
 800102a:	e014      	b.n	8001056 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800102c:	f7ff fd64 	bl	8000af8 <HAL_GetTick>
 8001030:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001032:	e00a      	b.n	800104a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001034:	f7ff fd60 	bl	8000af8 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001042:	4293      	cmp	r3, r2
 8001044:	d901      	bls.n	800104a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001046:	2303      	movs	r3, #3
 8001048:	e0b5      	b.n	80011b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800104a:	4b3e      	ldr	r3, [pc, #248]	; (8001144 <HAL_RCC_OscConfig+0x470>)
 800104c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	2b00      	cmp	r3, #0
 8001054:	d1ee      	bne.n	8001034 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001056:	7dfb      	ldrb	r3, [r7, #23]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d105      	bne.n	8001068 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800105c:	4b39      	ldr	r3, [pc, #228]	; (8001144 <HAL_RCC_OscConfig+0x470>)
 800105e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001060:	4a38      	ldr	r2, [pc, #224]	; (8001144 <HAL_RCC_OscConfig+0x470>)
 8001062:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001066:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	2b00      	cmp	r3, #0
 800106e:	f000 80a1 	beq.w	80011b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001072:	4b34      	ldr	r3, [pc, #208]	; (8001144 <HAL_RCC_OscConfig+0x470>)
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	f003 030c 	and.w	r3, r3, #12
 800107a:	2b08      	cmp	r3, #8
 800107c:	d05c      	beq.n	8001138 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	699b      	ldr	r3, [r3, #24]
 8001082:	2b02      	cmp	r3, #2
 8001084:	d141      	bne.n	800110a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001086:	4b31      	ldr	r3, [pc, #196]	; (800114c <HAL_RCC_OscConfig+0x478>)
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800108c:	f7ff fd34 	bl	8000af8 <HAL_GetTick>
 8001090:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001092:	e008      	b.n	80010a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001094:	f7ff fd30 	bl	8000af8 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d901      	bls.n	80010a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80010a2:	2303      	movs	r3, #3
 80010a4:	e087      	b.n	80011b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010a6:	4b27      	ldr	r3, [pc, #156]	; (8001144 <HAL_RCC_OscConfig+0x470>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d1f0      	bne.n	8001094 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	69da      	ldr	r2, [r3, #28]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6a1b      	ldr	r3, [r3, #32]
 80010ba:	431a      	orrs	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c0:	019b      	lsls	r3, r3, #6
 80010c2:	431a      	orrs	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c8:	085b      	lsrs	r3, r3, #1
 80010ca:	3b01      	subs	r3, #1
 80010cc:	041b      	lsls	r3, r3, #16
 80010ce:	431a      	orrs	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d4:	061b      	lsls	r3, r3, #24
 80010d6:	491b      	ldr	r1, [pc, #108]	; (8001144 <HAL_RCC_OscConfig+0x470>)
 80010d8:	4313      	orrs	r3, r2
 80010da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010dc:	4b1b      	ldr	r3, [pc, #108]	; (800114c <HAL_RCC_OscConfig+0x478>)
 80010de:	2201      	movs	r2, #1
 80010e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e2:	f7ff fd09 	bl	8000af8 <HAL_GetTick>
 80010e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010e8:	e008      	b.n	80010fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010ea:	f7ff fd05 	bl	8000af8 <HAL_GetTick>
 80010ee:	4602      	mov	r2, r0
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d901      	bls.n	80010fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80010f8:	2303      	movs	r3, #3
 80010fa:	e05c      	b.n	80011b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010fc:	4b11      	ldr	r3, [pc, #68]	; (8001144 <HAL_RCC_OscConfig+0x470>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d0f0      	beq.n	80010ea <HAL_RCC_OscConfig+0x416>
 8001108:	e054      	b.n	80011b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800110a:	4b10      	ldr	r3, [pc, #64]	; (800114c <HAL_RCC_OscConfig+0x478>)
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001110:	f7ff fcf2 	bl	8000af8 <HAL_GetTick>
 8001114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001116:	e008      	b.n	800112a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001118:	f7ff fcee 	bl	8000af8 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b02      	cmp	r3, #2
 8001124:	d901      	bls.n	800112a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001126:	2303      	movs	r3, #3
 8001128:	e045      	b.n	80011b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <HAL_RCC_OscConfig+0x470>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d1f0      	bne.n	8001118 <HAL_RCC_OscConfig+0x444>
 8001136:	e03d      	b.n	80011b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d107      	bne.n	8001150 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	e038      	b.n	80011b6 <HAL_RCC_OscConfig+0x4e2>
 8001144:	40023800 	.word	0x40023800
 8001148:	40007000 	.word	0x40007000
 800114c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001150:	4b1b      	ldr	r3, [pc, #108]	; (80011c0 <HAL_RCC_OscConfig+0x4ec>)
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d028      	beq.n	80011b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001168:	429a      	cmp	r2, r3
 800116a:	d121      	bne.n	80011b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001176:	429a      	cmp	r2, r3
 8001178:	d11a      	bne.n	80011b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001180:	4013      	ands	r3, r2
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001186:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001188:	4293      	cmp	r3, r2
 800118a:	d111      	bne.n	80011b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001196:	085b      	lsrs	r3, r3, #1
 8001198:	3b01      	subs	r3, #1
 800119a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800119c:	429a      	cmp	r2, r3
 800119e:	d107      	bne.n	80011b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d001      	beq.n	80011b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e000      	b.n	80011b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3718      	adds	r7, #24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40023800 	.word	0x40023800

080011c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d101      	bne.n	80011d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e0cc      	b.n	8001372 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80011d8:	4b68      	ldr	r3, [pc, #416]	; (800137c <HAL_RCC_ClockConfig+0x1b8>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 0307 	and.w	r3, r3, #7
 80011e0:	683a      	ldr	r2, [r7, #0]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d90c      	bls.n	8001200 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011e6:	4b65      	ldr	r3, [pc, #404]	; (800137c <HAL_RCC_ClockConfig+0x1b8>)
 80011e8:	683a      	ldr	r2, [r7, #0]
 80011ea:	b2d2      	uxtb	r2, r2
 80011ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ee:	4b63      	ldr	r3, [pc, #396]	; (800137c <HAL_RCC_ClockConfig+0x1b8>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	683a      	ldr	r2, [r7, #0]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d001      	beq.n	8001200 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e0b8      	b.n	8001372 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0302 	and.w	r3, r3, #2
 8001208:	2b00      	cmp	r3, #0
 800120a:	d020      	beq.n	800124e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0304 	and.w	r3, r3, #4
 8001214:	2b00      	cmp	r3, #0
 8001216:	d005      	beq.n	8001224 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001218:	4b59      	ldr	r3, [pc, #356]	; (8001380 <HAL_RCC_ClockConfig+0x1bc>)
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	4a58      	ldr	r2, [pc, #352]	; (8001380 <HAL_RCC_ClockConfig+0x1bc>)
 800121e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001222:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0308 	and.w	r3, r3, #8
 800122c:	2b00      	cmp	r3, #0
 800122e:	d005      	beq.n	800123c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001230:	4b53      	ldr	r3, [pc, #332]	; (8001380 <HAL_RCC_ClockConfig+0x1bc>)
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	4a52      	ldr	r2, [pc, #328]	; (8001380 <HAL_RCC_ClockConfig+0x1bc>)
 8001236:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800123a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800123c:	4b50      	ldr	r3, [pc, #320]	; (8001380 <HAL_RCC_ClockConfig+0x1bc>)
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	494d      	ldr	r1, [pc, #308]	; (8001380 <HAL_RCC_ClockConfig+0x1bc>)
 800124a:	4313      	orrs	r3, r2
 800124c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	2b00      	cmp	r3, #0
 8001258:	d044      	beq.n	80012e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	2b01      	cmp	r3, #1
 8001260:	d107      	bne.n	8001272 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001262:	4b47      	ldr	r3, [pc, #284]	; (8001380 <HAL_RCC_ClockConfig+0x1bc>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d119      	bne.n	80012a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e07f      	b.n	8001372 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	2b02      	cmp	r3, #2
 8001278:	d003      	beq.n	8001282 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800127e:	2b03      	cmp	r3, #3
 8001280:	d107      	bne.n	8001292 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001282:	4b3f      	ldr	r3, [pc, #252]	; (8001380 <HAL_RCC_ClockConfig+0x1bc>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d109      	bne.n	80012a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e06f      	b.n	8001372 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001292:	4b3b      	ldr	r3, [pc, #236]	; (8001380 <HAL_RCC_ClockConfig+0x1bc>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d101      	bne.n	80012a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e067      	b.n	8001372 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012a2:	4b37      	ldr	r3, [pc, #220]	; (8001380 <HAL_RCC_ClockConfig+0x1bc>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f023 0203 	bic.w	r2, r3, #3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	4934      	ldr	r1, [pc, #208]	; (8001380 <HAL_RCC_ClockConfig+0x1bc>)
 80012b0:	4313      	orrs	r3, r2
 80012b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012b4:	f7ff fc20 	bl	8000af8 <HAL_GetTick>
 80012b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ba:	e00a      	b.n	80012d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012bc:	f7ff fc1c 	bl	8000af8 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e04f      	b.n	8001372 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012d2:	4b2b      	ldr	r3, [pc, #172]	; (8001380 <HAL_RCC_ClockConfig+0x1bc>)
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f003 020c 	and.w	r2, r3, #12
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d1eb      	bne.n	80012bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012e4:	4b25      	ldr	r3, [pc, #148]	; (800137c <HAL_RCC_ClockConfig+0x1b8>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0307 	and.w	r3, r3, #7
 80012ec:	683a      	ldr	r2, [r7, #0]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d20c      	bcs.n	800130c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012f2:	4b22      	ldr	r3, [pc, #136]	; (800137c <HAL_RCC_ClockConfig+0x1b8>)
 80012f4:	683a      	ldr	r2, [r7, #0]
 80012f6:	b2d2      	uxtb	r2, r2
 80012f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012fa:	4b20      	ldr	r3, [pc, #128]	; (800137c <HAL_RCC_ClockConfig+0x1b8>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	683a      	ldr	r2, [r7, #0]
 8001304:	429a      	cmp	r2, r3
 8001306:	d001      	beq.n	800130c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	e032      	b.n	8001372 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0304 	and.w	r3, r3, #4
 8001314:	2b00      	cmp	r3, #0
 8001316:	d008      	beq.n	800132a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001318:	4b19      	ldr	r3, [pc, #100]	; (8001380 <HAL_RCC_ClockConfig+0x1bc>)
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	4916      	ldr	r1, [pc, #88]	; (8001380 <HAL_RCC_ClockConfig+0x1bc>)
 8001326:	4313      	orrs	r3, r2
 8001328:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0308 	and.w	r3, r3, #8
 8001332:	2b00      	cmp	r3, #0
 8001334:	d009      	beq.n	800134a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001336:	4b12      	ldr	r3, [pc, #72]	; (8001380 <HAL_RCC_ClockConfig+0x1bc>)
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	490e      	ldr	r1, [pc, #56]	; (8001380 <HAL_RCC_ClockConfig+0x1bc>)
 8001346:	4313      	orrs	r3, r2
 8001348:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800134a:	f000 f821 	bl	8001390 <HAL_RCC_GetSysClockFreq>
 800134e:	4602      	mov	r2, r0
 8001350:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <HAL_RCC_ClockConfig+0x1bc>)
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	091b      	lsrs	r3, r3, #4
 8001356:	f003 030f 	and.w	r3, r3, #15
 800135a:	490a      	ldr	r1, [pc, #40]	; (8001384 <HAL_RCC_ClockConfig+0x1c0>)
 800135c:	5ccb      	ldrb	r3, [r1, r3]
 800135e:	fa22 f303 	lsr.w	r3, r2, r3
 8001362:	4a09      	ldr	r2, [pc, #36]	; (8001388 <HAL_RCC_ClockConfig+0x1c4>)
 8001364:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001366:	4b09      	ldr	r3, [pc, #36]	; (800138c <HAL_RCC_ClockConfig+0x1c8>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff fa48 	bl	8000800 <HAL_InitTick>

  return HAL_OK;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40023c00 	.word	0x40023c00
 8001380:	40023800 	.word	0x40023800
 8001384:	08005370 	.word	0x08005370
 8001388:	20000000 	.word	0x20000000
 800138c:	20000004 	.word	0x20000004

08001390 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001390:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001394:	b090      	sub	sp, #64	; 0x40
 8001396:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001398:	2300      	movs	r3, #0
 800139a:	637b      	str	r3, [r7, #52]	; 0x34
 800139c:	2300      	movs	r3, #0
 800139e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80013a0:	2300      	movs	r3, #0
 80013a2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80013a4:	2300      	movs	r3, #0
 80013a6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013a8:	4b59      	ldr	r3, [pc, #356]	; (8001510 <HAL_RCC_GetSysClockFreq+0x180>)
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	f003 030c 	and.w	r3, r3, #12
 80013b0:	2b08      	cmp	r3, #8
 80013b2:	d00d      	beq.n	80013d0 <HAL_RCC_GetSysClockFreq+0x40>
 80013b4:	2b08      	cmp	r3, #8
 80013b6:	f200 80a1 	bhi.w	80014fc <HAL_RCC_GetSysClockFreq+0x16c>
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d002      	beq.n	80013c4 <HAL_RCC_GetSysClockFreq+0x34>
 80013be:	2b04      	cmp	r3, #4
 80013c0:	d003      	beq.n	80013ca <HAL_RCC_GetSysClockFreq+0x3a>
 80013c2:	e09b      	b.n	80014fc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80013c4:	4b53      	ldr	r3, [pc, #332]	; (8001514 <HAL_RCC_GetSysClockFreq+0x184>)
 80013c6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80013c8:	e09b      	b.n	8001502 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80013ca:	4b53      	ldr	r3, [pc, #332]	; (8001518 <HAL_RCC_GetSysClockFreq+0x188>)
 80013cc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80013ce:	e098      	b.n	8001502 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013d0:	4b4f      	ldr	r3, [pc, #316]	; (8001510 <HAL_RCC_GetSysClockFreq+0x180>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80013d8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013da:	4b4d      	ldr	r3, [pc, #308]	; (8001510 <HAL_RCC_GetSysClockFreq+0x180>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d028      	beq.n	8001438 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013e6:	4b4a      	ldr	r3, [pc, #296]	; (8001510 <HAL_RCC_GetSysClockFreq+0x180>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	099b      	lsrs	r3, r3, #6
 80013ec:	2200      	movs	r2, #0
 80013ee:	623b      	str	r3, [r7, #32]
 80013f0:	627a      	str	r2, [r7, #36]	; 0x24
 80013f2:	6a3b      	ldr	r3, [r7, #32]
 80013f4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80013f8:	2100      	movs	r1, #0
 80013fa:	4b47      	ldr	r3, [pc, #284]	; (8001518 <HAL_RCC_GetSysClockFreq+0x188>)
 80013fc:	fb03 f201 	mul.w	r2, r3, r1
 8001400:	2300      	movs	r3, #0
 8001402:	fb00 f303 	mul.w	r3, r0, r3
 8001406:	4413      	add	r3, r2
 8001408:	4a43      	ldr	r2, [pc, #268]	; (8001518 <HAL_RCC_GetSysClockFreq+0x188>)
 800140a:	fba0 1202 	umull	r1, r2, r0, r2
 800140e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001410:	460a      	mov	r2, r1
 8001412:	62ba      	str	r2, [r7, #40]	; 0x28
 8001414:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001416:	4413      	add	r3, r2
 8001418:	62fb      	str	r3, [r7, #44]	; 0x2c
 800141a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800141c:	2200      	movs	r2, #0
 800141e:	61bb      	str	r3, [r7, #24]
 8001420:	61fa      	str	r2, [r7, #28]
 8001422:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001426:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800142a:	f7fe ff21 	bl	8000270 <__aeabi_uldivmod>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	4613      	mov	r3, r2
 8001434:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001436:	e053      	b.n	80014e0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001438:	4b35      	ldr	r3, [pc, #212]	; (8001510 <HAL_RCC_GetSysClockFreq+0x180>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	099b      	lsrs	r3, r3, #6
 800143e:	2200      	movs	r2, #0
 8001440:	613b      	str	r3, [r7, #16]
 8001442:	617a      	str	r2, [r7, #20]
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800144a:	f04f 0b00 	mov.w	fp, #0
 800144e:	4652      	mov	r2, sl
 8001450:	465b      	mov	r3, fp
 8001452:	f04f 0000 	mov.w	r0, #0
 8001456:	f04f 0100 	mov.w	r1, #0
 800145a:	0159      	lsls	r1, r3, #5
 800145c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001460:	0150      	lsls	r0, r2, #5
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	ebb2 080a 	subs.w	r8, r2, sl
 800146a:	eb63 090b 	sbc.w	r9, r3, fp
 800146e:	f04f 0200 	mov.w	r2, #0
 8001472:	f04f 0300 	mov.w	r3, #0
 8001476:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800147a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800147e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001482:	ebb2 0408 	subs.w	r4, r2, r8
 8001486:	eb63 0509 	sbc.w	r5, r3, r9
 800148a:	f04f 0200 	mov.w	r2, #0
 800148e:	f04f 0300 	mov.w	r3, #0
 8001492:	00eb      	lsls	r3, r5, #3
 8001494:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001498:	00e2      	lsls	r2, r4, #3
 800149a:	4614      	mov	r4, r2
 800149c:	461d      	mov	r5, r3
 800149e:	eb14 030a 	adds.w	r3, r4, sl
 80014a2:	603b      	str	r3, [r7, #0]
 80014a4:	eb45 030b 	adc.w	r3, r5, fp
 80014a8:	607b      	str	r3, [r7, #4]
 80014aa:	f04f 0200 	mov.w	r2, #0
 80014ae:	f04f 0300 	mov.w	r3, #0
 80014b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80014b6:	4629      	mov	r1, r5
 80014b8:	028b      	lsls	r3, r1, #10
 80014ba:	4621      	mov	r1, r4
 80014bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80014c0:	4621      	mov	r1, r4
 80014c2:	028a      	lsls	r2, r1, #10
 80014c4:	4610      	mov	r0, r2
 80014c6:	4619      	mov	r1, r3
 80014c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014ca:	2200      	movs	r2, #0
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	60fa      	str	r2, [r7, #12]
 80014d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80014d4:	f7fe fecc 	bl	8000270 <__aeabi_uldivmod>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	4613      	mov	r3, r2
 80014de:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80014e0:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <HAL_RCC_GetSysClockFreq+0x180>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	0c1b      	lsrs	r3, r3, #16
 80014e6:	f003 0303 	and.w	r3, r3, #3
 80014ea:	3301      	adds	r3, #1
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80014f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80014f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80014f8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80014fa:	e002      	b.n	8001502 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80014fc:	4b05      	ldr	r3, [pc, #20]	; (8001514 <HAL_RCC_GetSysClockFreq+0x184>)
 80014fe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001500:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001504:	4618      	mov	r0, r3
 8001506:	3740      	adds	r7, #64	; 0x40
 8001508:	46bd      	mov	sp, r7
 800150a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800150e:	bf00      	nop
 8001510:	40023800 	.word	0x40023800
 8001514:	00f42400 	.word	0x00f42400
 8001518:	017d7840 	.word	0x017d7840

0800151c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001520:	4b03      	ldr	r3, [pc, #12]	; (8001530 <HAL_RCC_GetHCLKFreq+0x14>)
 8001522:	681b      	ldr	r3, [r3, #0]
}
 8001524:	4618      	mov	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	20000000 	.word	0x20000000

08001534 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001538:	f7ff fff0 	bl	800151c <HAL_RCC_GetHCLKFreq>
 800153c:	4602      	mov	r2, r0
 800153e:	4b05      	ldr	r3, [pc, #20]	; (8001554 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	0a9b      	lsrs	r3, r3, #10
 8001544:	f003 0307 	and.w	r3, r3, #7
 8001548:	4903      	ldr	r1, [pc, #12]	; (8001558 <HAL_RCC_GetPCLK1Freq+0x24>)
 800154a:	5ccb      	ldrb	r3, [r1, r3]
 800154c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001550:	4618      	mov	r0, r3
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40023800 	.word	0x40023800
 8001558:	08005380 	.word	0x08005380

0800155c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	220f      	movs	r2, #15
 800156a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800156c:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <HAL_RCC_GetClockConfig+0x5c>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f003 0203 	and.w	r2, r3, #3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001578:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <HAL_RCC_GetClockConfig+0x5c>)
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001584:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <HAL_RCC_GetClockConfig+0x5c>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001590:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <HAL_RCC_GetClockConfig+0x5c>)
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	08db      	lsrs	r3, r3, #3
 8001596:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800159e:	4b07      	ldr	r3, [pc, #28]	; (80015bc <HAL_RCC_GetClockConfig+0x60>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0207 	and.w	r2, r3, #7
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	601a      	str	r2, [r3, #0]
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40023c00 	.word	0x40023c00

080015c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d101      	bne.n	80015d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e041      	b.n	8001656 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d106      	bne.n	80015ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 f839 	bl	800165e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2202      	movs	r2, #2
 80015f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3304      	adds	r3, #4
 80015fc:	4619      	mov	r1, r3
 80015fe:	4610      	mov	r0, r2
 8001600:	f000 f9d8 	bl	80019b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2201      	movs	r2, #1
 8001608:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2201      	movs	r2, #1
 8001610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2201      	movs	r2, #1
 8001618:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2201      	movs	r2, #1
 8001620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2201      	movs	r2, #1
 8001628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2201      	movs	r2, #1
 8001630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2201      	movs	r2, #1
 8001638:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2201      	movs	r2, #1
 8001640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2201      	movs	r2, #1
 8001648:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2201      	movs	r2, #1
 8001650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800165e:	b480      	push	{r7}
 8001660:	b083      	sub	sp, #12
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001666:	bf00      	nop
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
	...

08001674 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001682:	b2db      	uxtb	r3, r3
 8001684:	2b01      	cmp	r3, #1
 8001686:	d001      	beq.n	800168c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e04e      	b.n	800172a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2202      	movs	r2, #2
 8001690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	68da      	ldr	r2, [r3, #12]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f042 0201 	orr.w	r2, r2, #1
 80016a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a23      	ldr	r2, [pc, #140]	; (8001738 <HAL_TIM_Base_Start_IT+0xc4>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d022      	beq.n	80016f4 <HAL_TIM_Base_Start_IT+0x80>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016b6:	d01d      	beq.n	80016f4 <HAL_TIM_Base_Start_IT+0x80>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a1f      	ldr	r2, [pc, #124]	; (800173c <HAL_TIM_Base_Start_IT+0xc8>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d018      	beq.n	80016f4 <HAL_TIM_Base_Start_IT+0x80>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a1e      	ldr	r2, [pc, #120]	; (8001740 <HAL_TIM_Base_Start_IT+0xcc>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d013      	beq.n	80016f4 <HAL_TIM_Base_Start_IT+0x80>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a1c      	ldr	r2, [pc, #112]	; (8001744 <HAL_TIM_Base_Start_IT+0xd0>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d00e      	beq.n	80016f4 <HAL_TIM_Base_Start_IT+0x80>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a1b      	ldr	r2, [pc, #108]	; (8001748 <HAL_TIM_Base_Start_IT+0xd4>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d009      	beq.n	80016f4 <HAL_TIM_Base_Start_IT+0x80>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a19      	ldr	r2, [pc, #100]	; (800174c <HAL_TIM_Base_Start_IT+0xd8>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d004      	beq.n	80016f4 <HAL_TIM_Base_Start_IT+0x80>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a18      	ldr	r2, [pc, #96]	; (8001750 <HAL_TIM_Base_Start_IT+0xdc>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d111      	bne.n	8001718 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2b06      	cmp	r3, #6
 8001704:	d010      	beq.n	8001728 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f042 0201 	orr.w	r2, r2, #1
 8001714:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001716:	e007      	b.n	8001728 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f042 0201 	orr.w	r2, r2, #1
 8001726:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3714      	adds	r7, #20
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	40010000 	.word	0x40010000
 800173c:	40000400 	.word	0x40000400
 8001740:	40000800 	.word	0x40000800
 8001744:	40000c00 	.word	0x40000c00
 8001748:	40010400 	.word	0x40010400
 800174c:	40014000 	.word	0x40014000
 8001750:	40001800 	.word	0x40001800

08001754 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	691b      	ldr	r3, [r3, #16]
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b02      	cmp	r3, #2
 8001768:	d122      	bne.n	80017b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b02      	cmp	r3, #2
 8001776:	d11b      	bne.n	80017b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f06f 0202 	mvn.w	r2, #2
 8001780:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2201      	movs	r2, #1
 8001786:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	f003 0303 	and.w	r3, r3, #3
 8001792:	2b00      	cmp	r3, #0
 8001794:	d003      	beq.n	800179e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f000 f8ee 	bl	8001978 <HAL_TIM_IC_CaptureCallback>
 800179c:	e005      	b.n	80017aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f000 f8e0 	bl	8001964 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f000 f8f1 	bl	800198c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	f003 0304 	and.w	r3, r3, #4
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	d122      	bne.n	8001804 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	2b04      	cmp	r3, #4
 80017ca:	d11b      	bne.n	8001804 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f06f 0204 	mvn.w	r2, #4
 80017d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2202      	movs	r2, #2
 80017da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d003      	beq.n	80017f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 f8c4 	bl	8001978 <HAL_TIM_IC_CaptureCallback>
 80017f0:	e005      	b.n	80017fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 f8b6 	bl	8001964 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f000 f8c7 	bl	800198c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	691b      	ldr	r3, [r3, #16]
 800180a:	f003 0308 	and.w	r3, r3, #8
 800180e:	2b08      	cmp	r3, #8
 8001810:	d122      	bne.n	8001858 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	f003 0308 	and.w	r3, r3, #8
 800181c:	2b08      	cmp	r3, #8
 800181e:	d11b      	bne.n	8001858 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f06f 0208 	mvn.w	r2, #8
 8001828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2204      	movs	r2, #4
 800182e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	f003 0303 	and.w	r3, r3, #3
 800183a:	2b00      	cmp	r3, #0
 800183c:	d003      	beq.n	8001846 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 f89a 	bl	8001978 <HAL_TIM_IC_CaptureCallback>
 8001844:	e005      	b.n	8001852 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f000 f88c 	bl	8001964 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f000 f89d 	bl	800198c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	691b      	ldr	r3, [r3, #16]
 800185e:	f003 0310 	and.w	r3, r3, #16
 8001862:	2b10      	cmp	r3, #16
 8001864:	d122      	bne.n	80018ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	f003 0310 	and.w	r3, r3, #16
 8001870:	2b10      	cmp	r3, #16
 8001872:	d11b      	bne.n	80018ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f06f 0210 	mvn.w	r2, #16
 800187c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2208      	movs	r2, #8
 8001882:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800188e:	2b00      	cmp	r3, #0
 8001890:	d003      	beq.n	800189a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f000 f870 	bl	8001978 <HAL_TIM_IC_CaptureCallback>
 8001898:	e005      	b.n	80018a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f000 f862 	bl	8001964 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f000 f873 	bl	800198c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d10e      	bne.n	80018d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d107      	bne.n	80018d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f06f 0201 	mvn.w	r2, #1
 80018d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f7fe ff54 	bl	8000780 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018e2:	2b80      	cmp	r3, #128	; 0x80
 80018e4:	d10e      	bne.n	8001904 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018f0:	2b80      	cmp	r3, #128	; 0x80
 80018f2:	d107      	bne.n	8001904 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80018fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f000 f902 	bl	8001b08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800190e:	2b40      	cmp	r3, #64	; 0x40
 8001910:	d10e      	bne.n	8001930 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800191c:	2b40      	cmp	r3, #64	; 0x40
 800191e:	d107      	bne.n	8001930 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f000 f838 	bl	80019a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	691b      	ldr	r3, [r3, #16]
 8001936:	f003 0320 	and.w	r3, r3, #32
 800193a:	2b20      	cmp	r3, #32
 800193c:	d10e      	bne.n	800195c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	f003 0320 	and.w	r3, r3, #32
 8001948:	2b20      	cmp	r3, #32
 800194a:	d107      	bne.n	800195c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f06f 0220 	mvn.w	r2, #32
 8001954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f000 f8cc 	bl	8001af4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800195c:	bf00      	nop
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a40      	ldr	r2, [pc, #256]	; (8001ac8 <TIM_Base_SetConfig+0x114>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d013      	beq.n	80019f4 <TIM_Base_SetConfig+0x40>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019d2:	d00f      	beq.n	80019f4 <TIM_Base_SetConfig+0x40>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4a3d      	ldr	r2, [pc, #244]	; (8001acc <TIM_Base_SetConfig+0x118>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d00b      	beq.n	80019f4 <TIM_Base_SetConfig+0x40>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a3c      	ldr	r2, [pc, #240]	; (8001ad0 <TIM_Base_SetConfig+0x11c>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d007      	beq.n	80019f4 <TIM_Base_SetConfig+0x40>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a3b      	ldr	r2, [pc, #236]	; (8001ad4 <TIM_Base_SetConfig+0x120>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d003      	beq.n	80019f4 <TIM_Base_SetConfig+0x40>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a3a      	ldr	r2, [pc, #232]	; (8001ad8 <TIM_Base_SetConfig+0x124>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d108      	bne.n	8001a06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	68fa      	ldr	r2, [r7, #12]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a2f      	ldr	r2, [pc, #188]	; (8001ac8 <TIM_Base_SetConfig+0x114>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d02b      	beq.n	8001a66 <TIM_Base_SetConfig+0xb2>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a14:	d027      	beq.n	8001a66 <TIM_Base_SetConfig+0xb2>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a2c      	ldr	r2, [pc, #176]	; (8001acc <TIM_Base_SetConfig+0x118>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d023      	beq.n	8001a66 <TIM_Base_SetConfig+0xb2>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a2b      	ldr	r2, [pc, #172]	; (8001ad0 <TIM_Base_SetConfig+0x11c>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d01f      	beq.n	8001a66 <TIM_Base_SetConfig+0xb2>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a2a      	ldr	r2, [pc, #168]	; (8001ad4 <TIM_Base_SetConfig+0x120>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d01b      	beq.n	8001a66 <TIM_Base_SetConfig+0xb2>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a29      	ldr	r2, [pc, #164]	; (8001ad8 <TIM_Base_SetConfig+0x124>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d017      	beq.n	8001a66 <TIM_Base_SetConfig+0xb2>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a28      	ldr	r2, [pc, #160]	; (8001adc <TIM_Base_SetConfig+0x128>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d013      	beq.n	8001a66 <TIM_Base_SetConfig+0xb2>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a27      	ldr	r2, [pc, #156]	; (8001ae0 <TIM_Base_SetConfig+0x12c>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d00f      	beq.n	8001a66 <TIM_Base_SetConfig+0xb2>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a26      	ldr	r2, [pc, #152]	; (8001ae4 <TIM_Base_SetConfig+0x130>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d00b      	beq.n	8001a66 <TIM_Base_SetConfig+0xb2>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a25      	ldr	r2, [pc, #148]	; (8001ae8 <TIM_Base_SetConfig+0x134>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d007      	beq.n	8001a66 <TIM_Base_SetConfig+0xb2>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a24      	ldr	r2, [pc, #144]	; (8001aec <TIM_Base_SetConfig+0x138>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d003      	beq.n	8001a66 <TIM_Base_SetConfig+0xb2>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a23      	ldr	r2, [pc, #140]	; (8001af0 <TIM_Base_SetConfig+0x13c>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d108      	bne.n	8001a78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	68fa      	ldr	r2, [r7, #12]
 8001a8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4a0a      	ldr	r2, [pc, #40]	; (8001ac8 <TIM_Base_SetConfig+0x114>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d003      	beq.n	8001aac <TIM_Base_SetConfig+0xf8>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4a0c      	ldr	r2, [pc, #48]	; (8001ad8 <TIM_Base_SetConfig+0x124>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d103      	bne.n	8001ab4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	691a      	ldr	r2, [r3, #16]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	615a      	str	r2, [r3, #20]
}
 8001aba:	bf00      	nop
 8001abc:	3714      	adds	r7, #20
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	40010000 	.word	0x40010000
 8001acc:	40000400 	.word	0x40000400
 8001ad0:	40000800 	.word	0x40000800
 8001ad4:	40000c00 	.word	0x40000c00
 8001ad8:	40010400 	.word	0x40010400
 8001adc:	40014000 	.word	0x40014000
 8001ae0:	40014400 	.word	0x40014400
 8001ae4:	40014800 	.word	0x40014800
 8001ae8:	40001800 	.word	0x40001800
 8001aec:	40001c00 	.word	0x40001c00
 8001af0:	40002000 	.word	0x40002000

08001af4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f103 0208 	add.w	r2, r3, #8
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f04f 32ff 	mov.w	r2, #4294967295
 8001b34:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f103 0208 	add.w	r2, r3, #8
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f103 0208 	add.w	r2, r3, #8
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001b76:	b480      	push	{r7}
 8001b78:	b085      	sub	sp, #20
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
 8001b7e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b8c:	d103      	bne.n	8001b96 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	e00c      	b.n	8001bb0 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	3308      	adds	r3, #8
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	e002      	b.n	8001ba4 <vListInsert+0x2e>
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	68ba      	ldr	r2, [r7, #8]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d2f6      	bcs.n	8001b9e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	685a      	ldr	r2, [r3, #4]
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	68fa      	ldr	r2, [r7, #12]
 8001bc4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	1c5a      	adds	r2, r3, #1
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	601a      	str	r2, [r3, #0]
}
 8001bdc:	bf00      	nop
 8001bde:	3714      	adds	r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	6892      	ldr	r2, [r2, #8]
 8001bfe:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	6852      	ldr	r2, [r2, #4]
 8001c08:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d103      	bne.n	8001c1c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	1e5a      	subs	r2, r3, #1
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3714      	adds	r7, #20
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8001c46:	2301      	movs	r3, #1
 8001c48:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d10a      	bne.n	8001c6a <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c58:	f383 8811 	msr	BASEPRI, r3
 8001c5c:	f3bf 8f6f 	isb	sy
 8001c60:	f3bf 8f4f 	dsb	sy
 8001c64:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8001c66:	bf00      	nop
 8001c68:	e7fe      	b.n	8001c68 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d05d      	beq.n	8001d2c <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d059      	beq.n	8001d2c <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c80:	2100      	movs	r1, #0
 8001c82:	fba3 2302 	umull	r2, r3, r3, r2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d000      	beq.n	8001c8c <xQueueGenericReset+0x50>
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d14c      	bne.n	8001d2c <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8001c92:	f002 f831 	bl	8003cf8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c9e:	6939      	ldr	r1, [r7, #16]
 8001ca0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001ca2:	fb01 f303 	mul.w	r3, r1, r3
 8001ca6:	441a      	add	r2, r3
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	6939      	ldr	r1, [r7, #16]
 8001cc6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001cc8:	fb01 f303 	mul.w	r3, r1, r3
 8001ccc:	441a      	add	r2, r3
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	22ff      	movs	r2, #255	; 0xff
 8001cd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	22ff      	movs	r2, #255	; 0xff
 8001cde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d114      	bne.n	8001d12 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	691b      	ldr	r3, [r3, #16]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d01a      	beq.n	8001d26 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	3310      	adds	r3, #16
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f001 f8f9 	bl	8002eec <xTaskRemoveFromEventList>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d012      	beq.n	8001d26 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001d00:	4b15      	ldr	r3, [pc, #84]	; (8001d58 <xQueueGenericReset+0x11c>)
 8001d02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	f3bf 8f4f 	dsb	sy
 8001d0c:	f3bf 8f6f 	isb	sy
 8001d10:	e009      	b.n	8001d26 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	3310      	adds	r3, #16
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff ff00 	bl	8001b1c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	3324      	adds	r3, #36	; 0x24
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff fefb 	bl	8001b1c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8001d26:	f002 f817 	bl	8003d58 <vPortExitCritical>
 8001d2a:	e001      	b.n	8001d30 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d10a      	bne.n	8001d4c <xQueueGenericReset+0x110>
        __asm volatile
 8001d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d3a:	f383 8811 	msr	BASEPRI, r3
 8001d3e:	f3bf 8f6f 	isb	sy
 8001d42:	f3bf 8f4f 	dsb	sy
 8001d46:	60bb      	str	r3, [r7, #8]
    }
 8001d48:	bf00      	nop
 8001d4a:	e7fe      	b.n	8001d4a <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8001d4c:	697b      	ldr	r3, [r7, #20]
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3718      	adds	r7, #24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	e000ed04 	.word	0xe000ed04

08001d5c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b08a      	sub	sp, #40	; 0x28
 8001d60:	af02      	add	r7, sp, #8
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	4613      	mov	r3, r2
 8001d68:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d02e      	beq.n	8001dd2 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001d74:	2100      	movs	r1, #0
 8001d76:	68ba      	ldr	r2, [r7, #8]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	fba3 2302 	umull	r2, r3, r3, r2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d000      	beq.n	8001d84 <xQueueGenericCreate+0x28>
 8001d82:	2101      	movs	r1, #1
 8001d84:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d123      	bne.n	8001dd2 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	68ba      	ldr	r2, [r7, #8]
 8001d8e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001d92:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8001d96:	d81c      	bhi.n	8001dd2 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	68ba      	ldr	r2, [r7, #8]
 8001d9c:	fb02 f303 	mul.w	r3, r2, r3
 8001da0:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	3350      	adds	r3, #80	; 0x50
 8001da6:	4618      	mov	r0, r3
 8001da8:	f002 f888 	bl	8003ebc <pvPortMalloc>
 8001dac:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d01c      	beq.n	8001dee <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	3350      	adds	r3, #80	; 0x50
 8001dbc:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001dbe:	79fa      	ldrb	r2, [r7, #7]
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	697a      	ldr	r2, [r7, #20]
 8001dc8:	68b9      	ldr	r1, [r7, #8]
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f000 f814 	bl	8001df8 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8001dd0:	e00d      	b.n	8001dee <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d10a      	bne.n	8001dee <xQueueGenericCreate+0x92>
        __asm volatile
 8001dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ddc:	f383 8811 	msr	BASEPRI, r3
 8001de0:	f3bf 8f6f 	isb	sy
 8001de4:	f3bf 8f4f 	dsb	sy
 8001de8:	613b      	str	r3, [r7, #16]
    }
 8001dea:	bf00      	nop
 8001dec:	e7fe      	b.n	8001dec <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001dee:	69fb      	ldr	r3, [r7, #28]
    }
 8001df0:	4618      	mov	r0, r3
 8001df2:	3720      	adds	r7, #32
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
 8001e04:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d103      	bne.n	8001e14 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	e002      	b.n	8001e1a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	68ba      	ldr	r2, [r7, #8]
 8001e24:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001e26:	2101      	movs	r1, #1
 8001e28:	69b8      	ldr	r0, [r7, #24]
 8001e2a:	f7ff ff07 	bl	8001c3c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	78fa      	ldrb	r2, [r7, #3]
 8001e32:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8001e36:	bf00      	nop
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
	...

08001e40 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b08e      	sub	sp, #56	; 0x38
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
 8001e4c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8001e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d10a      	bne.n	8001e72 <xQueueGenericSend+0x32>
        __asm volatile
 8001e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e60:	f383 8811 	msr	BASEPRI, r3
 8001e64:	f3bf 8f6f 	isb	sy
 8001e68:	f3bf 8f4f 	dsb	sy
 8001e6c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8001e6e:	bf00      	nop
 8001e70:	e7fe      	b.n	8001e70 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d103      	bne.n	8001e80 <xQueueGenericSend+0x40>
 8001e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d101      	bne.n	8001e84 <xQueueGenericSend+0x44>
 8001e80:	2301      	movs	r3, #1
 8001e82:	e000      	b.n	8001e86 <xQueueGenericSend+0x46>
 8001e84:	2300      	movs	r3, #0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d10a      	bne.n	8001ea0 <xQueueGenericSend+0x60>
        __asm volatile
 8001e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e8e:	f383 8811 	msr	BASEPRI, r3
 8001e92:	f3bf 8f6f 	isb	sy
 8001e96:	f3bf 8f4f 	dsb	sy
 8001e9a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8001e9c:	bf00      	nop
 8001e9e:	e7fe      	b.n	8001e9e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d103      	bne.n	8001eae <xQueueGenericSend+0x6e>
 8001ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d101      	bne.n	8001eb2 <xQueueGenericSend+0x72>
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e000      	b.n	8001eb4 <xQueueGenericSend+0x74>
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d10a      	bne.n	8001ece <xQueueGenericSend+0x8e>
        __asm volatile
 8001eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ebc:	f383 8811 	msr	BASEPRI, r3
 8001ec0:	f3bf 8f6f 	isb	sy
 8001ec4:	f3bf 8f4f 	dsb	sy
 8001ec8:	623b      	str	r3, [r7, #32]
    }
 8001eca:	bf00      	nop
 8001ecc:	e7fe      	b.n	8001ecc <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001ece:	f001 fa1d 	bl	800330c <xTaskGetSchedulerState>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d102      	bne.n	8001ede <xQueueGenericSend+0x9e>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <xQueueGenericSend+0xa2>
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e000      	b.n	8001ee4 <xQueueGenericSend+0xa4>
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d10a      	bne.n	8001efe <xQueueGenericSend+0xbe>
        __asm volatile
 8001ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eec:	f383 8811 	msr	BASEPRI, r3
 8001ef0:	f3bf 8f6f 	isb	sy
 8001ef4:	f3bf 8f4f 	dsb	sy
 8001ef8:	61fb      	str	r3, [r7, #28]
    }
 8001efa:	bf00      	nop
 8001efc:	e7fe      	b.n	8001efc <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001efe:	f001 fefb 	bl	8003cf8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d302      	bcc.n	8001f14 <xQueueGenericSend+0xd4>
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d129      	bne.n	8001f68 <xQueueGenericSend+0x128>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	68b9      	ldr	r1, [r7, #8]
 8001f18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f1a:	f000 f96f 	bl	80021fc <prvCopyDataToQueue>
 8001f1e:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d010      	beq.n	8001f4a <xQueueGenericSend+0x10a>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f2a:	3324      	adds	r3, #36	; 0x24
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f000 ffdd 	bl	8002eec <xTaskRemoveFromEventList>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d013      	beq.n	8001f60 <xQueueGenericSend+0x120>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8001f38:	4b3f      	ldr	r3, [pc, #252]	; (8002038 <xQueueGenericSend+0x1f8>)
 8001f3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	f3bf 8f4f 	dsb	sy
 8001f44:	f3bf 8f6f 	isb	sy
 8001f48:	e00a      	b.n	8001f60 <xQueueGenericSend+0x120>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8001f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d007      	beq.n	8001f60 <xQueueGenericSend+0x120>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8001f50:	4b39      	ldr	r3, [pc, #228]	; (8002038 <xQueueGenericSend+0x1f8>)
 8001f52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	f3bf 8f4f 	dsb	sy
 8001f5c:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8001f60:	f001 fefa 	bl	8003d58 <vPortExitCritical>
                return pdPASS;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e063      	b.n	8002030 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d103      	bne.n	8001f76 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001f6e:	f001 fef3 	bl	8003d58 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	e05c      	b.n	8002030 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d106      	bne.n	8001f8a <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001f7c:	f107 0314 	add.w	r3, r7, #20
 8001f80:	4618      	mov	r0, r3
 8001f82:	f001 f889 	bl	8003098 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001f86:	2301      	movs	r3, #1
 8001f88:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001f8a:	f001 fee5 	bl	8003d58 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001f8e:	f000 fcb7 	bl	8002900 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001f92:	f001 feb1 	bl	8003cf8 <vPortEnterCritical>
 8001f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f9c:	b25b      	sxtb	r3, r3
 8001f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa2:	d103      	bne.n	8001fac <xQueueGenericSend+0x16c>
 8001fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001fb2:	b25b      	sxtb	r3, r3
 8001fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb8:	d103      	bne.n	8001fc2 <xQueueGenericSend+0x182>
 8001fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001fc2:	f001 fec9 	bl	8003d58 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001fc6:	1d3a      	adds	r2, r7, #4
 8001fc8:	f107 0314 	add.w	r3, r7, #20
 8001fcc:	4611      	mov	r1, r2
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f001 f878 	bl	80030c4 <xTaskCheckForTimeOut>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d124      	bne.n	8002024 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001fda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001fdc:	f000 fa06 	bl	80023ec <prvIsQueueFull>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d018      	beq.n	8002018 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe8:	3310      	adds	r3, #16
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	4611      	mov	r1, r2
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f000 ff12 	bl	8002e18 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8001ff4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ff6:	f000 f991 	bl	800231c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8001ffa:	f000 fc8f 	bl	800291c <xTaskResumeAll>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	f47f af7c 	bne.w	8001efe <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002006:	4b0c      	ldr	r3, [pc, #48]	; (8002038 <xQueueGenericSend+0x1f8>)
 8002008:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	f3bf 8f4f 	dsb	sy
 8002012:	f3bf 8f6f 	isb	sy
 8002016:	e772      	b.n	8001efe <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002018:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800201a:	f000 f97f 	bl	800231c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800201e:	f000 fc7d 	bl	800291c <xTaskResumeAll>
 8002022:	e76c      	b.n	8001efe <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002024:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002026:	f000 f979 	bl	800231c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800202a:	f000 fc77 	bl	800291c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800202e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002030:	4618      	mov	r0, r3
 8002032:	3738      	adds	r7, #56	; 0x38
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	e000ed04 	.word	0xe000ed04

0800203c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b08c      	sub	sp, #48	; 0x30
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002048:	2300      	movs	r3, #0
 800204a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002052:	2b00      	cmp	r3, #0
 8002054:	d10a      	bne.n	800206c <xQueueReceive+0x30>
        __asm volatile
 8002056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800205a:	f383 8811 	msr	BASEPRI, r3
 800205e:	f3bf 8f6f 	isb	sy
 8002062:	f3bf 8f4f 	dsb	sy
 8002066:	623b      	str	r3, [r7, #32]
    }
 8002068:	bf00      	nop
 800206a:	e7fe      	b.n	800206a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d103      	bne.n	800207a <xQueueReceive+0x3e>
 8002072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <xQueueReceive+0x42>
 800207a:	2301      	movs	r3, #1
 800207c:	e000      	b.n	8002080 <xQueueReceive+0x44>
 800207e:	2300      	movs	r3, #0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d10a      	bne.n	800209a <xQueueReceive+0x5e>
        __asm volatile
 8002084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002088:	f383 8811 	msr	BASEPRI, r3
 800208c:	f3bf 8f6f 	isb	sy
 8002090:	f3bf 8f4f 	dsb	sy
 8002094:	61fb      	str	r3, [r7, #28]
    }
 8002096:	bf00      	nop
 8002098:	e7fe      	b.n	8002098 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800209a:	f001 f937 	bl	800330c <xTaskGetSchedulerState>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d102      	bne.n	80020aa <xQueueReceive+0x6e>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <xQueueReceive+0x72>
 80020aa:	2301      	movs	r3, #1
 80020ac:	e000      	b.n	80020b0 <xQueueReceive+0x74>
 80020ae:	2300      	movs	r3, #0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d10a      	bne.n	80020ca <xQueueReceive+0x8e>
        __asm volatile
 80020b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020b8:	f383 8811 	msr	BASEPRI, r3
 80020bc:	f3bf 8f6f 	isb	sy
 80020c0:	f3bf 8f4f 	dsb	sy
 80020c4:	61bb      	str	r3, [r7, #24]
    }
 80020c6:	bf00      	nop
 80020c8:	e7fe      	b.n	80020c8 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80020ca:	f001 fe15 	bl	8003cf8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80020ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80020d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d01f      	beq.n	800211a <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80020da:	68b9      	ldr	r1, [r7, #8]
 80020dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80020de:	f000 f8f7 	bl	80022d0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80020e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e4:	1e5a      	subs	r2, r3, #1
 80020e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020e8:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80020ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00f      	beq.n	8002112 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80020f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f4:	3310      	adds	r3, #16
 80020f6:	4618      	mov	r0, r3
 80020f8:	f000 fef8 	bl	8002eec <xTaskRemoveFromEventList>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d007      	beq.n	8002112 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002102:	4b3d      	ldr	r3, [pc, #244]	; (80021f8 <xQueueReceive+0x1bc>)
 8002104:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	f3bf 8f4f 	dsb	sy
 800210e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002112:	f001 fe21 	bl	8003d58 <vPortExitCritical>
                return pdPASS;
 8002116:	2301      	movs	r3, #1
 8002118:	e069      	b.n	80021ee <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d103      	bne.n	8002128 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002120:	f001 fe1a 	bl	8003d58 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002124:	2300      	movs	r3, #0
 8002126:	e062      	b.n	80021ee <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800212a:	2b00      	cmp	r3, #0
 800212c:	d106      	bne.n	800213c <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800212e:	f107 0310 	add.w	r3, r7, #16
 8002132:	4618      	mov	r0, r3
 8002134:	f000 ffb0 	bl	8003098 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002138:	2301      	movs	r3, #1
 800213a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800213c:	f001 fe0c 	bl	8003d58 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002140:	f000 fbde 	bl	8002900 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002144:	f001 fdd8 	bl	8003cf8 <vPortEnterCritical>
 8002148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800214a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800214e:	b25b      	sxtb	r3, r3
 8002150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002154:	d103      	bne.n	800215e <xQueueReceive+0x122>
 8002156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800215e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002160:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002164:	b25b      	sxtb	r3, r3
 8002166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800216a:	d103      	bne.n	8002174 <xQueueReceive+0x138>
 800216c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800216e:	2200      	movs	r2, #0
 8002170:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002174:	f001 fdf0 	bl	8003d58 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002178:	1d3a      	adds	r2, r7, #4
 800217a:	f107 0310 	add.w	r3, r7, #16
 800217e:	4611      	mov	r1, r2
 8002180:	4618      	mov	r0, r3
 8002182:	f000 ff9f 	bl	80030c4 <xTaskCheckForTimeOut>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d123      	bne.n	80021d4 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800218c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800218e:	f000 f917 	bl	80023c0 <prvIsQueueEmpty>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d017      	beq.n	80021c8 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800219a:	3324      	adds	r3, #36	; 0x24
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	4611      	mov	r1, r2
 80021a0:	4618      	mov	r0, r3
 80021a2:	f000 fe39 	bl	8002e18 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80021a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021a8:	f000 f8b8 	bl	800231c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80021ac:	f000 fbb6 	bl	800291c <xTaskResumeAll>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d189      	bne.n	80020ca <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80021b6:	4b10      	ldr	r3, [pc, #64]	; (80021f8 <xQueueReceive+0x1bc>)
 80021b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	f3bf 8f4f 	dsb	sy
 80021c2:	f3bf 8f6f 	isb	sy
 80021c6:	e780      	b.n	80020ca <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80021c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021ca:	f000 f8a7 	bl	800231c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80021ce:	f000 fba5 	bl	800291c <xTaskResumeAll>
 80021d2:	e77a      	b.n	80020ca <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80021d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021d6:	f000 f8a1 	bl	800231c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80021da:	f000 fb9f 	bl	800291c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80021de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021e0:	f000 f8ee 	bl	80023c0 <prvIsQueueEmpty>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f43f af6f 	beq.w	80020ca <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80021ec:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3730      	adds	r7, #48	; 0x30
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	e000ed04 	.word	0xe000ed04

080021fc <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002208:	2300      	movs	r3, #0
 800220a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002210:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	2b00      	cmp	r3, #0
 8002218:	d10d      	bne.n	8002236 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d14d      	bne.n	80022be <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	4618      	mov	r0, r3
 8002228:	f001 f88e 	bl	8003348 <xTaskPriorityDisinherit>
 800222c:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2200      	movs	r2, #0
 8002232:	609a      	str	r2, [r3, #8]
 8002234:	e043      	b.n	80022be <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d119      	bne.n	8002270 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6858      	ldr	r0, [r3, #4]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002244:	461a      	mov	r2, r3
 8002246:	68b9      	ldr	r1, [r7, #8]
 8002248:	f002 f828 	bl	800429c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002254:	441a      	add	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	685a      	ldr	r2, [r3, #4]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	429a      	cmp	r2, r3
 8002264:	d32b      	bcc.n	80022be <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	605a      	str	r2, [r3, #4]
 800226e:	e026      	b.n	80022be <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	68d8      	ldr	r0, [r3, #12]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002278:	461a      	mov	r2, r3
 800227a:	68b9      	ldr	r1, [r7, #8]
 800227c:	f002 f80e 	bl	800429c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	68da      	ldr	r2, [r3, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002288:	425b      	negs	r3, r3
 800228a:	441a      	add	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	68da      	ldr	r2, [r3, #12]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	429a      	cmp	r2, r3
 800229a:	d207      	bcs.n	80022ac <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a4:	425b      	negs	r3, r3
 80022a6:	441a      	add	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d105      	bne.n	80022be <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d002      	beq.n	80022be <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	3b01      	subs	r3, #1
 80022bc:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1c5a      	adds	r2, r3, #1
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80022c6:	697b      	ldr	r3, [r7, #20]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3718      	adds	r7, #24
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d018      	beq.n	8002314 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	68da      	ldr	r2, [r3, #12]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	441a      	add	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68da      	ldr	r2, [r3, #12]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d303      	bcc.n	8002304 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68d9      	ldr	r1, [r3, #12]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230c:	461a      	mov	r2, r3
 800230e:	6838      	ldr	r0, [r7, #0]
 8002310:	f001 ffc4 	bl	800429c <memcpy>
    }
}
 8002314:	bf00      	nop
 8002316:	3708      	adds	r7, #8
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002324:	f001 fce8 	bl	8003cf8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800232e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002330:	e011      	b.n	8002356 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002336:	2b00      	cmp	r3, #0
 8002338:	d012      	beq.n	8002360 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	3324      	adds	r3, #36	; 0x24
 800233e:	4618      	mov	r0, r3
 8002340:	f000 fdd4 	bl	8002eec <xTaskRemoveFromEventList>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800234a:	f000 ff21 	bl	8003190 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800234e:	7bfb      	ldrb	r3, [r7, #15]
 8002350:	3b01      	subs	r3, #1
 8002352:	b2db      	uxtb	r3, r3
 8002354:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800235a:	2b00      	cmp	r3, #0
 800235c:	dce9      	bgt.n	8002332 <prvUnlockQueue+0x16>
 800235e:	e000      	b.n	8002362 <prvUnlockQueue+0x46>
                    break;
 8002360:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	22ff      	movs	r2, #255	; 0xff
 8002366:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800236a:	f001 fcf5 	bl	8003d58 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800236e:	f001 fcc3 	bl	8003cf8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002378:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800237a:	e011      	b.n	80023a0 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d012      	beq.n	80023aa <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3310      	adds	r3, #16
 8002388:	4618      	mov	r0, r3
 800238a:	f000 fdaf 	bl	8002eec <xTaskRemoveFromEventList>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002394:	f000 fefc 	bl	8003190 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002398:	7bbb      	ldrb	r3, [r7, #14]
 800239a:	3b01      	subs	r3, #1
 800239c:	b2db      	uxtb	r3, r3
 800239e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80023a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	dce9      	bgt.n	800237c <prvUnlockQueue+0x60>
 80023a8:	e000      	b.n	80023ac <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80023aa:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	22ff      	movs	r2, #255	; 0xff
 80023b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80023b4:	f001 fcd0 	bl	8003d58 <vPortExitCritical>
}
 80023b8:	bf00      	nop
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80023c8:	f001 fc96 	bl	8003cf8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d102      	bne.n	80023da <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80023d4:	2301      	movs	r3, #1
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	e001      	b.n	80023de <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80023da:	2300      	movs	r3, #0
 80023dc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80023de:	f001 fcbb 	bl	8003d58 <vPortExitCritical>

    return xReturn;
 80023e2:	68fb      	ldr	r3, [r7, #12]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3710      	adds	r7, #16
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80023f4:	f001 fc80 	bl	8003cf8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002400:	429a      	cmp	r2, r3
 8002402:	d102      	bne.n	800240a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002404:	2301      	movs	r3, #1
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	e001      	b.n	800240e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800240a:	2300      	movs	r3, #0
 800240c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800240e:	f001 fca3 	bl	8003d58 <vPortExitCritical>

    return xReturn;
 8002412:	68fb      	ldr	r3, [r7, #12]
}
 8002414:	4618      	mov	r0, r3
 8002416:	3710      	adds	r7, #16
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800241c:	b480      	push	{r7}
 800241e:	b087      	sub	sp, #28
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002426:	2300      	movs	r3, #0
 8002428:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d10a      	bne.n	8002446 <vQueueAddToRegistry+0x2a>
        __asm volatile
 8002430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002434:	f383 8811 	msr	BASEPRI, r3
 8002438:	f3bf 8f6f 	isb	sy
 800243c:	f3bf 8f4f 	dsb	sy
 8002440:	60fb      	str	r3, [r7, #12]
    }
 8002442:	bf00      	nop
 8002444:	e7fe      	b.n	8002444 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d024      	beq.n	8002496 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800244c:	2300      	movs	r3, #0
 800244e:	617b      	str	r3, [r7, #20]
 8002450:	e01e      	b.n	8002490 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002452:	4a18      	ldr	r2, [pc, #96]	; (80024b4 <vQueueAddToRegistry+0x98>)
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	4413      	add	r3, r2
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	429a      	cmp	r2, r3
 8002460:	d105      	bne.n	800246e <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	4a13      	ldr	r2, [pc, #76]	; (80024b4 <vQueueAddToRegistry+0x98>)
 8002468:	4413      	add	r3, r2
 800246a:	613b      	str	r3, [r7, #16]
                    break;
 800246c:	e013      	b.n	8002496 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d10a      	bne.n	800248a <vQueueAddToRegistry+0x6e>
 8002474:	4a0f      	ldr	r2, [pc, #60]	; (80024b4 <vQueueAddToRegistry+0x98>)
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d104      	bne.n	800248a <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	4a0b      	ldr	r2, [pc, #44]	; (80024b4 <vQueueAddToRegistry+0x98>)
 8002486:	4413      	add	r3, r2
 8002488:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	3301      	adds	r3, #1
 800248e:	617b      	str	r3, [r7, #20]
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	2b07      	cmp	r3, #7
 8002494:	d9dd      	bls.n	8002452 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d005      	beq.n	80024a8 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80024a8:	bf00      	nop
 80024aa:	371c      	adds	r7, #28
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr
 80024b4:	20000114 	.word	0x20000114

080024b8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80024c8:	f001 fc16 	bl	8003cf8 <vPortEnterCritical>
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024d2:	b25b      	sxtb	r3, r3
 80024d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d8:	d103      	bne.n	80024e2 <vQueueWaitForMessageRestricted+0x2a>
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024e8:	b25b      	sxtb	r3, r3
 80024ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ee:	d103      	bne.n	80024f8 <vQueueWaitForMessageRestricted+0x40>
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80024f8:	f001 fc2e 	bl	8003d58 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002500:	2b00      	cmp	r3, #0
 8002502:	d106      	bne.n	8002512 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	3324      	adds	r3, #36	; 0x24
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	68b9      	ldr	r1, [r7, #8]
 800250c:	4618      	mov	r0, r3
 800250e:	f000 fca7 	bl	8002e60 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002512:	6978      	ldr	r0, [r7, #20]
 8002514:	f7ff ff02 	bl	800231c <prvUnlockQueue>
    }
 8002518:	bf00      	nop
 800251a:	3718      	adds	r7, #24
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002520:	b580      	push	{r7, lr}
 8002522:	b08c      	sub	sp, #48	; 0x30
 8002524:	af04      	add	r7, sp, #16
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	603b      	str	r3, [r7, #0]
 800252c:	4613      	mov	r3, r2
 800252e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002530:	88fb      	ldrh	r3, [r7, #6]
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	4618      	mov	r0, r3
 8002536:	f001 fcc1 	bl	8003ebc <pvPortMalloc>
 800253a:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d013      	beq.n	800256a <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002542:	2060      	movs	r0, #96	; 0x60
 8002544:	f001 fcba 	bl	8003ebc <pvPortMalloc>
 8002548:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d008      	beq.n	8002562 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002550:	2260      	movs	r2, #96	; 0x60
 8002552:	2100      	movs	r1, #0
 8002554:	69f8      	ldr	r0, [r7, #28]
 8002556:	f001 feaf 	bl	80042b8 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	631a      	str	r2, [r3, #48]	; 0x30
 8002560:	e005      	b.n	800256e <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002562:	6978      	ldr	r0, [r7, #20]
 8002564:	f001 fd64 	bl	8004030 <vPortFree>
 8002568:	e001      	b.n	800256e <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800256a:	2300      	movs	r3, #0
 800256c:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d013      	beq.n	800259c <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002574:	88fa      	ldrh	r2, [r7, #6]
 8002576:	2300      	movs	r3, #0
 8002578:	9303      	str	r3, [sp, #12]
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	9302      	str	r3, [sp, #8]
 800257e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002580:	9301      	str	r3, [sp, #4]
 8002582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002584:	9300      	str	r3, [sp, #0]
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	68b9      	ldr	r1, [r7, #8]
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	f000 f80e 	bl	80025ac <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002590:	69f8      	ldr	r0, [r7, #28]
 8002592:	f000 f899 	bl	80026c8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002596:	2301      	movs	r3, #1
 8002598:	61bb      	str	r3, [r7, #24]
 800259a:	e002      	b.n	80025a2 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800259c:	f04f 33ff 	mov.w	r3, #4294967295
 80025a0:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80025a2:	69bb      	ldr	r3, [r7, #24]
    }
 80025a4:	4618      	mov	r0, r3
 80025a6:	3720      	adds	r7, #32
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b088      	sub	sp, #32
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
 80025b8:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80025ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025bc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	461a      	mov	r2, r3
 80025c4:	21a5      	movs	r1, #165	; 0xa5
 80025c6:	f001 fe77 	bl	80042b8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80025ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80025d4:	3b01      	subs	r3, #1
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	4413      	add	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	f023 0307 	bic.w	r3, r3, #7
 80025e2:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00a      	beq.n	8002604 <prvInitialiseNewTask+0x58>
        __asm volatile
 80025ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f2:	f383 8811 	msr	BASEPRI, r3
 80025f6:	f3bf 8f6f 	isb	sy
 80025fa:	f3bf 8f4f 	dsb	sy
 80025fe:	617b      	str	r3, [r7, #20]
    }
 8002600:	bf00      	nop
 8002602:	e7fe      	b.n	8002602 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d01e      	beq.n	8002648 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800260a:	2300      	movs	r3, #0
 800260c:	61fb      	str	r3, [r7, #28]
 800260e:	e012      	b.n	8002636 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002610:	68ba      	ldr	r2, [r7, #8]
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	4413      	add	r3, r2
 8002616:	7819      	ldrb	r1, [r3, #0]
 8002618:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	4413      	add	r3, r2
 800261e:	3334      	adds	r3, #52	; 0x34
 8002620:	460a      	mov	r2, r1
 8002622:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002624:	68ba      	ldr	r2, [r7, #8]
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	4413      	add	r3, r2
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d006      	beq.n	800263e <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	3301      	adds	r3, #1
 8002634:	61fb      	str	r3, [r7, #28]
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	2b13      	cmp	r3, #19
 800263a:	d9e9      	bls.n	8002610 <prvInitialiseNewTask+0x64>
 800263c:	e000      	b.n	8002640 <prvInitialiseNewTask+0x94>
            {
                break;
 800263e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002642:	2200      	movs	r2, #0
 8002644:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800264a:	2b04      	cmp	r3, #4
 800264c:	d90a      	bls.n	8002664 <prvInitialiseNewTask+0xb8>
        __asm volatile
 800264e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002652:	f383 8811 	msr	BASEPRI, r3
 8002656:	f3bf 8f6f 	isb	sy
 800265a:	f3bf 8f4f 	dsb	sy
 800265e:	613b      	str	r3, [r7, #16]
    }
 8002660:	bf00      	nop
 8002662:	e7fe      	b.n	8002662 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002666:	2b04      	cmp	r3, #4
 8002668:	d901      	bls.n	800266e <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800266a:	2304      	movs	r3, #4
 800266c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800266e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002670:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002672:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002676:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002678:	651a      	str	r2, [r3, #80]	; 0x50
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800267a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800267c:	3304      	adds	r3, #4
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff fa6c 	bl	8001b5c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002686:	3318      	adds	r3, #24
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff fa67 	bl	8001b5c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800268e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002690:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002692:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002696:	f1c3 0205 	rsb	r2, r3, #5
 800269a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800269c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800269e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026a2:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	68f9      	ldr	r1, [r7, #12]
 80026a8:	69b8      	ldr	r0, [r7, #24]
 80026aa:	f001 f9f5 	bl	8003a98 <pxPortInitialiseStack>
 80026ae:	4602      	mov	r2, r0
 80026b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b2:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80026b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d002      	beq.n	80026c0 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80026ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026be:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80026c0:	bf00      	nop
 80026c2:	3720      	adds	r7, #32
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80026d0:	f001 fb12 	bl	8003cf8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80026d4:	4b40      	ldr	r3, [pc, #256]	; (80027d8 <prvAddNewTaskToReadyList+0x110>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	3301      	adds	r3, #1
 80026da:	4a3f      	ldr	r2, [pc, #252]	; (80027d8 <prvAddNewTaskToReadyList+0x110>)
 80026dc:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80026de:	4b3f      	ldr	r3, [pc, #252]	; (80027dc <prvAddNewTaskToReadyList+0x114>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d109      	bne.n	80026fa <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80026e6:	4a3d      	ldr	r2, [pc, #244]	; (80027dc <prvAddNewTaskToReadyList+0x114>)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80026ec:	4b3a      	ldr	r3, [pc, #232]	; (80027d8 <prvAddNewTaskToReadyList+0x110>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d110      	bne.n	8002716 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80026f4:	f000 fd70 	bl	80031d8 <prvInitialiseTaskLists>
 80026f8:	e00d      	b.n	8002716 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80026fa:	4b39      	ldr	r3, [pc, #228]	; (80027e0 <prvAddNewTaskToReadyList+0x118>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d109      	bne.n	8002716 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002702:	4b36      	ldr	r3, [pc, #216]	; (80027dc <prvAddNewTaskToReadyList+0x114>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270c:	429a      	cmp	r2, r3
 800270e:	d802      	bhi.n	8002716 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002710:	4a32      	ldr	r2, [pc, #200]	; (80027dc <prvAddNewTaskToReadyList+0x114>)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002716:	4b33      	ldr	r3, [pc, #204]	; (80027e4 <prvAddNewTaskToReadyList+0x11c>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	3301      	adds	r3, #1
 800271c:	4a31      	ldr	r2, [pc, #196]	; (80027e4 <prvAddNewTaskToReadyList+0x11c>)
 800271e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002720:	4b30      	ldr	r3, [pc, #192]	; (80027e4 <prvAddNewTaskToReadyList+0x11c>)
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	649a      	str	r2, [r3, #72]	; 0x48
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272c:	2201      	movs	r2, #1
 800272e:	409a      	lsls	r2, r3
 8002730:	4b2d      	ldr	r3, [pc, #180]	; (80027e8 <prvAddNewTaskToReadyList+0x120>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4313      	orrs	r3, r2
 8002736:	4a2c      	ldr	r2, [pc, #176]	; (80027e8 <prvAddNewTaskToReadyList+0x120>)
 8002738:	6013      	str	r3, [r2, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800273e:	492b      	ldr	r1, [pc, #172]	; (80027ec <prvAddNewTaskToReadyList+0x124>)
 8002740:	4613      	mov	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4413      	add	r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	440b      	add	r3, r1
 800274a:	3304      	adds	r3, #4
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	609a      	str	r2, [r3, #8]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	689a      	ldr	r2, [r3, #8]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	60da      	str	r2, [r3, #12]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	3204      	adds	r2, #4
 8002766:	605a      	str	r2, [r3, #4]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	1d1a      	adds	r2, r3, #4
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	609a      	str	r2, [r3, #8]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002774:	4613      	mov	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	4413      	add	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4a1b      	ldr	r2, [pc, #108]	; (80027ec <prvAddNewTaskToReadyList+0x124>)
 800277e:	441a      	add	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	615a      	str	r2, [r3, #20]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002788:	4918      	ldr	r1, [pc, #96]	; (80027ec <prvAddNewTaskToReadyList+0x124>)
 800278a:	4613      	mov	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4413      	add	r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	440b      	add	r3, r1
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	1c59      	adds	r1, r3, #1
 8002798:	4814      	ldr	r0, [pc, #80]	; (80027ec <prvAddNewTaskToReadyList+0x124>)
 800279a:	4613      	mov	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	4403      	add	r3, r0
 80027a4:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80027a6:	f001 fad7 	bl	8003d58 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80027aa:	4b0d      	ldr	r3, [pc, #52]	; (80027e0 <prvAddNewTaskToReadyList+0x118>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00e      	beq.n	80027d0 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80027b2:	4b0a      	ldr	r3, [pc, #40]	; (80027dc <prvAddNewTaskToReadyList+0x114>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027bc:	429a      	cmp	r2, r3
 80027be:	d207      	bcs.n	80027d0 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80027c0:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <prvAddNewTaskToReadyList+0x128>)
 80027c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	f3bf 8f4f 	dsb	sy
 80027cc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80027d0:	bf00      	nop
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	2000022c 	.word	0x2000022c
 80027dc:	20000154 	.word	0x20000154
 80027e0:	20000238 	.word	0x20000238
 80027e4:	20000248 	.word	0x20000248
 80027e8:	20000234 	.word	0x20000234
 80027ec:	20000158 	.word	0x20000158
 80027f0:	e000ed04 	.word	0xe000ed04

080027f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80027fc:	2300      	movs	r3, #0
 80027fe:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d017      	beq.n	8002836 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002806:	4b13      	ldr	r3, [pc, #76]	; (8002854 <vTaskDelay+0x60>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00a      	beq.n	8002824 <vTaskDelay+0x30>
        __asm volatile
 800280e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002812:	f383 8811 	msr	BASEPRI, r3
 8002816:	f3bf 8f6f 	isb	sy
 800281a:	f3bf 8f4f 	dsb	sy
 800281e:	60bb      	str	r3, [r7, #8]
    }
 8002820:	bf00      	nop
 8002822:	e7fe      	b.n	8002822 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002824:	f000 f86c 	bl	8002900 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002828:	2100      	movs	r1, #0
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 fe30 	bl	8003490 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002830:	f000 f874 	bl	800291c <xTaskResumeAll>
 8002834:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d107      	bne.n	800284c <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 800283c:	4b06      	ldr	r3, [pc, #24]	; (8002858 <vTaskDelay+0x64>)
 800283e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	f3bf 8f4f 	dsb	sy
 8002848:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800284c:	bf00      	nop
 800284e:	3710      	adds	r7, #16
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	20000254 	.word	0x20000254
 8002858:	e000ed04 	.word	0xe000ed04

0800285c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002862:	4b20      	ldr	r3, [pc, #128]	; (80028e4 <vTaskStartScheduler+0x88>)
 8002864:	9301      	str	r3, [sp, #4]
 8002866:	2300      	movs	r3, #0
 8002868:	9300      	str	r3, [sp, #0]
 800286a:	2300      	movs	r3, #0
 800286c:	2282      	movs	r2, #130	; 0x82
 800286e:	491e      	ldr	r1, [pc, #120]	; (80028e8 <vTaskStartScheduler+0x8c>)
 8002870:	481e      	ldr	r0, [pc, #120]	; (80028ec <vTaskStartScheduler+0x90>)
 8002872:	f7ff fe55 	bl	8002520 <xTaskCreate>
 8002876:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d102      	bne.n	8002884 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 800287e:	f000 fe87 	bl	8003590 <xTimerCreateTimerTask>
 8002882:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d116      	bne.n	80028b8 <vTaskStartScheduler+0x5c>
        __asm volatile
 800288a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800288e:	f383 8811 	msr	BASEPRI, r3
 8002892:	f3bf 8f6f 	isb	sy
 8002896:	f3bf 8f4f 	dsb	sy
 800289a:	60bb      	str	r3, [r7, #8]
    }
 800289c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800289e:	4b14      	ldr	r3, [pc, #80]	; (80028f0 <vTaskStartScheduler+0x94>)
 80028a0:	f04f 32ff 	mov.w	r2, #4294967295
 80028a4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80028a6:	4b13      	ldr	r3, [pc, #76]	; (80028f4 <vTaskStartScheduler+0x98>)
 80028a8:	2201      	movs	r2, #1
 80028aa:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80028ac:	4b12      	ldr	r3, [pc, #72]	; (80028f8 <vTaskStartScheduler+0x9c>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80028b2:	f001 f97f 	bl	8003bb4 <xPortStartScheduler>
 80028b6:	e00e      	b.n	80028d6 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028be:	d10a      	bne.n	80028d6 <vTaskStartScheduler+0x7a>
        __asm volatile
 80028c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c4:	f383 8811 	msr	BASEPRI, r3
 80028c8:	f3bf 8f6f 	isb	sy
 80028cc:	f3bf 8f4f 	dsb	sy
 80028d0:	607b      	str	r3, [r7, #4]
    }
 80028d2:	bf00      	nop
 80028d4:	e7fe      	b.n	80028d4 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80028d6:	4b09      	ldr	r3, [pc, #36]	; (80028fc <vTaskStartScheduler+0xa0>)
 80028d8:	681b      	ldr	r3, [r3, #0]
}
 80028da:	bf00      	nop
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	20000250 	.word	0x20000250
 80028e8:	08005358 	.word	0x08005358
 80028ec:	080031a9 	.word	0x080031a9
 80028f0:	2000024c 	.word	0x2000024c
 80028f4:	20000238 	.word	0x20000238
 80028f8:	20000230 	.word	0x20000230
 80028fc:	2000000c 	.word	0x2000000c

08002900 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002904:	4b04      	ldr	r3, [pc, #16]	; (8002918 <vTaskSuspendAll+0x18>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	3301      	adds	r3, #1
 800290a:	4a03      	ldr	r2, [pc, #12]	; (8002918 <vTaskSuspendAll+0x18>)
 800290c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800290e:	bf00      	nop
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	20000254 	.word	0x20000254

0800291c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b088      	sub	sp, #32
 8002920:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002922:	2300      	movs	r3, #0
 8002924:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002926:	2300      	movs	r3, #0
 8002928:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800292a:	4b71      	ldr	r3, [pc, #452]	; (8002af0 <xTaskResumeAll+0x1d4>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10a      	bne.n	8002948 <xTaskResumeAll+0x2c>
        __asm volatile
 8002932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002936:	f383 8811 	msr	BASEPRI, r3
 800293a:	f3bf 8f6f 	isb	sy
 800293e:	f3bf 8f4f 	dsb	sy
 8002942:	607b      	str	r3, [r7, #4]
    }
 8002944:	bf00      	nop
 8002946:	e7fe      	b.n	8002946 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002948:	f001 f9d6 	bl	8003cf8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800294c:	4b68      	ldr	r3, [pc, #416]	; (8002af0 <xTaskResumeAll+0x1d4>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	3b01      	subs	r3, #1
 8002952:	4a67      	ldr	r2, [pc, #412]	; (8002af0 <xTaskResumeAll+0x1d4>)
 8002954:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002956:	4b66      	ldr	r3, [pc, #408]	; (8002af0 <xTaskResumeAll+0x1d4>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2b00      	cmp	r3, #0
 800295c:	f040 80c0 	bne.w	8002ae0 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002960:	4b64      	ldr	r3, [pc, #400]	; (8002af4 <xTaskResumeAll+0x1d8>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2b00      	cmp	r3, #0
 8002966:	f000 80bb 	beq.w	8002ae0 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800296a:	e08a      	b.n	8002a82 <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800296c:	4b62      	ldr	r3, [pc, #392]	; (8002af8 <xTaskResumeAll+0x1dc>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002978:	613b      	str	r3, [r7, #16]
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	69fa      	ldr	r2, [r7, #28]
 8002980:	6a12      	ldr	r2, [r2, #32]
 8002982:	609a      	str	r2, [r3, #8]
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	69fa      	ldr	r2, [r7, #28]
 800298a:	69d2      	ldr	r2, [r2, #28]
 800298c:	605a      	str	r2, [r3, #4]
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	685a      	ldr	r2, [r3, #4]
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	3318      	adds	r3, #24
 8002996:	429a      	cmp	r2, r3
 8002998:	d103      	bne.n	80029a2 <xTaskResumeAll+0x86>
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	6a1a      	ldr	r2, [r3, #32]
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	605a      	str	r2, [r3, #4]
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	2200      	movs	r2, #0
 80029a6:	629a      	str	r2, [r3, #40]	; 0x28
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	1e5a      	subs	r2, r3, #1
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	60fb      	str	r3, [r7, #12]
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	69fa      	ldr	r2, [r7, #28]
 80029be:	68d2      	ldr	r2, [r2, #12]
 80029c0:	609a      	str	r2, [r3, #8]
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	69fa      	ldr	r2, [r7, #28]
 80029c8:	6892      	ldr	r2, [r2, #8]
 80029ca:	605a      	str	r2, [r3, #4]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	685a      	ldr	r2, [r3, #4]
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	3304      	adds	r3, #4
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d103      	bne.n	80029e0 <xTaskResumeAll+0xc4>
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	68da      	ldr	r2, [r3, #12]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	605a      	str	r2, [r3, #4]
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	2200      	movs	r2, #0
 80029e4:	615a      	str	r2, [r3, #20]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	1e5a      	subs	r2, r3, #1
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f4:	2201      	movs	r2, #1
 80029f6:	409a      	lsls	r2, r3
 80029f8:	4b40      	ldr	r3, [pc, #256]	; (8002afc <xTaskResumeAll+0x1e0>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	4a3f      	ldr	r2, [pc, #252]	; (8002afc <xTaskResumeAll+0x1e0>)
 8002a00:	6013      	str	r3, [r2, #0]
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a06:	493e      	ldr	r1, [pc, #248]	; (8002b00 <xTaskResumeAll+0x1e4>)
 8002a08:	4613      	mov	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4413      	add	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	440b      	add	r3, r1
 8002a12:	3304      	adds	r3, #4
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	60bb      	str	r3, [r7, #8]
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	68ba      	ldr	r2, [r7, #8]
 8002a1c:	609a      	str	r2, [r3, #8]
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	689a      	ldr	r2, [r3, #8]
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	60da      	str	r2, [r3, #12]
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	69fa      	ldr	r2, [r7, #28]
 8002a2c:	3204      	adds	r2, #4
 8002a2e:	605a      	str	r2, [r3, #4]
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	1d1a      	adds	r2, r3, #4
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	609a      	str	r2, [r3, #8]
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4a2e      	ldr	r2, [pc, #184]	; (8002b00 <xTaskResumeAll+0x1e4>)
 8002a46:	441a      	add	r2, r3
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	615a      	str	r2, [r3, #20]
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a50:	492b      	ldr	r1, [pc, #172]	; (8002b00 <xTaskResumeAll+0x1e4>)
 8002a52:	4613      	mov	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	4413      	add	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	440b      	add	r3, r1
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	1c59      	adds	r1, r3, #1
 8002a60:	4827      	ldr	r0, [pc, #156]	; (8002b00 <xTaskResumeAll+0x1e4>)
 8002a62:	4613      	mov	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4413      	add	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	4403      	add	r3, r0
 8002a6c:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a72:	4b24      	ldr	r3, [pc, #144]	; (8002b04 <xTaskResumeAll+0x1e8>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d302      	bcc.n	8002a82 <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8002a7c:	4b22      	ldr	r3, [pc, #136]	; (8002b08 <xTaskResumeAll+0x1ec>)
 8002a7e:	2201      	movs	r2, #1
 8002a80:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a82:	4b1d      	ldr	r3, [pc, #116]	; (8002af8 <xTaskResumeAll+0x1dc>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f47f af70 	bne.w	800296c <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002a92:	f000 fc1f 	bl	80032d4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002a96:	4b1d      	ldr	r3, [pc, #116]	; (8002b0c <xTaskResumeAll+0x1f0>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d010      	beq.n	8002ac4 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002aa2:	f000 f847 	bl	8002b34 <xTaskIncrementTick>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d002      	beq.n	8002ab2 <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8002aac:	4b16      	ldr	r3, [pc, #88]	; (8002b08 <xTaskResumeAll+0x1ec>)
 8002aae:	2201      	movs	r2, #1
 8002ab0:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1f1      	bne.n	8002aa2 <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8002abe:	4b13      	ldr	r3, [pc, #76]	; (8002b0c <xTaskResumeAll+0x1f0>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002ac4:	4b10      	ldr	r3, [pc, #64]	; (8002b08 <xTaskResumeAll+0x1ec>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d009      	beq.n	8002ae0 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002acc:	2301      	movs	r3, #1
 8002ace:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002ad0:	4b0f      	ldr	r3, [pc, #60]	; (8002b10 <xTaskResumeAll+0x1f4>)
 8002ad2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	f3bf 8f4f 	dsb	sy
 8002adc:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002ae0:	f001 f93a 	bl	8003d58 <vPortExitCritical>

    return xAlreadyYielded;
 8002ae4:	69bb      	ldr	r3, [r7, #24]
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3720      	adds	r7, #32
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	20000254 	.word	0x20000254
 8002af4:	2000022c 	.word	0x2000022c
 8002af8:	200001ec 	.word	0x200001ec
 8002afc:	20000234 	.word	0x20000234
 8002b00:	20000158 	.word	0x20000158
 8002b04:	20000154 	.word	0x20000154
 8002b08:	20000240 	.word	0x20000240
 8002b0c:	2000023c 	.word	0x2000023c
 8002b10:	e000ed04 	.word	0xe000ed04

08002b14 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002b1a:	4b05      	ldr	r3, [pc, #20]	; (8002b30 <xTaskGetTickCount+0x1c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002b20:	687b      	ldr	r3, [r7, #4]
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	20000230 	.word	0x20000230

08002b34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b08a      	sub	sp, #40	; 0x28
 8002b38:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b3e:	4b7d      	ldr	r3, [pc, #500]	; (8002d34 <xTaskIncrementTick+0x200>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f040 80ec 	bne.w	8002d20 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002b48:	4b7b      	ldr	r3, [pc, #492]	; (8002d38 <xTaskIncrementTick+0x204>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002b50:	4a79      	ldr	r2, [pc, #484]	; (8002d38 <xTaskIncrementTick+0x204>)
 8002b52:	6a3b      	ldr	r3, [r7, #32]
 8002b54:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002b56:	6a3b      	ldr	r3, [r7, #32]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d120      	bne.n	8002b9e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002b5c:	4b77      	ldr	r3, [pc, #476]	; (8002d3c <xTaskIncrementTick+0x208>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00a      	beq.n	8002b7c <xTaskIncrementTick+0x48>
        __asm volatile
 8002b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b6a:	f383 8811 	msr	BASEPRI, r3
 8002b6e:	f3bf 8f6f 	isb	sy
 8002b72:	f3bf 8f4f 	dsb	sy
 8002b76:	607b      	str	r3, [r7, #4]
    }
 8002b78:	bf00      	nop
 8002b7a:	e7fe      	b.n	8002b7a <xTaskIncrementTick+0x46>
 8002b7c:	4b6f      	ldr	r3, [pc, #444]	; (8002d3c <xTaskIncrementTick+0x208>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	61fb      	str	r3, [r7, #28]
 8002b82:	4b6f      	ldr	r3, [pc, #444]	; (8002d40 <xTaskIncrementTick+0x20c>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a6d      	ldr	r2, [pc, #436]	; (8002d3c <xTaskIncrementTick+0x208>)
 8002b88:	6013      	str	r3, [r2, #0]
 8002b8a:	4a6d      	ldr	r2, [pc, #436]	; (8002d40 <xTaskIncrementTick+0x20c>)
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	6013      	str	r3, [r2, #0]
 8002b90:	4b6c      	ldr	r3, [pc, #432]	; (8002d44 <xTaskIncrementTick+0x210>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	3301      	adds	r3, #1
 8002b96:	4a6b      	ldr	r2, [pc, #428]	; (8002d44 <xTaskIncrementTick+0x210>)
 8002b98:	6013      	str	r3, [r2, #0]
 8002b9a:	f000 fb9b 	bl	80032d4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002b9e:	4b6a      	ldr	r3, [pc, #424]	; (8002d48 <xTaskIncrementTick+0x214>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6a3a      	ldr	r2, [r7, #32]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	f0c0 80a6 	bcc.w	8002cf6 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002baa:	4b64      	ldr	r3, [pc, #400]	; (8002d3c <xTaskIncrementTick+0x208>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d104      	bne.n	8002bbe <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002bb4:	4b64      	ldr	r3, [pc, #400]	; (8002d48 <xTaskIncrementTick+0x214>)
 8002bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8002bba:	601a      	str	r2, [r3, #0]
                    break;
 8002bbc:	e09b      	b.n	8002cf6 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bbe:	4b5f      	ldr	r3, [pc, #380]	; (8002d3c <xTaskIncrementTick+0x208>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002bce:	6a3a      	ldr	r2, [r7, #32]
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d203      	bcs.n	8002bde <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002bd6:	4a5c      	ldr	r2, [pc, #368]	; (8002d48 <xTaskIncrementTick+0x214>)
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002bdc:	e08b      	b.n	8002cf6 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	613b      	str	r3, [r7, #16]
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	68d2      	ldr	r2, [r2, #12]
 8002bec:	609a      	str	r2, [r3, #8]
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	6892      	ldr	r2, [r2, #8]
 8002bf6:	605a      	str	r2, [r3, #4]
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	3304      	adds	r3, #4
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d103      	bne.n	8002c0c <xTaskIncrementTick+0xd8>
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	68da      	ldr	r2, [r3, #12]
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	605a      	str	r2, [r3, #4]
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	615a      	str	r2, [r3, #20]
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	1e5a      	subs	r2, r3, #1
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d01e      	beq.n	8002c62 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c28:	60fb      	str	r3, [r7, #12]
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	6a12      	ldr	r2, [r2, #32]
 8002c32:	609a      	str	r2, [r3, #8]
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	69d2      	ldr	r2, [r2, #28]
 8002c3c:	605a      	str	r2, [r3, #4]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	685a      	ldr	r2, [r3, #4]
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	3318      	adds	r3, #24
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d103      	bne.n	8002c52 <xTaskIncrementTick+0x11e>
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	6a1a      	ldr	r2, [r3, #32]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	605a      	str	r2, [r3, #4]
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	2200      	movs	r2, #0
 8002c56:	629a      	str	r2, [r3, #40]	; 0x28
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	1e5a      	subs	r2, r3, #1
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c66:	2201      	movs	r2, #1
 8002c68:	409a      	lsls	r2, r3
 8002c6a:	4b38      	ldr	r3, [pc, #224]	; (8002d4c <xTaskIncrementTick+0x218>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	4a36      	ldr	r2, [pc, #216]	; (8002d4c <xTaskIncrementTick+0x218>)
 8002c72:	6013      	str	r3, [r2, #0]
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c78:	4935      	ldr	r1, [pc, #212]	; (8002d50 <xTaskIncrementTick+0x21c>)
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	4413      	add	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	440b      	add	r3, r1
 8002c84:	3304      	adds	r3, #4
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	60bb      	str	r3, [r7, #8]
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	68ba      	ldr	r2, [r7, #8]
 8002c8e:	609a      	str	r2, [r3, #8]
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	60da      	str	r2, [r3, #12]
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	3204      	adds	r2, #4
 8002ca0:	605a      	str	r2, [r3, #4]
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	1d1a      	adds	r2, r3, #4
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	609a      	str	r2, [r3, #8]
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cae:	4613      	mov	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4a26      	ldr	r2, [pc, #152]	; (8002d50 <xTaskIncrementTick+0x21c>)
 8002cb8:	441a      	add	r2, r3
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	615a      	str	r2, [r3, #20]
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cc2:	4923      	ldr	r1, [pc, #140]	; (8002d50 <xTaskIncrementTick+0x21c>)
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	4413      	add	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	440b      	add	r3, r1
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	1c59      	adds	r1, r3, #1
 8002cd2:	481f      	ldr	r0, [pc, #124]	; (8002d50 <xTaskIncrementTick+0x21c>)
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4413      	add	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	4403      	add	r3, r0
 8002cde:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ce4:	4b1b      	ldr	r3, [pc, #108]	; (8002d54 <xTaskIncrementTick+0x220>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cea:	429a      	cmp	r2, r3
 8002cec:	f67f af5d 	bls.w	8002baa <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002cf4:	e759      	b.n	8002baa <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002cf6:	4b17      	ldr	r3, [pc, #92]	; (8002d54 <xTaskIncrementTick+0x220>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cfc:	4914      	ldr	r1, [pc, #80]	; (8002d50 <xTaskIncrementTick+0x21c>)
 8002cfe:	4613      	mov	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4413      	add	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	440b      	add	r3, r1
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d901      	bls.n	8002d12 <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8002d12:	4b11      	ldr	r3, [pc, #68]	; (8002d58 <xTaskIncrementTick+0x224>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d007      	beq.n	8002d2a <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d1e:	e004      	b.n	8002d2a <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002d20:	4b0e      	ldr	r3, [pc, #56]	; (8002d5c <xTaskIncrementTick+0x228>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	3301      	adds	r3, #1
 8002d26:	4a0d      	ldr	r2, [pc, #52]	; (8002d5c <xTaskIncrementTick+0x228>)
 8002d28:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3728      	adds	r7, #40	; 0x28
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	20000254 	.word	0x20000254
 8002d38:	20000230 	.word	0x20000230
 8002d3c:	200001e4 	.word	0x200001e4
 8002d40:	200001e8 	.word	0x200001e8
 8002d44:	20000244 	.word	0x20000244
 8002d48:	2000024c 	.word	0x2000024c
 8002d4c:	20000234 	.word	0x20000234
 8002d50:	20000158 	.word	0x20000158
 8002d54:	20000154 	.word	0x20000154
 8002d58:	20000240 	.word	0x20000240
 8002d5c:	2000023c 	.word	0x2000023c

08002d60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002d60:	b480      	push	{r7}
 8002d62:	b087      	sub	sp, #28
 8002d64:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002d66:	4b27      	ldr	r3, [pc, #156]	; (8002e04 <vTaskSwitchContext+0xa4>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002d6e:	4b26      	ldr	r3, [pc, #152]	; (8002e08 <vTaskSwitchContext+0xa8>)
 8002d70:	2201      	movs	r2, #1
 8002d72:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002d74:	e03f      	b.n	8002df6 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8002d76:	4b24      	ldr	r3, [pc, #144]	; (8002e08 <vTaskSwitchContext+0xa8>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d7c:	4b23      	ldr	r3, [pc, #140]	; (8002e0c <vTaskSwitchContext+0xac>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	fab3 f383 	clz	r3, r3
 8002d88:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002d8a:	7afb      	ldrb	r3, [r7, #11]
 8002d8c:	f1c3 031f 	rsb	r3, r3, #31
 8002d90:	617b      	str	r3, [r7, #20]
 8002d92:	491f      	ldr	r1, [pc, #124]	; (8002e10 <vTaskSwitchContext+0xb0>)
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	4613      	mov	r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	4413      	add	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	440b      	add	r3, r1
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10a      	bne.n	8002dbc <vTaskSwitchContext+0x5c>
        __asm volatile
 8002da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002daa:	f383 8811 	msr	BASEPRI, r3
 8002dae:	f3bf 8f6f 	isb	sy
 8002db2:	f3bf 8f4f 	dsb	sy
 8002db6:	607b      	str	r3, [r7, #4]
    }
 8002db8:	bf00      	nop
 8002dba:	e7fe      	b.n	8002dba <vTaskSwitchContext+0x5a>
 8002dbc:	697a      	ldr	r2, [r7, #20]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	4413      	add	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	4a12      	ldr	r2, [pc, #72]	; (8002e10 <vTaskSwitchContext+0xb0>)
 8002dc8:	4413      	add	r3, r2
 8002dca:	613b      	str	r3, [r7, #16]
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	605a      	str	r2, [r3, #4]
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	685a      	ldr	r2, [r3, #4]
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	3308      	adds	r3, #8
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d104      	bne.n	8002dec <vTaskSwitchContext+0x8c>
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	685a      	ldr	r2, [r3, #4]
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	605a      	str	r2, [r3, #4]
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	4a08      	ldr	r2, [pc, #32]	; (8002e14 <vTaskSwitchContext+0xb4>)
 8002df4:	6013      	str	r3, [r2, #0]
}
 8002df6:	bf00      	nop
 8002df8:	371c      	adds	r7, #28
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	20000254 	.word	0x20000254
 8002e08:	20000240 	.word	0x20000240
 8002e0c:	20000234 	.word	0x20000234
 8002e10:	20000158 	.word	0x20000158
 8002e14:	20000154 	.word	0x20000154

08002e18 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d10a      	bne.n	8002e3e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8002e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e2c:	f383 8811 	msr	BASEPRI, r3
 8002e30:	f3bf 8f6f 	isb	sy
 8002e34:	f3bf 8f4f 	dsb	sy
 8002e38:	60fb      	str	r3, [r7, #12]
    }
 8002e3a:	bf00      	nop
 8002e3c:	e7fe      	b.n	8002e3c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002e3e:	4b07      	ldr	r3, [pc, #28]	; (8002e5c <vTaskPlaceOnEventList+0x44>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	3318      	adds	r3, #24
 8002e44:	4619      	mov	r1, r3
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f7fe fe95 	bl	8001b76 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002e4c:	2101      	movs	r1, #1
 8002e4e:	6838      	ldr	r0, [r7, #0]
 8002e50:	f000 fb1e 	bl	8003490 <prvAddCurrentTaskToDelayedList>
}
 8002e54:	bf00      	nop
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	20000154 	.word	0x20000154

08002e60 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10a      	bne.n	8002e88 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8002e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e76:	f383 8811 	msr	BASEPRI, r3
 8002e7a:	f3bf 8f6f 	isb	sy
 8002e7e:	f3bf 8f4f 	dsb	sy
 8002e82:	613b      	str	r3, [r7, #16]
    }
 8002e84:	bf00      	nop
 8002e86:	e7fe      	b.n	8002e86 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	617b      	str	r3, [r7, #20]
 8002e8e:	4b16      	ldr	r3, [pc, #88]	; (8002ee8 <vTaskPlaceOnEventListRestricted+0x88>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	697a      	ldr	r2, [r7, #20]
 8002e94:	61da      	str	r2, [r3, #28]
 8002e96:	4b14      	ldr	r3, [pc, #80]	; (8002ee8 <vTaskPlaceOnEventListRestricted+0x88>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	6892      	ldr	r2, [r2, #8]
 8002e9e:	621a      	str	r2, [r3, #32]
 8002ea0:	4b11      	ldr	r3, [pc, #68]	; (8002ee8 <vTaskPlaceOnEventListRestricted+0x88>)
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	3218      	adds	r2, #24
 8002eaa:	605a      	str	r2, [r3, #4]
 8002eac:	4b0e      	ldr	r3, [pc, #56]	; (8002ee8 <vTaskPlaceOnEventListRestricted+0x88>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f103 0218 	add.w	r2, r3, #24
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	609a      	str	r2, [r3, #8]
 8002eb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ee8 <vTaskPlaceOnEventListRestricted+0x88>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	629a      	str	r2, [r3, #40]	; 0x28
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	1c5a      	adds	r2, r3, #1
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d002      	beq.n	8002ed6 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8002ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ed4:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002ed6:	6879      	ldr	r1, [r7, #4]
 8002ed8:	68b8      	ldr	r0, [r7, #8]
 8002eda:	f000 fad9 	bl	8003490 <prvAddCurrentTaskToDelayedList>
    }
 8002ede:	bf00      	nop
 8002ee0:	3718      	adds	r7, #24
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	20000154 	.word	0x20000154

08002eec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002eec:	b480      	push	{r7}
 8002eee:	b08b      	sub	sp, #44	; 0x2c
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8002efc:	6a3b      	ldr	r3, [r7, #32]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10a      	bne.n	8002f18 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8002f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f06:	f383 8811 	msr	BASEPRI, r3
 8002f0a:	f3bf 8f6f 	isb	sy
 8002f0e:	f3bf 8f4f 	dsb	sy
 8002f12:	60fb      	str	r3, [r7, #12]
    }
 8002f14:	bf00      	nop
 8002f16:	e7fe      	b.n	8002f16 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8002f18:	6a3b      	ldr	r3, [r7, #32]
 8002f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1c:	61fb      	str	r3, [r7, #28]
 8002f1e:	6a3b      	ldr	r3, [r7, #32]
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	6a3a      	ldr	r2, [r7, #32]
 8002f24:	6a12      	ldr	r2, [r2, #32]
 8002f26:	609a      	str	r2, [r3, #8]
 8002f28:	6a3b      	ldr	r3, [r7, #32]
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	6a3a      	ldr	r2, [r7, #32]
 8002f2e:	69d2      	ldr	r2, [r2, #28]
 8002f30:	605a      	str	r2, [r3, #4]
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	685a      	ldr	r2, [r3, #4]
 8002f36:	6a3b      	ldr	r3, [r7, #32]
 8002f38:	3318      	adds	r3, #24
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d103      	bne.n	8002f46 <xTaskRemoveFromEventList+0x5a>
 8002f3e:	6a3b      	ldr	r3, [r7, #32]
 8002f40:	6a1a      	ldr	r2, [r3, #32]
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	605a      	str	r2, [r3, #4]
 8002f46:	6a3b      	ldr	r3, [r7, #32]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	629a      	str	r2, [r3, #40]	; 0x28
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	1e5a      	subs	r2, r3, #1
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f56:	4b4a      	ldr	r3, [pc, #296]	; (8003080 <xTaskRemoveFromEventList+0x194>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d15e      	bne.n	800301c <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8002f5e:	6a3b      	ldr	r3, [r7, #32]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	617b      	str	r3, [r7, #20]
 8002f64:	6a3b      	ldr	r3, [r7, #32]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	6a3a      	ldr	r2, [r7, #32]
 8002f6a:	68d2      	ldr	r2, [r2, #12]
 8002f6c:	609a      	str	r2, [r3, #8]
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	6a3a      	ldr	r2, [r7, #32]
 8002f74:	6892      	ldr	r2, [r2, #8]
 8002f76:	605a      	str	r2, [r3, #4]
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	685a      	ldr	r2, [r3, #4]
 8002f7c:	6a3b      	ldr	r3, [r7, #32]
 8002f7e:	3304      	adds	r3, #4
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d103      	bne.n	8002f8c <xTaskRemoveFromEventList+0xa0>
 8002f84:	6a3b      	ldr	r3, [r7, #32]
 8002f86:	68da      	ldr	r2, [r3, #12]
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	605a      	str	r2, [r3, #4]
 8002f8c:	6a3b      	ldr	r3, [r7, #32]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	615a      	str	r2, [r3, #20]
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	1e5a      	subs	r2, r3, #1
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002f9c:	6a3b      	ldr	r3, [r7, #32]
 8002f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	409a      	lsls	r2, r3
 8002fa4:	4b37      	ldr	r3, [pc, #220]	; (8003084 <xTaskRemoveFromEventList+0x198>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	4a36      	ldr	r2, [pc, #216]	; (8003084 <xTaskRemoveFromEventList+0x198>)
 8002fac:	6013      	str	r3, [r2, #0]
 8002fae:	6a3b      	ldr	r3, [r7, #32]
 8002fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fb2:	4935      	ldr	r1, [pc, #212]	; (8003088 <xTaskRemoveFromEventList+0x19c>)
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4413      	add	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	3304      	adds	r3, #4
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	613b      	str	r3, [r7, #16]
 8002fc4:	6a3b      	ldr	r3, [r7, #32]
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	609a      	str	r2, [r3, #8]
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	689a      	ldr	r2, [r3, #8]
 8002fce:	6a3b      	ldr	r3, [r7, #32]
 8002fd0:	60da      	str	r2, [r3, #12]
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	6a3a      	ldr	r2, [r7, #32]
 8002fd8:	3204      	adds	r2, #4
 8002fda:	605a      	str	r2, [r3, #4]
 8002fdc:	6a3b      	ldr	r3, [r7, #32]
 8002fde:	1d1a      	adds	r2, r3, #4
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	609a      	str	r2, [r3, #8]
 8002fe4:	6a3b      	ldr	r3, [r7, #32]
 8002fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fe8:	4613      	mov	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4413      	add	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4a25      	ldr	r2, [pc, #148]	; (8003088 <xTaskRemoveFromEventList+0x19c>)
 8002ff2:	441a      	add	r2, r3
 8002ff4:	6a3b      	ldr	r3, [r7, #32]
 8002ff6:	615a      	str	r2, [r3, #20]
 8002ff8:	6a3b      	ldr	r3, [r7, #32]
 8002ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ffc:	4922      	ldr	r1, [pc, #136]	; (8003088 <xTaskRemoveFromEventList+0x19c>)
 8002ffe:	4613      	mov	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4413      	add	r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	440b      	add	r3, r1
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	1c59      	adds	r1, r3, #1
 800300c:	481e      	ldr	r0, [pc, #120]	; (8003088 <xTaskRemoveFromEventList+0x19c>)
 800300e:	4613      	mov	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	4413      	add	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	4403      	add	r3, r0
 8003018:	6019      	str	r1, [r3, #0]
 800301a:	e01b      	b.n	8003054 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800301c:	4b1b      	ldr	r3, [pc, #108]	; (800308c <xTaskRemoveFromEventList+0x1a0>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	61bb      	str	r3, [r7, #24]
 8003022:	6a3b      	ldr	r3, [r7, #32]
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	61da      	str	r2, [r3, #28]
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	6a3b      	ldr	r3, [r7, #32]
 800302e:	621a      	str	r2, [r3, #32]
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	6a3a      	ldr	r2, [r7, #32]
 8003036:	3218      	adds	r2, #24
 8003038:	605a      	str	r2, [r3, #4]
 800303a:	6a3b      	ldr	r3, [r7, #32]
 800303c:	f103 0218 	add.w	r2, r3, #24
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	609a      	str	r2, [r3, #8]
 8003044:	6a3b      	ldr	r3, [r7, #32]
 8003046:	4a11      	ldr	r2, [pc, #68]	; (800308c <xTaskRemoveFromEventList+0x1a0>)
 8003048:	629a      	str	r2, [r3, #40]	; 0x28
 800304a:	4b10      	ldr	r3, [pc, #64]	; (800308c <xTaskRemoveFromEventList+0x1a0>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	3301      	adds	r3, #1
 8003050:	4a0e      	ldr	r2, [pc, #56]	; (800308c <xTaskRemoveFromEventList+0x1a0>)
 8003052:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003054:	6a3b      	ldr	r3, [r7, #32]
 8003056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003058:	4b0d      	ldr	r3, [pc, #52]	; (8003090 <xTaskRemoveFromEventList+0x1a4>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305e:	429a      	cmp	r2, r3
 8003060:	d905      	bls.n	800306e <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003062:	2301      	movs	r3, #1
 8003064:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003066:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <xTaskRemoveFromEventList+0x1a8>)
 8003068:	2201      	movs	r2, #1
 800306a:	601a      	str	r2, [r3, #0]
 800306c:	e001      	b.n	8003072 <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 800306e:	2300      	movs	r3, #0
 8003070:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8003072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003074:	4618      	mov	r0, r3
 8003076:	372c      	adds	r7, #44	; 0x2c
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr
 8003080:	20000254 	.word	0x20000254
 8003084:	20000234 	.word	0x20000234
 8003088:	20000158 	.word	0x20000158
 800308c:	200001ec 	.word	0x200001ec
 8003090:	20000154 	.word	0x20000154
 8003094:	20000240 	.word	0x20000240

08003098 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80030a0:	4b06      	ldr	r3, [pc, #24]	; (80030bc <vTaskInternalSetTimeOutState+0x24>)
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80030a8:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <vTaskInternalSetTimeOutState+0x28>)
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	605a      	str	r2, [r3, #4]
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	20000244 	.word	0x20000244
 80030c0:	20000230 	.word	0x20000230

080030c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b088      	sub	sp, #32
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10a      	bne.n	80030ea <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80030d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d8:	f383 8811 	msr	BASEPRI, r3
 80030dc:	f3bf 8f6f 	isb	sy
 80030e0:	f3bf 8f4f 	dsb	sy
 80030e4:	613b      	str	r3, [r7, #16]
    }
 80030e6:	bf00      	nop
 80030e8:	e7fe      	b.n	80030e8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d10a      	bne.n	8003106 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80030f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f4:	f383 8811 	msr	BASEPRI, r3
 80030f8:	f3bf 8f6f 	isb	sy
 80030fc:	f3bf 8f4f 	dsb	sy
 8003100:	60fb      	str	r3, [r7, #12]
    }
 8003102:	bf00      	nop
 8003104:	e7fe      	b.n	8003104 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003106:	f000 fdf7 	bl	8003cf8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800310a:	4b1f      	ldr	r3, [pc, #124]	; (8003188 <xTaskCheckForTimeOut+0xc4>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003122:	d102      	bne.n	800312a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003124:	2300      	movs	r3, #0
 8003126:	61fb      	str	r3, [r7, #28]
 8003128:	e026      	b.n	8003178 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	4b17      	ldr	r3, [pc, #92]	; (800318c <xTaskCheckForTimeOut+0xc8>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	429a      	cmp	r2, r3
 8003134:	d00a      	beq.n	800314c <xTaskCheckForTimeOut+0x88>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	429a      	cmp	r2, r3
 800313e:	d305      	bcc.n	800314c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003140:	2301      	movs	r3, #1
 8003142:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	2200      	movs	r2, #0
 8003148:	601a      	str	r2, [r3, #0]
 800314a:	e015      	b.n	8003178 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	697a      	ldr	r2, [r7, #20]
 8003152:	429a      	cmp	r2, r3
 8003154:	d20b      	bcs.n	800316e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	1ad2      	subs	r2, r2, r3
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7ff ff98 	bl	8003098 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003168:	2300      	movs	r3, #0
 800316a:	61fb      	str	r3, [r7, #28]
 800316c:	e004      	b.n	8003178 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003174:	2301      	movs	r3, #1
 8003176:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003178:	f000 fdee 	bl	8003d58 <vPortExitCritical>

    return xReturn;
 800317c:	69fb      	ldr	r3, [r7, #28]
}
 800317e:	4618      	mov	r0, r3
 8003180:	3720      	adds	r7, #32
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	20000230 	.word	0x20000230
 800318c:	20000244 	.word	0x20000244

08003190 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003194:	4b03      	ldr	r3, [pc, #12]	; (80031a4 <vTaskMissedYield+0x14>)
 8003196:	2201      	movs	r2, #1
 8003198:	601a      	str	r2, [r3, #0]
}
 800319a:	bf00      	nop
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	20000240 	.word	0x20000240

080031a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80031b0:	f000 f852 	bl	8003258 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80031b4:	4b06      	ldr	r3, [pc, #24]	; (80031d0 <prvIdleTask+0x28>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d9f9      	bls.n	80031b0 <prvIdleTask+0x8>
            {
                taskYIELD();
 80031bc:	4b05      	ldr	r3, [pc, #20]	; (80031d4 <prvIdleTask+0x2c>)
 80031be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	f3bf 8f4f 	dsb	sy
 80031c8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80031cc:	e7f0      	b.n	80031b0 <prvIdleTask+0x8>
 80031ce:	bf00      	nop
 80031d0:	20000158 	.word	0x20000158
 80031d4:	e000ed04 	.word	0xe000ed04

080031d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80031de:	2300      	movs	r3, #0
 80031e0:	607b      	str	r3, [r7, #4]
 80031e2:	e00c      	b.n	80031fe <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	4613      	mov	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4413      	add	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4a12      	ldr	r2, [pc, #72]	; (8003238 <prvInitialiseTaskLists+0x60>)
 80031f0:	4413      	add	r3, r2
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7fe fc92 	bl	8001b1c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3301      	adds	r3, #1
 80031fc:	607b      	str	r3, [r7, #4]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b04      	cmp	r3, #4
 8003202:	d9ef      	bls.n	80031e4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003204:	480d      	ldr	r0, [pc, #52]	; (800323c <prvInitialiseTaskLists+0x64>)
 8003206:	f7fe fc89 	bl	8001b1c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800320a:	480d      	ldr	r0, [pc, #52]	; (8003240 <prvInitialiseTaskLists+0x68>)
 800320c:	f7fe fc86 	bl	8001b1c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003210:	480c      	ldr	r0, [pc, #48]	; (8003244 <prvInitialiseTaskLists+0x6c>)
 8003212:	f7fe fc83 	bl	8001b1c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003216:	480c      	ldr	r0, [pc, #48]	; (8003248 <prvInitialiseTaskLists+0x70>)
 8003218:	f7fe fc80 	bl	8001b1c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800321c:	480b      	ldr	r0, [pc, #44]	; (800324c <prvInitialiseTaskLists+0x74>)
 800321e:	f7fe fc7d 	bl	8001b1c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003222:	4b0b      	ldr	r3, [pc, #44]	; (8003250 <prvInitialiseTaskLists+0x78>)
 8003224:	4a05      	ldr	r2, [pc, #20]	; (800323c <prvInitialiseTaskLists+0x64>)
 8003226:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003228:	4b0a      	ldr	r3, [pc, #40]	; (8003254 <prvInitialiseTaskLists+0x7c>)
 800322a:	4a05      	ldr	r2, [pc, #20]	; (8003240 <prvInitialiseTaskLists+0x68>)
 800322c:	601a      	str	r2, [r3, #0]
}
 800322e:	bf00      	nop
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	20000158 	.word	0x20000158
 800323c:	200001bc 	.word	0x200001bc
 8003240:	200001d0 	.word	0x200001d0
 8003244:	200001ec 	.word	0x200001ec
 8003248:	20000200 	.word	0x20000200
 800324c:	20000218 	.word	0x20000218
 8003250:	200001e4 	.word	0x200001e4
 8003254:	200001e8 	.word	0x200001e8

08003258 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800325e:	e019      	b.n	8003294 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003260:	f000 fd4a 	bl	8003cf8 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003264:	4b10      	ldr	r3, [pc, #64]	; (80032a8 <prvCheckTasksWaitingTermination+0x50>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	3304      	adds	r3, #4
 8003270:	4618      	mov	r0, r3
 8003272:	f7fe fcb9 	bl	8001be8 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003276:	4b0d      	ldr	r3, [pc, #52]	; (80032ac <prvCheckTasksWaitingTermination+0x54>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	3b01      	subs	r3, #1
 800327c:	4a0b      	ldr	r2, [pc, #44]	; (80032ac <prvCheckTasksWaitingTermination+0x54>)
 800327e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003280:	4b0b      	ldr	r3, [pc, #44]	; (80032b0 <prvCheckTasksWaitingTermination+0x58>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	3b01      	subs	r3, #1
 8003286:	4a0a      	ldr	r2, [pc, #40]	; (80032b0 <prvCheckTasksWaitingTermination+0x58>)
 8003288:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800328a:	f000 fd65 	bl	8003d58 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 f810 	bl	80032b4 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003294:	4b06      	ldr	r3, [pc, #24]	; (80032b0 <prvCheckTasksWaitingTermination+0x58>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1e1      	bne.n	8003260 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800329c:	bf00      	nop
 800329e:	bf00      	nop
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	20000200 	.word	0x20000200
 80032ac:	2000022c 	.word	0x2000022c
 80032b0:	20000214 	.word	0x20000214

080032b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c0:	4618      	mov	r0, r3
 80032c2:	f000 feb5 	bl	8004030 <vPortFree>
            vPortFree( pxTCB );
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 feb2 	bl	8004030 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80032cc:	bf00      	nop
 80032ce:	3708      	adds	r7, #8
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80032d4:	b480      	push	{r7}
 80032d6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032d8:	4b0a      	ldr	r3, [pc, #40]	; (8003304 <prvResetNextTaskUnblockTime+0x30>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d104      	bne.n	80032ec <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80032e2:	4b09      	ldr	r3, [pc, #36]	; (8003308 <prvResetNextTaskUnblockTime+0x34>)
 80032e4:	f04f 32ff 	mov.w	r2, #4294967295
 80032e8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80032ea:	e005      	b.n	80032f8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80032ec:	4b05      	ldr	r3, [pc, #20]	; (8003304 <prvResetNextTaskUnblockTime+0x30>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a04      	ldr	r2, [pc, #16]	; (8003308 <prvResetNextTaskUnblockTime+0x34>)
 80032f6:	6013      	str	r3, [r2, #0]
}
 80032f8:	bf00      	nop
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	200001e4 	.word	0x200001e4
 8003308:	2000024c 	.word	0x2000024c

0800330c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003312:	4b0b      	ldr	r3, [pc, #44]	; (8003340 <xTaskGetSchedulerState+0x34>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d102      	bne.n	8003320 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800331a:	2301      	movs	r3, #1
 800331c:	607b      	str	r3, [r7, #4]
 800331e:	e008      	b.n	8003332 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003320:	4b08      	ldr	r3, [pc, #32]	; (8003344 <xTaskGetSchedulerState+0x38>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d102      	bne.n	800332e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003328:	2302      	movs	r3, #2
 800332a:	607b      	str	r3, [r7, #4]
 800332c:	e001      	b.n	8003332 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800332e:	2300      	movs	r3, #0
 8003330:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003332:	687b      	ldr	r3, [r7, #4]
    }
 8003334:	4618      	mov	r0, r3
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr
 8003340:	20000238 	.word	0x20000238
 8003344:	20000254 	.word	0x20000254

08003348 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003348:	b580      	push	{r7, lr}
 800334a:	b088      	sub	sp, #32
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8003354:	2300      	movs	r3, #0
 8003356:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 808c 	beq.w	8003478 <xTaskPriorityDisinherit+0x130>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003360:	4b48      	ldr	r3, [pc, #288]	; (8003484 <xTaskPriorityDisinherit+0x13c>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	429a      	cmp	r2, r3
 8003368:	d00a      	beq.n	8003380 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 800336a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800336e:	f383 8811 	msr	BASEPRI, r3
 8003372:	f3bf 8f6f 	isb	sy
 8003376:	f3bf 8f4f 	dsb	sy
 800337a:	613b      	str	r3, [r7, #16]
    }
 800337c:	bf00      	nop
 800337e:	e7fe      	b.n	800337e <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10a      	bne.n	800339e <xTaskPriorityDisinherit+0x56>
        __asm volatile
 8003388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800338c:	f383 8811 	msr	BASEPRI, r3
 8003390:	f3bf 8f6f 	isb	sy
 8003394:	f3bf 8f4f 	dsb	sy
 8003398:	60fb      	str	r3, [r7, #12]
    }
 800339a:	bf00      	nop
 800339c:	e7fe      	b.n	800339c <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a2:	1e5a      	subs	r2, r3, #1
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	655a      	str	r2, [r3, #84]	; 0x54

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d061      	beq.n	8003478 <xTaskPriorityDisinherit+0x130>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d15d      	bne.n	8003478 <xTaskPriorityDisinherit+0x130>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	3304      	adds	r3, #4
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7fe fc11 	bl	8001be8 <uxListRemove>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d10a      	bne.n	80033e2 <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d0:	2201      	movs	r2, #1
 80033d2:	fa02 f303 	lsl.w	r3, r2, r3
 80033d6:	43da      	mvns	r2, r3
 80033d8:	4b2b      	ldr	r3, [pc, #172]	; (8003488 <xTaskPriorityDisinherit+0x140>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4013      	ands	r3, r2
 80033de:	4a2a      	ldr	r2, [pc, #168]	; (8003488 <xTaskPriorityDisinherit+0x140>)
 80033e0:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ee:	f1c3 0205 	rsb	r2, r3, #5
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fa:	2201      	movs	r2, #1
 80033fc:	409a      	lsls	r2, r3
 80033fe:	4b22      	ldr	r3, [pc, #136]	; (8003488 <xTaskPriorityDisinherit+0x140>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4313      	orrs	r3, r2
 8003404:	4a20      	ldr	r2, [pc, #128]	; (8003488 <xTaskPriorityDisinherit+0x140>)
 8003406:	6013      	str	r3, [r2, #0]
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800340c:	491f      	ldr	r1, [pc, #124]	; (800348c <xTaskPriorityDisinherit+0x144>)
 800340e:	4613      	mov	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	4413      	add	r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	440b      	add	r3, r1
 8003418:	3304      	adds	r3, #4
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	617b      	str	r3, [r7, #20]
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	697a      	ldr	r2, [r7, #20]
 8003422:	609a      	str	r2, [r3, #8]
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	60da      	str	r2, [r3, #12]
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	3204      	adds	r2, #4
 8003434:	605a      	str	r2, [r3, #4]
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	1d1a      	adds	r2, r3, #4
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	609a      	str	r2, [r3, #8]
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003442:	4613      	mov	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4a10      	ldr	r2, [pc, #64]	; (800348c <xTaskPriorityDisinherit+0x144>)
 800344c:	441a      	add	r2, r3
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	615a      	str	r2, [r3, #20]
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003456:	490d      	ldr	r1, [pc, #52]	; (800348c <xTaskPriorityDisinherit+0x144>)
 8003458:	4613      	mov	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4413      	add	r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	440b      	add	r3, r1
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	1c59      	adds	r1, r3, #1
 8003466:	4809      	ldr	r0, [pc, #36]	; (800348c <xTaskPriorityDisinherit+0x144>)
 8003468:	4613      	mov	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4413      	add	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	4403      	add	r3, r0
 8003472:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003474:	2301      	movs	r3, #1
 8003476:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003478:	69fb      	ldr	r3, [r7, #28]
    }
 800347a:	4618      	mov	r0, r3
 800347c:	3720      	adds	r7, #32
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	20000154 	.word	0x20000154
 8003488:	20000234 	.word	0x20000234
 800348c:	20000158 	.word	0x20000158

08003490 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800349a:	4b36      	ldr	r3, [pc, #216]	; (8003574 <prvAddCurrentTaskToDelayedList+0xe4>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034a0:	4b35      	ldr	r3, [pc, #212]	; (8003578 <prvAddCurrentTaskToDelayedList+0xe8>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	3304      	adds	r3, #4
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7fe fb9e 	bl	8001be8 <uxListRemove>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10b      	bne.n	80034ca <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80034b2:	4b31      	ldr	r3, [pc, #196]	; (8003578 <prvAddCurrentTaskToDelayedList+0xe8>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b8:	2201      	movs	r2, #1
 80034ba:	fa02 f303 	lsl.w	r3, r2, r3
 80034be:	43da      	mvns	r2, r3
 80034c0:	4b2e      	ldr	r3, [pc, #184]	; (800357c <prvAddCurrentTaskToDelayedList+0xec>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4013      	ands	r3, r2
 80034c6:	4a2d      	ldr	r2, [pc, #180]	; (800357c <prvAddCurrentTaskToDelayedList+0xec>)
 80034c8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d0:	d124      	bne.n	800351c <prvAddCurrentTaskToDelayedList+0x8c>
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d021      	beq.n	800351c <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034d8:	4b29      	ldr	r3, [pc, #164]	; (8003580 <prvAddCurrentTaskToDelayedList+0xf0>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	613b      	str	r3, [r7, #16]
 80034de:	4b26      	ldr	r3, [pc, #152]	; (8003578 <prvAddCurrentTaskToDelayedList+0xe8>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	609a      	str	r2, [r3, #8]
 80034e6:	4b24      	ldr	r3, [pc, #144]	; (8003578 <prvAddCurrentTaskToDelayedList+0xe8>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	6892      	ldr	r2, [r2, #8]
 80034ee:	60da      	str	r2, [r3, #12]
 80034f0:	4b21      	ldr	r3, [pc, #132]	; (8003578 <prvAddCurrentTaskToDelayedList+0xe8>)
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	3204      	adds	r2, #4
 80034fa:	605a      	str	r2, [r3, #4]
 80034fc:	4b1e      	ldr	r3, [pc, #120]	; (8003578 <prvAddCurrentTaskToDelayedList+0xe8>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	1d1a      	adds	r2, r3, #4
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	609a      	str	r2, [r3, #8]
 8003506:	4b1c      	ldr	r3, [pc, #112]	; (8003578 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a1d      	ldr	r2, [pc, #116]	; (8003580 <prvAddCurrentTaskToDelayedList+0xf0>)
 800350c:	615a      	str	r2, [r3, #20]
 800350e:	4b1c      	ldr	r3, [pc, #112]	; (8003580 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	3301      	adds	r3, #1
 8003514:	4a1a      	ldr	r2, [pc, #104]	; (8003580 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003516:	6013      	str	r3, [r2, #0]
 8003518:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800351a:	e026      	b.n	800356a <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4413      	add	r3, r2
 8003522:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003524:	4b14      	ldr	r3, [pc, #80]	; (8003578 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	429a      	cmp	r2, r3
 8003532:	d209      	bcs.n	8003548 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003534:	4b13      	ldr	r3, [pc, #76]	; (8003584 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	4b0f      	ldr	r3, [pc, #60]	; (8003578 <prvAddCurrentTaskToDelayedList+0xe8>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	3304      	adds	r3, #4
 800353e:	4619      	mov	r1, r3
 8003540:	4610      	mov	r0, r2
 8003542:	f7fe fb18 	bl	8001b76 <vListInsert>
}
 8003546:	e010      	b.n	800356a <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003548:	4b0f      	ldr	r3, [pc, #60]	; (8003588 <prvAddCurrentTaskToDelayedList+0xf8>)
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	4b0a      	ldr	r3, [pc, #40]	; (8003578 <prvAddCurrentTaskToDelayedList+0xe8>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	3304      	adds	r3, #4
 8003552:	4619      	mov	r1, r3
 8003554:	4610      	mov	r0, r2
 8003556:	f7fe fb0e 	bl	8001b76 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800355a:	4b0c      	ldr	r3, [pc, #48]	; (800358c <prvAddCurrentTaskToDelayedList+0xfc>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	429a      	cmp	r2, r3
 8003562:	d202      	bcs.n	800356a <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003564:	4a09      	ldr	r2, [pc, #36]	; (800358c <prvAddCurrentTaskToDelayedList+0xfc>)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6013      	str	r3, [r2, #0]
}
 800356a:	bf00      	nop
 800356c:	3718      	adds	r7, #24
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	20000230 	.word	0x20000230
 8003578:	20000154 	.word	0x20000154
 800357c:	20000234 	.word	0x20000234
 8003580:	20000218 	.word	0x20000218
 8003584:	200001e8 	.word	0x200001e8
 8003588:	200001e4 	.word	0x200001e4
 800358c:	2000024c 	.word	0x2000024c

08003590 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003596:	2300      	movs	r3, #0
 8003598:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800359a:	f000 fa47 	bl	8003a2c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800359e:	4b11      	ldr	r3, [pc, #68]	; (80035e4 <xTimerCreateTimerTask+0x54>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00b      	beq.n	80035be <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80035a6:	4b10      	ldr	r3, [pc, #64]	; (80035e8 <xTimerCreateTimerTask+0x58>)
 80035a8:	9301      	str	r3, [sp, #4]
 80035aa:	2302      	movs	r3, #2
 80035ac:	9300      	str	r3, [sp, #0]
 80035ae:	2300      	movs	r3, #0
 80035b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80035b4:	490d      	ldr	r1, [pc, #52]	; (80035ec <xTimerCreateTimerTask+0x5c>)
 80035b6:	480e      	ldr	r0, [pc, #56]	; (80035f0 <xTimerCreateTimerTask+0x60>)
 80035b8:	f7fe ffb2 	bl	8002520 <xTaskCreate>
 80035bc:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d10a      	bne.n	80035da <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80035c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c8:	f383 8811 	msr	BASEPRI, r3
 80035cc:	f3bf 8f6f 	isb	sy
 80035d0:	f3bf 8f4f 	dsb	sy
 80035d4:	603b      	str	r3, [r7, #0]
    }
 80035d6:	bf00      	nop
 80035d8:	e7fe      	b.n	80035d8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80035da:	687b      	ldr	r3, [r7, #4]
    }
 80035dc:	4618      	mov	r0, r3
 80035de:	3708      	adds	r7, #8
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	20000288 	.word	0x20000288
 80035e8:	2000028c 	.word	0x2000028c
 80035ec:	08005360 	.word	0x08005360
 80035f0:	08003699 	.word	0x08003699

080035f4 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003600:	e008      	b.n	8003614 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	68ba      	ldr	r2, [r7, #8]
 8003608:	4413      	add	r3, r2
 800360a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6a1b      	ldr	r3, [r3, #32]
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	699a      	ldr	r2, [r3, #24]
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	18d1      	adds	r1, r2, r3
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f000 f8dd 	bl	80037e0 <prvInsertTimerInActiveList>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1ea      	bne.n	8003602 <prvReloadTimer+0xe>
        }
    }
 800362c:	bf00      	nop
 800362e:	bf00      	nop
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
	...

08003638 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003642:	4b14      	ldr	r3, [pc, #80]	; (8003694 <prvProcessExpiredTimer+0x5c>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	3304      	adds	r3, #4
 8003650:	4618      	mov	r0, r3
 8003652:	f7fe fac9 	bl	8001be8 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800365c:	f003 0304 	and.w	r3, r3, #4
 8003660:	2b00      	cmp	r3, #0
 8003662:	d005      	beq.n	8003670 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	6879      	ldr	r1, [r7, #4]
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f7ff ffc3 	bl	80035f4 <prvReloadTimer>
 800366e:	e008      	b.n	8003682 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003676:	f023 0301 	bic.w	r3, r3, #1
 800367a:	b2da      	uxtb	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	4798      	blx	r3
    }
 800368a:	bf00      	nop
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	20000280 	.word	0x20000280

08003698 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80036a0:	f107 0308 	add.w	r3, r7, #8
 80036a4:	4618      	mov	r0, r3
 80036a6:	f000 f857 	bl	8003758 <prvGetNextExpireTime>
 80036aa:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	4619      	mov	r1, r3
 80036b0:	68f8      	ldr	r0, [r7, #12]
 80036b2:	f000 f803 	bl	80036bc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80036b6:	f000 f8d5 	bl	8003864 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80036ba:	e7f1      	b.n	80036a0 <prvTimerTask+0x8>

080036bc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80036c6:	f7ff f91b 	bl	8002900 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80036ca:	f107 0308 	add.w	r3, r7, #8
 80036ce:	4618      	mov	r0, r3
 80036d0:	f000 f866 	bl	80037a0 <prvSampleTimeNow>
 80036d4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d130      	bne.n	800373e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d10a      	bne.n	80036f8 <prvProcessTimerOrBlockTask+0x3c>
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d806      	bhi.n	80036f8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80036ea:	f7ff f917 	bl	800291c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80036ee:	68f9      	ldr	r1, [r7, #12]
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f7ff ffa1 	bl	8003638 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80036f6:	e024      	b.n	8003742 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d008      	beq.n	8003710 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80036fe:	4b13      	ldr	r3, [pc, #76]	; (800374c <prvProcessTimerOrBlockTask+0x90>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d101      	bne.n	800370c <prvProcessTimerOrBlockTask+0x50>
 8003708:	2301      	movs	r3, #1
 800370a:	e000      	b.n	800370e <prvProcessTimerOrBlockTask+0x52>
 800370c:	2300      	movs	r3, #0
 800370e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003710:	4b0f      	ldr	r3, [pc, #60]	; (8003750 <prvProcessTimerOrBlockTask+0x94>)
 8003712:	6818      	ldr	r0, [r3, #0]
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	4619      	mov	r1, r3
 800371e:	f7fe fecb 	bl	80024b8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003722:	f7ff f8fb 	bl	800291c <xTaskResumeAll>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d10a      	bne.n	8003742 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800372c:	4b09      	ldr	r3, [pc, #36]	; (8003754 <prvProcessTimerOrBlockTask+0x98>)
 800372e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	f3bf 8f4f 	dsb	sy
 8003738:	f3bf 8f6f 	isb	sy
    }
 800373c:	e001      	b.n	8003742 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800373e:	f7ff f8ed 	bl	800291c <xTaskResumeAll>
    }
 8003742:	bf00      	nop
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	20000284 	.word	0x20000284
 8003750:	20000288 	.word	0x20000288
 8003754:	e000ed04 	.word	0xe000ed04

08003758 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003760:	4b0e      	ldr	r3, [pc, #56]	; (800379c <prvGetNextExpireTime+0x44>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <prvGetNextExpireTime+0x16>
 800376a:	2201      	movs	r2, #1
 800376c:	e000      	b.n	8003770 <prvGetNextExpireTime+0x18>
 800376e:	2200      	movs	r2, #0
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d105      	bne.n	8003788 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800377c:	4b07      	ldr	r3, [pc, #28]	; (800379c <prvGetNextExpireTime+0x44>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	60fb      	str	r3, [r7, #12]
 8003786:	e001      	b.n	800378c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003788:	2300      	movs	r3, #0
 800378a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800378c:	68fb      	ldr	r3, [r7, #12]
    }
 800378e:	4618      	mov	r0, r3
 8003790:	3714      	adds	r7, #20
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	20000280 	.word	0x20000280

080037a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80037a8:	f7ff f9b4 	bl	8002b14 <xTaskGetTickCount>
 80037ac:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80037ae:	4b0b      	ldr	r3, [pc, #44]	; (80037dc <prvSampleTimeNow+0x3c>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d205      	bcs.n	80037c4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80037b8:	f000 f912 	bl	80039e0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	601a      	str	r2, [r3, #0]
 80037c2:	e002      	b.n	80037ca <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80037ca:	4a04      	ldr	r2, [pc, #16]	; (80037dc <prvSampleTimeNow+0x3c>)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80037d0:	68fb      	ldr	r3, [r7, #12]
    }
 80037d2:	4618      	mov	r0, r3
 80037d4:	3710      	adds	r7, #16
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	20000290 	.word	0x20000290

080037e0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b086      	sub	sp, #24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
 80037ec:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80037ee:	2300      	movs	r3, #0
 80037f0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	68ba      	ldr	r2, [r7, #8]
 80037f6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80037fe:	68ba      	ldr	r2, [r7, #8]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	429a      	cmp	r2, r3
 8003804:	d812      	bhi.n	800382c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	1ad2      	subs	r2, r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	429a      	cmp	r2, r3
 8003812:	d302      	bcc.n	800381a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003814:	2301      	movs	r3, #1
 8003816:	617b      	str	r3, [r7, #20]
 8003818:	e01b      	b.n	8003852 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800381a:	4b10      	ldr	r3, [pc, #64]	; (800385c <prvInsertTimerInActiveList+0x7c>)
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	3304      	adds	r3, #4
 8003822:	4619      	mov	r1, r3
 8003824:	4610      	mov	r0, r2
 8003826:	f7fe f9a6 	bl	8001b76 <vListInsert>
 800382a:	e012      	b.n	8003852 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	429a      	cmp	r2, r3
 8003832:	d206      	bcs.n	8003842 <prvInsertTimerInActiveList+0x62>
 8003834:	68ba      	ldr	r2, [r7, #8]
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	429a      	cmp	r2, r3
 800383a:	d302      	bcc.n	8003842 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800383c:	2301      	movs	r3, #1
 800383e:	617b      	str	r3, [r7, #20]
 8003840:	e007      	b.n	8003852 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003842:	4b07      	ldr	r3, [pc, #28]	; (8003860 <prvInsertTimerInActiveList+0x80>)
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	3304      	adds	r3, #4
 800384a:	4619      	mov	r1, r3
 800384c:	4610      	mov	r0, r2
 800384e:	f7fe f992 	bl	8001b76 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003852:	697b      	ldr	r3, [r7, #20]
    }
 8003854:	4618      	mov	r0, r3
 8003856:	3718      	adds	r7, #24
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	20000284 	.word	0x20000284
 8003860:	20000280 	.word	0x20000280

08003864 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003864:	b580      	push	{r7, lr}
 8003866:	b088      	sub	sp, #32
 8003868:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800386a:	e0a6      	b.n	80039ba <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	2b00      	cmp	r3, #0
 8003870:	f2c0 80a2 	blt.w	80039b8 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d004      	beq.n	800388a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	3304      	adds	r3, #4
 8003884:	4618      	mov	r0, r3
 8003886:	f7fe f9af 	bl	8001be8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800388a:	1d3b      	adds	r3, r7, #4
 800388c:	4618      	mov	r0, r3
 800388e:	f7ff ff87 	bl	80037a0 <prvSampleTimeNow>
 8003892:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	3b01      	subs	r3, #1
 8003898:	2b08      	cmp	r3, #8
 800389a:	f200 808e 	bhi.w	80039ba <prvProcessReceivedCommands+0x156>
 800389e:	a201      	add	r2, pc, #4	; (adr r2, 80038a4 <prvProcessReceivedCommands+0x40>)
 80038a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a4:	080038c9 	.word	0x080038c9
 80038a8:	080038c9 	.word	0x080038c9
 80038ac:	08003931 	.word	0x08003931
 80038b0:	08003945 	.word	0x08003945
 80038b4:	0800398f 	.word	0x0800398f
 80038b8:	080038c9 	.word	0x080038c9
 80038bc:	080038c9 	.word	0x080038c9
 80038c0:	08003931 	.word	0x08003931
 80038c4:	08003945 	.word	0x08003945
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038ce:	f043 0301 	orr.w	r3, r3, #1
 80038d2:	b2da      	uxtb	r2, r3
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	18d1      	adds	r1, r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	69f8      	ldr	r0, [r7, #28]
 80038e8:	f7ff ff7a 	bl	80037e0 <prvInsertTimerInActiveList>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d063      	beq.n	80039ba <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038f8:	f003 0304 	and.w	r3, r3, #4
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d009      	beq.n	8003914 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	4413      	add	r3, r2
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	4619      	mov	r1, r3
 800390c:	69f8      	ldr	r0, [r7, #28]
 800390e:	f7ff fe71 	bl	80035f4 <prvReloadTimer>
 8003912:	e008      	b.n	8003926 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800391a:	f023 0301 	bic.w	r3, r3, #1
 800391e:	b2da      	uxtb	r2, r3
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	69f8      	ldr	r0, [r7, #28]
 800392c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800392e:	e044      	b.n	80039ba <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003936:	f023 0301 	bic.w	r3, r3, #1
 800393a:	b2da      	uxtb	r2, r3
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003942:	e03a      	b.n	80039ba <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800394a:	f043 0301 	orr.w	r3, r3, #1
 800394e:	b2da      	uxtb	r2, r3
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10a      	bne.n	800397a <prvProcessReceivedCommands+0x116>
        __asm volatile
 8003964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003968:	f383 8811 	msr	BASEPRI, r3
 800396c:	f3bf 8f6f 	isb	sy
 8003970:	f3bf 8f4f 	dsb	sy
 8003974:	617b      	str	r3, [r7, #20]
    }
 8003976:	bf00      	nop
 8003978:	e7fe      	b.n	8003978 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	699a      	ldr	r2, [r3, #24]
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	18d1      	adds	r1, r2, r3
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	69f8      	ldr	r0, [r7, #28]
 8003988:	f7ff ff2a 	bl	80037e0 <prvInsertTimerInActiveList>
                        break;
 800398c:	e015      	b.n	80039ba <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d103      	bne.n	80039a4 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 800399c:	69f8      	ldr	r0, [r7, #28]
 800399e:	f000 fb47 	bl	8004030 <vPortFree>
 80039a2:	e00a      	b.n	80039ba <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039aa:	f023 0301 	bic.w	r3, r3, #1
 80039ae:	b2da      	uxtb	r2, r3
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80039b6:	e000      	b.n	80039ba <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80039b8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80039ba:	4b08      	ldr	r3, [pc, #32]	; (80039dc <prvProcessReceivedCommands+0x178>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f107 0108 	add.w	r1, r7, #8
 80039c2:	2200      	movs	r2, #0
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7fe fb39 	bl	800203c <xQueueReceive>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f47f af4d 	bne.w	800386c <prvProcessReceivedCommands+0x8>
        }
    }
 80039d2:	bf00      	nop
 80039d4:	bf00      	nop
 80039d6:	3720      	adds	r7, #32
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	20000288 	.word	0x20000288

080039e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80039e6:	e009      	b.n	80039fc <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80039e8:	4b0e      	ldr	r3, [pc, #56]	; (8003a24 <prvSwitchTimerLists+0x44>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80039f2:	f04f 31ff 	mov.w	r1, #4294967295
 80039f6:	6838      	ldr	r0, [r7, #0]
 80039f8:	f7ff fe1e 	bl	8003638 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80039fc:	4b09      	ldr	r3, [pc, #36]	; (8003a24 <prvSwitchTimerLists+0x44>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1f0      	bne.n	80039e8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003a06:	4b07      	ldr	r3, [pc, #28]	; (8003a24 <prvSwitchTimerLists+0x44>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003a0c:	4b06      	ldr	r3, [pc, #24]	; (8003a28 <prvSwitchTimerLists+0x48>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a04      	ldr	r2, [pc, #16]	; (8003a24 <prvSwitchTimerLists+0x44>)
 8003a12:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003a14:	4a04      	ldr	r2, [pc, #16]	; (8003a28 <prvSwitchTimerLists+0x48>)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6013      	str	r3, [r2, #0]
    }
 8003a1a:	bf00      	nop
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	20000280 	.word	0x20000280
 8003a28:	20000284 	.word	0x20000284

08003a2c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003a30:	f000 f962 	bl	8003cf8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003a34:	4b12      	ldr	r3, [pc, #72]	; (8003a80 <prvCheckForValidListAndQueue+0x54>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d11d      	bne.n	8003a78 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003a3c:	4811      	ldr	r0, [pc, #68]	; (8003a84 <prvCheckForValidListAndQueue+0x58>)
 8003a3e:	f7fe f86d 	bl	8001b1c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003a42:	4811      	ldr	r0, [pc, #68]	; (8003a88 <prvCheckForValidListAndQueue+0x5c>)
 8003a44:	f7fe f86a 	bl	8001b1c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003a48:	4b10      	ldr	r3, [pc, #64]	; (8003a8c <prvCheckForValidListAndQueue+0x60>)
 8003a4a:	4a0e      	ldr	r2, [pc, #56]	; (8003a84 <prvCheckForValidListAndQueue+0x58>)
 8003a4c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003a4e:	4b10      	ldr	r3, [pc, #64]	; (8003a90 <prvCheckForValidListAndQueue+0x64>)
 8003a50:	4a0d      	ldr	r2, [pc, #52]	; (8003a88 <prvCheckForValidListAndQueue+0x5c>)
 8003a52:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003a54:	2200      	movs	r2, #0
 8003a56:	210c      	movs	r1, #12
 8003a58:	200a      	movs	r0, #10
 8003a5a:	f7fe f97f 	bl	8001d5c <xQueueGenericCreate>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	4a07      	ldr	r2, [pc, #28]	; (8003a80 <prvCheckForValidListAndQueue+0x54>)
 8003a62:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003a64:	4b06      	ldr	r3, [pc, #24]	; (8003a80 <prvCheckForValidListAndQueue+0x54>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d005      	beq.n	8003a78 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003a6c:	4b04      	ldr	r3, [pc, #16]	; (8003a80 <prvCheckForValidListAndQueue+0x54>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4908      	ldr	r1, [pc, #32]	; (8003a94 <prvCheckForValidListAndQueue+0x68>)
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7fe fcd2 	bl	800241c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003a78:	f000 f96e 	bl	8003d58 <vPortExitCritical>
    }
 8003a7c:	bf00      	nop
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	20000288 	.word	0x20000288
 8003a84:	20000258 	.word	0x20000258
 8003a88:	2000026c 	.word	0x2000026c
 8003a8c:	20000280 	.word	0x20000280
 8003a90:	20000284 	.word	0x20000284
 8003a94:	08005368 	.word	0x08005368

08003a98 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	3b04      	subs	r3, #4
 8003aa8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ab0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	3b04      	subs	r3, #4
 8003ab6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	f023 0201 	bic.w	r2, r3, #1
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	3b04      	subs	r3, #4
 8003ac6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003ac8:	4a0c      	ldr	r2, [pc, #48]	; (8003afc <pxPortInitialiseStack+0x64>)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	3b14      	subs	r3, #20
 8003ad2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	3b04      	subs	r3, #4
 8003ade:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f06f 0202 	mvn.w	r2, #2
 8003ae6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	3b20      	subs	r3, #32
 8003aec:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003aee:	68fb      	ldr	r3, [r7, #12]
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3714      	adds	r7, #20
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr
 8003afc:	08003b01 	.word	0x08003b01

08003b00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003b00:	b480      	push	{r7}
 8003b02:	b085      	sub	sp, #20
 8003b04:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003b06:	2300      	movs	r3, #0
 8003b08:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003b0a:	4b12      	ldr	r3, [pc, #72]	; (8003b54 <prvTaskExitError+0x54>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b12:	d00a      	beq.n	8003b2a <prvTaskExitError+0x2a>
        __asm volatile
 8003b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b18:	f383 8811 	msr	BASEPRI, r3
 8003b1c:	f3bf 8f6f 	isb	sy
 8003b20:	f3bf 8f4f 	dsb	sy
 8003b24:	60fb      	str	r3, [r7, #12]
    }
 8003b26:	bf00      	nop
 8003b28:	e7fe      	b.n	8003b28 <prvTaskExitError+0x28>
        __asm volatile
 8003b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b2e:	f383 8811 	msr	BASEPRI, r3
 8003b32:	f3bf 8f6f 	isb	sy
 8003b36:	f3bf 8f4f 	dsb	sy
 8003b3a:	60bb      	str	r3, [r7, #8]
    }
 8003b3c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003b3e:	bf00      	nop
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d0fc      	beq.n	8003b40 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003b46:	bf00      	nop
 8003b48:	bf00      	nop
 8003b4a:	3714      	adds	r7, #20
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr
 8003b54:	20000010 	.word	0x20000010
	...

08003b60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003b60:	4b07      	ldr	r3, [pc, #28]	; (8003b80 <pxCurrentTCBConst2>)
 8003b62:	6819      	ldr	r1, [r3, #0]
 8003b64:	6808      	ldr	r0, [r1, #0]
 8003b66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b6a:	f380 8809 	msr	PSP, r0
 8003b6e:	f3bf 8f6f 	isb	sy
 8003b72:	f04f 0000 	mov.w	r0, #0
 8003b76:	f380 8811 	msr	BASEPRI, r0
 8003b7a:	4770      	bx	lr
 8003b7c:	f3af 8000 	nop.w

08003b80 <pxCurrentTCBConst2>:
 8003b80:	20000154 	.word	0x20000154
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003b84:	bf00      	nop
 8003b86:	bf00      	nop

08003b88 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003b88:	4808      	ldr	r0, [pc, #32]	; (8003bac <prvPortStartFirstTask+0x24>)
 8003b8a:	6800      	ldr	r0, [r0, #0]
 8003b8c:	6800      	ldr	r0, [r0, #0]
 8003b8e:	f380 8808 	msr	MSP, r0
 8003b92:	f04f 0000 	mov.w	r0, #0
 8003b96:	f380 8814 	msr	CONTROL, r0
 8003b9a:	b662      	cpsie	i
 8003b9c:	b661      	cpsie	f
 8003b9e:	f3bf 8f4f 	dsb	sy
 8003ba2:	f3bf 8f6f 	isb	sy
 8003ba6:	df00      	svc	0
 8003ba8:	bf00      	nop
 8003baa:	0000      	.short	0x0000
 8003bac:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003bb0:	bf00      	nop
 8003bb2:	bf00      	nop

08003bb4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003bba:	4b46      	ldr	r3, [pc, #280]	; (8003cd4 <xPortStartScheduler+0x120>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a46      	ldr	r2, [pc, #280]	; (8003cd8 <xPortStartScheduler+0x124>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d10a      	bne.n	8003bda <xPortStartScheduler+0x26>
        __asm volatile
 8003bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc8:	f383 8811 	msr	BASEPRI, r3
 8003bcc:	f3bf 8f6f 	isb	sy
 8003bd0:	f3bf 8f4f 	dsb	sy
 8003bd4:	613b      	str	r3, [r7, #16]
    }
 8003bd6:	bf00      	nop
 8003bd8:	e7fe      	b.n	8003bd8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003bda:	4b3e      	ldr	r3, [pc, #248]	; (8003cd4 <xPortStartScheduler+0x120>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a3f      	ldr	r2, [pc, #252]	; (8003cdc <xPortStartScheduler+0x128>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d10a      	bne.n	8003bfa <xPortStartScheduler+0x46>
        __asm volatile
 8003be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be8:	f383 8811 	msr	BASEPRI, r3
 8003bec:	f3bf 8f6f 	isb	sy
 8003bf0:	f3bf 8f4f 	dsb	sy
 8003bf4:	60fb      	str	r3, [r7, #12]
    }
 8003bf6:	bf00      	nop
 8003bf8:	e7fe      	b.n	8003bf8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003bfa:	4b39      	ldr	r3, [pc, #228]	; (8003ce0 <xPortStartScheduler+0x12c>)
 8003bfc:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	22ff      	movs	r2, #255	; 0xff
 8003c0a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003c14:	78fb      	ldrb	r3, [r7, #3]
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003c1c:	b2da      	uxtb	r2, r3
 8003c1e:	4b31      	ldr	r3, [pc, #196]	; (8003ce4 <xPortStartScheduler+0x130>)
 8003c20:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003c22:	4b31      	ldr	r3, [pc, #196]	; (8003ce8 <xPortStartScheduler+0x134>)
 8003c24:	2207      	movs	r2, #7
 8003c26:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c28:	e009      	b.n	8003c3e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8003c2a:	4b2f      	ldr	r3, [pc, #188]	; (8003ce8 <xPortStartScheduler+0x134>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	4a2d      	ldr	r2, [pc, #180]	; (8003ce8 <xPortStartScheduler+0x134>)
 8003c32:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003c34:	78fb      	ldrb	r3, [r7, #3]
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c3e:	78fb      	ldrb	r3, [r7, #3]
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c46:	2b80      	cmp	r3, #128	; 0x80
 8003c48:	d0ef      	beq.n	8003c2a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003c4a:	4b27      	ldr	r3, [pc, #156]	; (8003ce8 <xPortStartScheduler+0x134>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f1c3 0307 	rsb	r3, r3, #7
 8003c52:	2b04      	cmp	r3, #4
 8003c54:	d00a      	beq.n	8003c6c <xPortStartScheduler+0xb8>
        __asm volatile
 8003c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c5a:	f383 8811 	msr	BASEPRI, r3
 8003c5e:	f3bf 8f6f 	isb	sy
 8003c62:	f3bf 8f4f 	dsb	sy
 8003c66:	60bb      	str	r3, [r7, #8]
    }
 8003c68:	bf00      	nop
 8003c6a:	e7fe      	b.n	8003c6a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003c6c:	4b1e      	ldr	r3, [pc, #120]	; (8003ce8 <xPortStartScheduler+0x134>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	021b      	lsls	r3, r3, #8
 8003c72:	4a1d      	ldr	r2, [pc, #116]	; (8003ce8 <xPortStartScheduler+0x134>)
 8003c74:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003c76:	4b1c      	ldr	r3, [pc, #112]	; (8003ce8 <xPortStartScheduler+0x134>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c7e:	4a1a      	ldr	r2, [pc, #104]	; (8003ce8 <xPortStartScheduler+0x134>)
 8003c80:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	b2da      	uxtb	r2, r3
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003c8a:	4b18      	ldr	r3, [pc, #96]	; (8003cec <xPortStartScheduler+0x138>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a17      	ldr	r2, [pc, #92]	; (8003cec <xPortStartScheduler+0x138>)
 8003c90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c94:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003c96:	4b15      	ldr	r3, [pc, #84]	; (8003cec <xPortStartScheduler+0x138>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a14      	ldr	r2, [pc, #80]	; (8003cec <xPortStartScheduler+0x138>)
 8003c9c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003ca0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003ca2:	f000 f8db 	bl	8003e5c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003ca6:	4b12      	ldr	r3, [pc, #72]	; (8003cf0 <xPortStartScheduler+0x13c>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003cac:	f000 f8fa 	bl	8003ea4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003cb0:	4b10      	ldr	r3, [pc, #64]	; (8003cf4 <xPortStartScheduler+0x140>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a0f      	ldr	r2, [pc, #60]	; (8003cf4 <xPortStartScheduler+0x140>)
 8003cb6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003cba:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003cbc:	f7ff ff64 	bl	8003b88 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003cc0:	f7ff f84e 	bl	8002d60 <vTaskSwitchContext>
    prvTaskExitError();
 8003cc4:	f7ff ff1c 	bl	8003b00 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3718      	adds	r7, #24
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	e000ed00 	.word	0xe000ed00
 8003cd8:	410fc271 	.word	0x410fc271
 8003cdc:	410fc270 	.word	0x410fc270
 8003ce0:	e000e400 	.word	0xe000e400
 8003ce4:	20000294 	.word	0x20000294
 8003ce8:	20000298 	.word	0x20000298
 8003cec:	e000ed20 	.word	0xe000ed20
 8003cf0:	20000010 	.word	0x20000010
 8003cf4:	e000ef34 	.word	0xe000ef34

08003cf8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
        __asm volatile
 8003cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d02:	f383 8811 	msr	BASEPRI, r3
 8003d06:	f3bf 8f6f 	isb	sy
 8003d0a:	f3bf 8f4f 	dsb	sy
 8003d0e:	607b      	str	r3, [r7, #4]
    }
 8003d10:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003d12:	4b0f      	ldr	r3, [pc, #60]	; (8003d50 <vPortEnterCritical+0x58>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	3301      	adds	r3, #1
 8003d18:	4a0d      	ldr	r2, [pc, #52]	; (8003d50 <vPortEnterCritical+0x58>)
 8003d1a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003d1c:	4b0c      	ldr	r3, [pc, #48]	; (8003d50 <vPortEnterCritical+0x58>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d10f      	bne.n	8003d44 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003d24:	4b0b      	ldr	r3, [pc, #44]	; (8003d54 <vPortEnterCritical+0x5c>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00a      	beq.n	8003d44 <vPortEnterCritical+0x4c>
        __asm volatile
 8003d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d32:	f383 8811 	msr	BASEPRI, r3
 8003d36:	f3bf 8f6f 	isb	sy
 8003d3a:	f3bf 8f4f 	dsb	sy
 8003d3e:	603b      	str	r3, [r7, #0]
    }
 8003d40:	bf00      	nop
 8003d42:	e7fe      	b.n	8003d42 <vPortEnterCritical+0x4a>
    }
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr
 8003d50:	20000010 	.word	0x20000010
 8003d54:	e000ed04 	.word	0xe000ed04

08003d58 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003d5e:	4b12      	ldr	r3, [pc, #72]	; (8003da8 <vPortExitCritical+0x50>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10a      	bne.n	8003d7c <vPortExitCritical+0x24>
        __asm volatile
 8003d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d6a:	f383 8811 	msr	BASEPRI, r3
 8003d6e:	f3bf 8f6f 	isb	sy
 8003d72:	f3bf 8f4f 	dsb	sy
 8003d76:	607b      	str	r3, [r7, #4]
    }
 8003d78:	bf00      	nop
 8003d7a:	e7fe      	b.n	8003d7a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003d7c:	4b0a      	ldr	r3, [pc, #40]	; (8003da8 <vPortExitCritical+0x50>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	3b01      	subs	r3, #1
 8003d82:	4a09      	ldr	r2, [pc, #36]	; (8003da8 <vPortExitCritical+0x50>)
 8003d84:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003d86:	4b08      	ldr	r3, [pc, #32]	; (8003da8 <vPortExitCritical+0x50>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d105      	bne.n	8003d9a <vPortExitCritical+0x42>
 8003d8e:	2300      	movs	r3, #0
 8003d90:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003d98:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003d9a:	bf00      	nop
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	20000010 	.word	0x20000010
 8003dac:	00000000 	.word	0x00000000

08003db0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003db0:	f3ef 8009 	mrs	r0, PSP
 8003db4:	f3bf 8f6f 	isb	sy
 8003db8:	4b15      	ldr	r3, [pc, #84]	; (8003e10 <pxCurrentTCBConst>)
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	f01e 0f10 	tst.w	lr, #16
 8003dc0:	bf08      	it	eq
 8003dc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003dc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dca:	6010      	str	r0, [r2, #0]
 8003dcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003dd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003dd4:	f380 8811 	msr	BASEPRI, r0
 8003dd8:	f3bf 8f4f 	dsb	sy
 8003ddc:	f3bf 8f6f 	isb	sy
 8003de0:	f7fe ffbe 	bl	8002d60 <vTaskSwitchContext>
 8003de4:	f04f 0000 	mov.w	r0, #0
 8003de8:	f380 8811 	msr	BASEPRI, r0
 8003dec:	bc09      	pop	{r0, r3}
 8003dee:	6819      	ldr	r1, [r3, #0]
 8003df0:	6808      	ldr	r0, [r1, #0]
 8003df2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003df6:	f01e 0f10 	tst.w	lr, #16
 8003dfa:	bf08      	it	eq
 8003dfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003e00:	f380 8809 	msr	PSP, r0
 8003e04:	f3bf 8f6f 	isb	sy
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	f3af 8000 	nop.w

08003e10 <pxCurrentTCBConst>:
 8003e10:	20000154 	.word	0x20000154
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003e14:	bf00      	nop
 8003e16:	bf00      	nop

08003e18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
        __asm volatile
 8003e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e22:	f383 8811 	msr	BASEPRI, r3
 8003e26:	f3bf 8f6f 	isb	sy
 8003e2a:	f3bf 8f4f 	dsb	sy
 8003e2e:	607b      	str	r3, [r7, #4]
    }
 8003e30:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003e32:	f7fe fe7f 	bl	8002b34 <xTaskIncrementTick>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d003      	beq.n	8003e44 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003e3c:	4b06      	ldr	r3, [pc, #24]	; (8003e58 <SysTick_Handler+0x40>)
 8003e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e42:	601a      	str	r2, [r3, #0]
 8003e44:	2300      	movs	r3, #0
 8003e46:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	f383 8811 	msr	BASEPRI, r3
    }
 8003e4e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8003e50:	bf00      	nop
 8003e52:	3708      	adds	r7, #8
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	e000ed04 	.word	0xe000ed04

08003e5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003e60:	4b0b      	ldr	r3, [pc, #44]	; (8003e90 <vPortSetupTimerInterrupt+0x34>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003e66:	4b0b      	ldr	r3, [pc, #44]	; (8003e94 <vPortSetupTimerInterrupt+0x38>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003e6c:	4b0a      	ldr	r3, [pc, #40]	; (8003e98 <vPortSetupTimerInterrupt+0x3c>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a0a      	ldr	r2, [pc, #40]	; (8003e9c <vPortSetupTimerInterrupt+0x40>)
 8003e72:	fba2 2303 	umull	r2, r3, r2, r3
 8003e76:	099b      	lsrs	r3, r3, #6
 8003e78:	4a09      	ldr	r2, [pc, #36]	; (8003ea0 <vPortSetupTimerInterrupt+0x44>)
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003e7e:	4b04      	ldr	r3, [pc, #16]	; (8003e90 <vPortSetupTimerInterrupt+0x34>)
 8003e80:	2207      	movs	r2, #7
 8003e82:	601a      	str	r2, [r3, #0]
}
 8003e84:	bf00      	nop
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	e000e010 	.word	0xe000e010
 8003e94:	e000e018 	.word	0xe000e018
 8003e98:	20000000 	.word	0x20000000
 8003e9c:	10624dd3 	.word	0x10624dd3
 8003ea0:	e000e014 	.word	0xe000e014

08003ea4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003ea4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003eb4 <vPortEnableVFP+0x10>
 8003ea8:	6801      	ldr	r1, [r0, #0]
 8003eaa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003eae:	6001      	str	r1, [r0, #0]
 8003eb0:	4770      	bx	lr
 8003eb2:	0000      	.short	0x0000
 8003eb4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003eb8:	bf00      	nop
 8003eba:	bf00      	nop

08003ebc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b08a      	sub	sp, #40	; 0x28
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8003ec8:	f7fe fd1a 	bl	8002900 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003ecc:	4b53      	ldr	r3, [pc, #332]	; (800401c <pvPortMalloc+0x160>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d101      	bne.n	8003ed8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003ed4:	f000 f908 	bl	80040e8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d012      	beq.n	8003f04 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8003ede:	2208      	movs	r2, #8
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f003 0307 	and.w	r3, r3, #7
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	3308      	adds	r3, #8
 8003eea:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	43db      	mvns	r3, r3
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d804      	bhi.n	8003f00 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	4413      	add	r3, r2
 8003efc:	607b      	str	r3, [r7, #4]
 8003efe:	e001      	b.n	8003f04 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8003f00:	2300      	movs	r3, #0
 8003f02:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	db70      	blt.n	8003fec <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d06d      	beq.n	8003fec <pvPortMalloc+0x130>
 8003f10:	4b43      	ldr	r3, [pc, #268]	; (8004020 <pvPortMalloc+0x164>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d868      	bhi.n	8003fec <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003f1a:	4b42      	ldr	r3, [pc, #264]	; (8004024 <pvPortMalloc+0x168>)
 8003f1c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003f1e:	4b41      	ldr	r3, [pc, #260]	; (8004024 <pvPortMalloc+0x168>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f24:	e004      	b.n	8003f30 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8003f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f28:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d903      	bls.n	8003f42 <pvPortMalloc+0x86>
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1f1      	bne.n	8003f26 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003f42:	4b36      	ldr	r3, [pc, #216]	; (800401c <pvPortMalloc+0x160>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d04f      	beq.n	8003fec <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003f4c:	6a3b      	ldr	r3, [r7, #32]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2208      	movs	r2, #8
 8003f52:	4413      	add	r3, r2
 8003f54:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	6a3b      	ldr	r3, [r7, #32]
 8003f5c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f60:	685a      	ldr	r2, [r3, #4]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	1ad2      	subs	r2, r2, r3
 8003f66:	2308      	movs	r3, #8
 8003f68:	005b      	lsls	r3, r3, #1
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d91f      	bls.n	8003fae <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4413      	add	r3, r2
 8003f74:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f003 0307 	and.w	r3, r3, #7
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00a      	beq.n	8003f96 <pvPortMalloc+0xda>
        __asm volatile
 8003f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f84:	f383 8811 	msr	BASEPRI, r3
 8003f88:	f3bf 8f6f 	isb	sy
 8003f8c:	f3bf 8f4f 	dsb	sy
 8003f90:	613b      	str	r3, [r7, #16]
    }
 8003f92:	bf00      	nop
 8003f94:	e7fe      	b.n	8003f94 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f98:	685a      	ldr	r2, [r3, #4]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	1ad2      	subs	r2, r2, r3
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003fa8:	6978      	ldr	r0, [r7, #20]
 8003faa:	f000 f8f9 	bl	80041a0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003fae:	4b1c      	ldr	r3, [pc, #112]	; (8004020 <pvPortMalloc+0x164>)
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	4a19      	ldr	r2, [pc, #100]	; (8004020 <pvPortMalloc+0x164>)
 8003fba:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003fbc:	4b18      	ldr	r3, [pc, #96]	; (8004020 <pvPortMalloc+0x164>)
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	4b19      	ldr	r3, [pc, #100]	; (8004028 <pvPortMalloc+0x16c>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d203      	bcs.n	8003fd0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003fc8:	4b15      	ldr	r3, [pc, #84]	; (8004020 <pvPortMalloc+0x164>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a16      	ldr	r2, [pc, #88]	; (8004028 <pvPortMalloc+0x16c>)
 8003fce:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fda:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fde:	2200      	movs	r2, #0
 8003fe0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003fe2:	4b12      	ldr	r3, [pc, #72]	; (800402c <pvPortMalloc+0x170>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	4a10      	ldr	r2, [pc, #64]	; (800402c <pvPortMalloc+0x170>)
 8003fea:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003fec:	f7fe fc96 	bl	800291c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	f003 0307 	and.w	r3, r3, #7
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00a      	beq.n	8004010 <pvPortMalloc+0x154>
        __asm volatile
 8003ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ffe:	f383 8811 	msr	BASEPRI, r3
 8004002:	f3bf 8f6f 	isb	sy
 8004006:	f3bf 8f4f 	dsb	sy
 800400a:	60fb      	str	r3, [r7, #12]
    }
 800400c:	bf00      	nop
 800400e:	e7fe      	b.n	800400e <pvPortMalloc+0x152>
    return pvReturn;
 8004010:	69fb      	ldr	r3, [r7, #28]
}
 8004012:	4618      	mov	r0, r3
 8004014:	3728      	adds	r7, #40	; 0x28
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	20012ea4 	.word	0x20012ea4
 8004020:	20012ea8 	.word	0x20012ea8
 8004024:	20012e9c 	.word	0x20012e9c
 8004028:	20012eac 	.word	0x20012eac
 800402c:	20012eb0 	.word	0x20012eb0

08004030 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b086      	sub	sp, #24
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d049      	beq.n	80040d6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004042:	2308      	movs	r3, #8
 8004044:	425b      	negs	r3, r3
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	4413      	add	r3, r2
 800404a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	2b00      	cmp	r3, #0
 8004056:	db0a      	blt.n	800406e <vPortFree+0x3e>
        __asm volatile
 8004058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405c:	f383 8811 	msr	BASEPRI, r3
 8004060:	f3bf 8f6f 	isb	sy
 8004064:	f3bf 8f4f 	dsb	sy
 8004068:	60fb      	str	r3, [r7, #12]
    }
 800406a:	bf00      	nop
 800406c:	e7fe      	b.n	800406c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00a      	beq.n	800408c <vPortFree+0x5c>
        __asm volatile
 8004076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407a:	f383 8811 	msr	BASEPRI, r3
 800407e:	f3bf 8f6f 	isb	sy
 8004082:	f3bf 8f4f 	dsb	sy
 8004086:	60bb      	str	r3, [r7, #8]
    }
 8004088:	bf00      	nop
 800408a:	e7fe      	b.n	800408a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	0fdb      	lsrs	r3, r3, #31
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	b2db      	uxtb	r3, r3
 8004098:	2b00      	cmp	r3, #0
 800409a:	d01c      	beq.n	80040d6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d118      	bne.n	80040d6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80040b0:	f7fe fc26 	bl	8002900 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	685a      	ldr	r2, [r3, #4]
 80040b8:	4b09      	ldr	r3, [pc, #36]	; (80040e0 <vPortFree+0xb0>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4413      	add	r3, r2
 80040be:	4a08      	ldr	r2, [pc, #32]	; (80040e0 <vPortFree+0xb0>)
 80040c0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80040c2:	6938      	ldr	r0, [r7, #16]
 80040c4:	f000 f86c 	bl	80041a0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80040c8:	4b06      	ldr	r3, [pc, #24]	; (80040e4 <vPortFree+0xb4>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	3301      	adds	r3, #1
 80040ce:	4a05      	ldr	r2, [pc, #20]	; (80040e4 <vPortFree+0xb4>)
 80040d0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80040d2:	f7fe fc23 	bl	800291c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80040d6:	bf00      	nop
 80040d8:	3718      	adds	r7, #24
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	20012ea8 	.word	0x20012ea8
 80040e4:	20012eb4 	.word	0x20012eb4

080040e8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80040ee:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80040f2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80040f4:	4b25      	ldr	r3, [pc, #148]	; (800418c <prvHeapInit+0xa4>)
 80040f6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f003 0307 	and.w	r3, r3, #7
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00c      	beq.n	800411c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	3307      	adds	r3, #7
 8004106:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f023 0307 	bic.w	r3, r3, #7
 800410e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	4a1d      	ldr	r2, [pc, #116]	; (800418c <prvHeapInit+0xa4>)
 8004118:	4413      	add	r3, r2
 800411a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004120:	4a1b      	ldr	r2, [pc, #108]	; (8004190 <prvHeapInit+0xa8>)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004126:	4b1a      	ldr	r3, [pc, #104]	; (8004190 <prvHeapInit+0xa8>)
 8004128:	2200      	movs	r2, #0
 800412a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	68ba      	ldr	r2, [r7, #8]
 8004130:	4413      	add	r3, r2
 8004132:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004134:	2208      	movs	r2, #8
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	1a9b      	subs	r3, r3, r2
 800413a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f023 0307 	bic.w	r3, r3, #7
 8004142:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	4a13      	ldr	r2, [pc, #76]	; (8004194 <prvHeapInit+0xac>)
 8004148:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800414a:	4b12      	ldr	r3, [pc, #72]	; (8004194 <prvHeapInit+0xac>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2200      	movs	r2, #0
 8004150:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004152:	4b10      	ldr	r3, [pc, #64]	; (8004194 <prvHeapInit+0xac>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2200      	movs	r2, #0
 8004158:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	1ad2      	subs	r2, r2, r3
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004168:	4b0a      	ldr	r3, [pc, #40]	; (8004194 <prvHeapInit+0xac>)
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	4a08      	ldr	r2, [pc, #32]	; (8004198 <prvHeapInit+0xb0>)
 8004176:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	4a07      	ldr	r2, [pc, #28]	; (800419c <prvHeapInit+0xb4>)
 800417e:	6013      	str	r3, [r2, #0]
}
 8004180:	bf00      	nop
 8004182:	3714      	adds	r7, #20
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr
 800418c:	2000029c 	.word	0x2000029c
 8004190:	20012e9c 	.word	0x20012e9c
 8004194:	20012ea4 	.word	0x20012ea4
 8004198:	20012eac 	.word	0x20012eac
 800419c:	20012ea8 	.word	0x20012ea8

080041a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80041a0:	b480      	push	{r7}
 80041a2:	b085      	sub	sp, #20
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80041a8:	4b28      	ldr	r3, [pc, #160]	; (800424c <prvInsertBlockIntoFreeList+0xac>)
 80041aa:	60fb      	str	r3, [r7, #12]
 80041ac:	e002      	b.n	80041b4 <prvInsertBlockIntoFreeList+0x14>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	60fb      	str	r3, [r7, #12]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d8f7      	bhi.n	80041ae <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	68ba      	ldr	r2, [r7, #8]
 80041c8:	4413      	add	r3, r2
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d108      	bne.n	80041e2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	685a      	ldr	r2, [r3, #4]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	441a      	add	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	68ba      	ldr	r2, [r7, #8]
 80041ec:	441a      	add	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d118      	bne.n	8004228 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	4b15      	ldr	r3, [pc, #84]	; (8004250 <prvInsertBlockIntoFreeList+0xb0>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d00d      	beq.n	800421e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685a      	ldr	r2, [r3, #4]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	441a      	add	r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	601a      	str	r2, [r3, #0]
 800421c:	e008      	b.n	8004230 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800421e:	4b0c      	ldr	r3, [pc, #48]	; (8004250 <prvInsertBlockIntoFreeList+0xb0>)
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	601a      	str	r2, [r3, #0]
 8004226:	e003      	b.n	8004230 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	429a      	cmp	r2, r3
 8004236:	d002      	beq.n	800423e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800423e:	bf00      	nop
 8004240:	3714      	adds	r7, #20
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	20012e9c 	.word	0x20012e9c
 8004250:	20012ea4 	.word	0x20012ea4

08004254 <__libc_init_array>:
 8004254:	b570      	push	{r4, r5, r6, lr}
 8004256:	4d0d      	ldr	r5, [pc, #52]	; (800428c <__libc_init_array+0x38>)
 8004258:	4c0d      	ldr	r4, [pc, #52]	; (8004290 <__libc_init_array+0x3c>)
 800425a:	1b64      	subs	r4, r4, r5
 800425c:	10a4      	asrs	r4, r4, #2
 800425e:	2600      	movs	r6, #0
 8004260:	42a6      	cmp	r6, r4
 8004262:	d109      	bne.n	8004278 <__libc_init_array+0x24>
 8004264:	4d0b      	ldr	r5, [pc, #44]	; (8004294 <__libc_init_array+0x40>)
 8004266:	4c0c      	ldr	r4, [pc, #48]	; (8004298 <__libc_init_array+0x44>)
 8004268:	f001 f840 	bl	80052ec <_init>
 800426c:	1b64      	subs	r4, r4, r5
 800426e:	10a4      	asrs	r4, r4, #2
 8004270:	2600      	movs	r6, #0
 8004272:	42a6      	cmp	r6, r4
 8004274:	d105      	bne.n	8004282 <__libc_init_array+0x2e>
 8004276:	bd70      	pop	{r4, r5, r6, pc}
 8004278:	f855 3b04 	ldr.w	r3, [r5], #4
 800427c:	4798      	blx	r3
 800427e:	3601      	adds	r6, #1
 8004280:	e7ee      	b.n	8004260 <__libc_init_array+0xc>
 8004282:	f855 3b04 	ldr.w	r3, [r5], #4
 8004286:	4798      	blx	r3
 8004288:	3601      	adds	r6, #1
 800428a:	e7f2      	b.n	8004272 <__libc_init_array+0x1e>
 800428c:	08005428 	.word	0x08005428
 8004290:	08005428 	.word	0x08005428
 8004294:	08005428 	.word	0x08005428
 8004298:	0800542c 	.word	0x0800542c

0800429c <memcpy>:
 800429c:	440a      	add	r2, r1
 800429e:	4291      	cmp	r1, r2
 80042a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80042a4:	d100      	bne.n	80042a8 <memcpy+0xc>
 80042a6:	4770      	bx	lr
 80042a8:	b510      	push	{r4, lr}
 80042aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042b2:	4291      	cmp	r1, r2
 80042b4:	d1f9      	bne.n	80042aa <memcpy+0xe>
 80042b6:	bd10      	pop	{r4, pc}

080042b8 <memset>:
 80042b8:	4402      	add	r2, r0
 80042ba:	4603      	mov	r3, r0
 80042bc:	4293      	cmp	r3, r2
 80042be:	d100      	bne.n	80042c2 <memset+0xa>
 80042c0:	4770      	bx	lr
 80042c2:	f803 1b01 	strb.w	r1, [r3], #1
 80042c6:	e7f9      	b.n	80042bc <memset+0x4>

080042c8 <iprintf>:
 80042c8:	b40f      	push	{r0, r1, r2, r3}
 80042ca:	4b0a      	ldr	r3, [pc, #40]	; (80042f4 <iprintf+0x2c>)
 80042cc:	b513      	push	{r0, r1, r4, lr}
 80042ce:	681c      	ldr	r4, [r3, #0]
 80042d0:	b124      	cbz	r4, 80042dc <iprintf+0x14>
 80042d2:	69a3      	ldr	r3, [r4, #24]
 80042d4:	b913      	cbnz	r3, 80042dc <iprintf+0x14>
 80042d6:	4620      	mov	r0, r4
 80042d8:	f000 fa5e 	bl	8004798 <__sinit>
 80042dc:	ab05      	add	r3, sp, #20
 80042de:	9a04      	ldr	r2, [sp, #16]
 80042e0:	68a1      	ldr	r1, [r4, #8]
 80042e2:	9301      	str	r3, [sp, #4]
 80042e4:	4620      	mov	r0, r4
 80042e6:	f000 fc67 	bl	8004bb8 <_vfiprintf_r>
 80042ea:	b002      	add	sp, #8
 80042ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042f0:	b004      	add	sp, #16
 80042f2:	4770      	bx	lr
 80042f4:	20000014 	.word	0x20000014

080042f8 <_puts_r>:
 80042f8:	b570      	push	{r4, r5, r6, lr}
 80042fa:	460e      	mov	r6, r1
 80042fc:	4605      	mov	r5, r0
 80042fe:	b118      	cbz	r0, 8004308 <_puts_r+0x10>
 8004300:	6983      	ldr	r3, [r0, #24]
 8004302:	b90b      	cbnz	r3, 8004308 <_puts_r+0x10>
 8004304:	f000 fa48 	bl	8004798 <__sinit>
 8004308:	69ab      	ldr	r3, [r5, #24]
 800430a:	68ac      	ldr	r4, [r5, #8]
 800430c:	b913      	cbnz	r3, 8004314 <_puts_r+0x1c>
 800430e:	4628      	mov	r0, r5
 8004310:	f000 fa42 	bl	8004798 <__sinit>
 8004314:	4b2c      	ldr	r3, [pc, #176]	; (80043c8 <_puts_r+0xd0>)
 8004316:	429c      	cmp	r4, r3
 8004318:	d120      	bne.n	800435c <_puts_r+0x64>
 800431a:	686c      	ldr	r4, [r5, #4]
 800431c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800431e:	07db      	lsls	r3, r3, #31
 8004320:	d405      	bmi.n	800432e <_puts_r+0x36>
 8004322:	89a3      	ldrh	r3, [r4, #12]
 8004324:	0598      	lsls	r0, r3, #22
 8004326:	d402      	bmi.n	800432e <_puts_r+0x36>
 8004328:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800432a:	f000 fad3 	bl	80048d4 <__retarget_lock_acquire_recursive>
 800432e:	89a3      	ldrh	r3, [r4, #12]
 8004330:	0719      	lsls	r1, r3, #28
 8004332:	d51d      	bpl.n	8004370 <_puts_r+0x78>
 8004334:	6923      	ldr	r3, [r4, #16]
 8004336:	b1db      	cbz	r3, 8004370 <_puts_r+0x78>
 8004338:	3e01      	subs	r6, #1
 800433a:	68a3      	ldr	r3, [r4, #8]
 800433c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004340:	3b01      	subs	r3, #1
 8004342:	60a3      	str	r3, [r4, #8]
 8004344:	bb39      	cbnz	r1, 8004396 <_puts_r+0x9e>
 8004346:	2b00      	cmp	r3, #0
 8004348:	da38      	bge.n	80043bc <_puts_r+0xc4>
 800434a:	4622      	mov	r2, r4
 800434c:	210a      	movs	r1, #10
 800434e:	4628      	mov	r0, r5
 8004350:	f000 f848 	bl	80043e4 <__swbuf_r>
 8004354:	3001      	adds	r0, #1
 8004356:	d011      	beq.n	800437c <_puts_r+0x84>
 8004358:	250a      	movs	r5, #10
 800435a:	e011      	b.n	8004380 <_puts_r+0x88>
 800435c:	4b1b      	ldr	r3, [pc, #108]	; (80043cc <_puts_r+0xd4>)
 800435e:	429c      	cmp	r4, r3
 8004360:	d101      	bne.n	8004366 <_puts_r+0x6e>
 8004362:	68ac      	ldr	r4, [r5, #8]
 8004364:	e7da      	b.n	800431c <_puts_r+0x24>
 8004366:	4b1a      	ldr	r3, [pc, #104]	; (80043d0 <_puts_r+0xd8>)
 8004368:	429c      	cmp	r4, r3
 800436a:	bf08      	it	eq
 800436c:	68ec      	ldreq	r4, [r5, #12]
 800436e:	e7d5      	b.n	800431c <_puts_r+0x24>
 8004370:	4621      	mov	r1, r4
 8004372:	4628      	mov	r0, r5
 8004374:	f000 f888 	bl	8004488 <__swsetup_r>
 8004378:	2800      	cmp	r0, #0
 800437a:	d0dd      	beq.n	8004338 <_puts_r+0x40>
 800437c:	f04f 35ff 	mov.w	r5, #4294967295
 8004380:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004382:	07da      	lsls	r2, r3, #31
 8004384:	d405      	bmi.n	8004392 <_puts_r+0x9a>
 8004386:	89a3      	ldrh	r3, [r4, #12]
 8004388:	059b      	lsls	r3, r3, #22
 800438a:	d402      	bmi.n	8004392 <_puts_r+0x9a>
 800438c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800438e:	f000 faa2 	bl	80048d6 <__retarget_lock_release_recursive>
 8004392:	4628      	mov	r0, r5
 8004394:	bd70      	pop	{r4, r5, r6, pc}
 8004396:	2b00      	cmp	r3, #0
 8004398:	da04      	bge.n	80043a4 <_puts_r+0xac>
 800439a:	69a2      	ldr	r2, [r4, #24]
 800439c:	429a      	cmp	r2, r3
 800439e:	dc06      	bgt.n	80043ae <_puts_r+0xb6>
 80043a0:	290a      	cmp	r1, #10
 80043a2:	d004      	beq.n	80043ae <_puts_r+0xb6>
 80043a4:	6823      	ldr	r3, [r4, #0]
 80043a6:	1c5a      	adds	r2, r3, #1
 80043a8:	6022      	str	r2, [r4, #0]
 80043aa:	7019      	strb	r1, [r3, #0]
 80043ac:	e7c5      	b.n	800433a <_puts_r+0x42>
 80043ae:	4622      	mov	r2, r4
 80043b0:	4628      	mov	r0, r5
 80043b2:	f000 f817 	bl	80043e4 <__swbuf_r>
 80043b6:	3001      	adds	r0, #1
 80043b8:	d1bf      	bne.n	800433a <_puts_r+0x42>
 80043ba:	e7df      	b.n	800437c <_puts_r+0x84>
 80043bc:	6823      	ldr	r3, [r4, #0]
 80043be:	250a      	movs	r5, #10
 80043c0:	1c5a      	adds	r2, r3, #1
 80043c2:	6022      	str	r2, [r4, #0]
 80043c4:	701d      	strb	r5, [r3, #0]
 80043c6:	e7db      	b.n	8004380 <_puts_r+0x88>
 80043c8:	080053ac 	.word	0x080053ac
 80043cc:	080053cc 	.word	0x080053cc
 80043d0:	0800538c 	.word	0x0800538c

080043d4 <puts>:
 80043d4:	4b02      	ldr	r3, [pc, #8]	; (80043e0 <puts+0xc>)
 80043d6:	4601      	mov	r1, r0
 80043d8:	6818      	ldr	r0, [r3, #0]
 80043da:	f7ff bf8d 	b.w	80042f8 <_puts_r>
 80043de:	bf00      	nop
 80043e0:	20000014 	.word	0x20000014

080043e4 <__swbuf_r>:
 80043e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043e6:	460e      	mov	r6, r1
 80043e8:	4614      	mov	r4, r2
 80043ea:	4605      	mov	r5, r0
 80043ec:	b118      	cbz	r0, 80043f6 <__swbuf_r+0x12>
 80043ee:	6983      	ldr	r3, [r0, #24]
 80043f0:	b90b      	cbnz	r3, 80043f6 <__swbuf_r+0x12>
 80043f2:	f000 f9d1 	bl	8004798 <__sinit>
 80043f6:	4b21      	ldr	r3, [pc, #132]	; (800447c <__swbuf_r+0x98>)
 80043f8:	429c      	cmp	r4, r3
 80043fa:	d12b      	bne.n	8004454 <__swbuf_r+0x70>
 80043fc:	686c      	ldr	r4, [r5, #4]
 80043fe:	69a3      	ldr	r3, [r4, #24]
 8004400:	60a3      	str	r3, [r4, #8]
 8004402:	89a3      	ldrh	r3, [r4, #12]
 8004404:	071a      	lsls	r2, r3, #28
 8004406:	d52f      	bpl.n	8004468 <__swbuf_r+0x84>
 8004408:	6923      	ldr	r3, [r4, #16]
 800440a:	b36b      	cbz	r3, 8004468 <__swbuf_r+0x84>
 800440c:	6923      	ldr	r3, [r4, #16]
 800440e:	6820      	ldr	r0, [r4, #0]
 8004410:	1ac0      	subs	r0, r0, r3
 8004412:	6963      	ldr	r3, [r4, #20]
 8004414:	b2f6      	uxtb	r6, r6
 8004416:	4283      	cmp	r3, r0
 8004418:	4637      	mov	r7, r6
 800441a:	dc04      	bgt.n	8004426 <__swbuf_r+0x42>
 800441c:	4621      	mov	r1, r4
 800441e:	4628      	mov	r0, r5
 8004420:	f000 f926 	bl	8004670 <_fflush_r>
 8004424:	bb30      	cbnz	r0, 8004474 <__swbuf_r+0x90>
 8004426:	68a3      	ldr	r3, [r4, #8]
 8004428:	3b01      	subs	r3, #1
 800442a:	60a3      	str	r3, [r4, #8]
 800442c:	6823      	ldr	r3, [r4, #0]
 800442e:	1c5a      	adds	r2, r3, #1
 8004430:	6022      	str	r2, [r4, #0]
 8004432:	701e      	strb	r6, [r3, #0]
 8004434:	6963      	ldr	r3, [r4, #20]
 8004436:	3001      	adds	r0, #1
 8004438:	4283      	cmp	r3, r0
 800443a:	d004      	beq.n	8004446 <__swbuf_r+0x62>
 800443c:	89a3      	ldrh	r3, [r4, #12]
 800443e:	07db      	lsls	r3, r3, #31
 8004440:	d506      	bpl.n	8004450 <__swbuf_r+0x6c>
 8004442:	2e0a      	cmp	r6, #10
 8004444:	d104      	bne.n	8004450 <__swbuf_r+0x6c>
 8004446:	4621      	mov	r1, r4
 8004448:	4628      	mov	r0, r5
 800444a:	f000 f911 	bl	8004670 <_fflush_r>
 800444e:	b988      	cbnz	r0, 8004474 <__swbuf_r+0x90>
 8004450:	4638      	mov	r0, r7
 8004452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004454:	4b0a      	ldr	r3, [pc, #40]	; (8004480 <__swbuf_r+0x9c>)
 8004456:	429c      	cmp	r4, r3
 8004458:	d101      	bne.n	800445e <__swbuf_r+0x7a>
 800445a:	68ac      	ldr	r4, [r5, #8]
 800445c:	e7cf      	b.n	80043fe <__swbuf_r+0x1a>
 800445e:	4b09      	ldr	r3, [pc, #36]	; (8004484 <__swbuf_r+0xa0>)
 8004460:	429c      	cmp	r4, r3
 8004462:	bf08      	it	eq
 8004464:	68ec      	ldreq	r4, [r5, #12]
 8004466:	e7ca      	b.n	80043fe <__swbuf_r+0x1a>
 8004468:	4621      	mov	r1, r4
 800446a:	4628      	mov	r0, r5
 800446c:	f000 f80c 	bl	8004488 <__swsetup_r>
 8004470:	2800      	cmp	r0, #0
 8004472:	d0cb      	beq.n	800440c <__swbuf_r+0x28>
 8004474:	f04f 37ff 	mov.w	r7, #4294967295
 8004478:	e7ea      	b.n	8004450 <__swbuf_r+0x6c>
 800447a:	bf00      	nop
 800447c:	080053ac 	.word	0x080053ac
 8004480:	080053cc 	.word	0x080053cc
 8004484:	0800538c 	.word	0x0800538c

08004488 <__swsetup_r>:
 8004488:	4b32      	ldr	r3, [pc, #200]	; (8004554 <__swsetup_r+0xcc>)
 800448a:	b570      	push	{r4, r5, r6, lr}
 800448c:	681d      	ldr	r5, [r3, #0]
 800448e:	4606      	mov	r6, r0
 8004490:	460c      	mov	r4, r1
 8004492:	b125      	cbz	r5, 800449e <__swsetup_r+0x16>
 8004494:	69ab      	ldr	r3, [r5, #24]
 8004496:	b913      	cbnz	r3, 800449e <__swsetup_r+0x16>
 8004498:	4628      	mov	r0, r5
 800449a:	f000 f97d 	bl	8004798 <__sinit>
 800449e:	4b2e      	ldr	r3, [pc, #184]	; (8004558 <__swsetup_r+0xd0>)
 80044a0:	429c      	cmp	r4, r3
 80044a2:	d10f      	bne.n	80044c4 <__swsetup_r+0x3c>
 80044a4:	686c      	ldr	r4, [r5, #4]
 80044a6:	89a3      	ldrh	r3, [r4, #12]
 80044a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80044ac:	0719      	lsls	r1, r3, #28
 80044ae:	d42c      	bmi.n	800450a <__swsetup_r+0x82>
 80044b0:	06dd      	lsls	r5, r3, #27
 80044b2:	d411      	bmi.n	80044d8 <__swsetup_r+0x50>
 80044b4:	2309      	movs	r3, #9
 80044b6:	6033      	str	r3, [r6, #0]
 80044b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80044bc:	81a3      	strh	r3, [r4, #12]
 80044be:	f04f 30ff 	mov.w	r0, #4294967295
 80044c2:	e03e      	b.n	8004542 <__swsetup_r+0xba>
 80044c4:	4b25      	ldr	r3, [pc, #148]	; (800455c <__swsetup_r+0xd4>)
 80044c6:	429c      	cmp	r4, r3
 80044c8:	d101      	bne.n	80044ce <__swsetup_r+0x46>
 80044ca:	68ac      	ldr	r4, [r5, #8]
 80044cc:	e7eb      	b.n	80044a6 <__swsetup_r+0x1e>
 80044ce:	4b24      	ldr	r3, [pc, #144]	; (8004560 <__swsetup_r+0xd8>)
 80044d0:	429c      	cmp	r4, r3
 80044d2:	bf08      	it	eq
 80044d4:	68ec      	ldreq	r4, [r5, #12]
 80044d6:	e7e6      	b.n	80044a6 <__swsetup_r+0x1e>
 80044d8:	0758      	lsls	r0, r3, #29
 80044da:	d512      	bpl.n	8004502 <__swsetup_r+0x7a>
 80044dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044de:	b141      	cbz	r1, 80044f2 <__swsetup_r+0x6a>
 80044e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044e4:	4299      	cmp	r1, r3
 80044e6:	d002      	beq.n	80044ee <__swsetup_r+0x66>
 80044e8:	4630      	mov	r0, r6
 80044ea:	f000 fa5b 	bl	80049a4 <_free_r>
 80044ee:	2300      	movs	r3, #0
 80044f0:	6363      	str	r3, [r4, #52]	; 0x34
 80044f2:	89a3      	ldrh	r3, [r4, #12]
 80044f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80044f8:	81a3      	strh	r3, [r4, #12]
 80044fa:	2300      	movs	r3, #0
 80044fc:	6063      	str	r3, [r4, #4]
 80044fe:	6923      	ldr	r3, [r4, #16]
 8004500:	6023      	str	r3, [r4, #0]
 8004502:	89a3      	ldrh	r3, [r4, #12]
 8004504:	f043 0308 	orr.w	r3, r3, #8
 8004508:	81a3      	strh	r3, [r4, #12]
 800450a:	6923      	ldr	r3, [r4, #16]
 800450c:	b94b      	cbnz	r3, 8004522 <__swsetup_r+0x9a>
 800450e:	89a3      	ldrh	r3, [r4, #12]
 8004510:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004514:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004518:	d003      	beq.n	8004522 <__swsetup_r+0x9a>
 800451a:	4621      	mov	r1, r4
 800451c:	4630      	mov	r0, r6
 800451e:	f000 fa01 	bl	8004924 <__smakebuf_r>
 8004522:	89a0      	ldrh	r0, [r4, #12]
 8004524:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004528:	f010 0301 	ands.w	r3, r0, #1
 800452c:	d00a      	beq.n	8004544 <__swsetup_r+0xbc>
 800452e:	2300      	movs	r3, #0
 8004530:	60a3      	str	r3, [r4, #8]
 8004532:	6963      	ldr	r3, [r4, #20]
 8004534:	425b      	negs	r3, r3
 8004536:	61a3      	str	r3, [r4, #24]
 8004538:	6923      	ldr	r3, [r4, #16]
 800453a:	b943      	cbnz	r3, 800454e <__swsetup_r+0xc6>
 800453c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004540:	d1ba      	bne.n	80044b8 <__swsetup_r+0x30>
 8004542:	bd70      	pop	{r4, r5, r6, pc}
 8004544:	0781      	lsls	r1, r0, #30
 8004546:	bf58      	it	pl
 8004548:	6963      	ldrpl	r3, [r4, #20]
 800454a:	60a3      	str	r3, [r4, #8]
 800454c:	e7f4      	b.n	8004538 <__swsetup_r+0xb0>
 800454e:	2000      	movs	r0, #0
 8004550:	e7f7      	b.n	8004542 <__swsetup_r+0xba>
 8004552:	bf00      	nop
 8004554:	20000014 	.word	0x20000014
 8004558:	080053ac 	.word	0x080053ac
 800455c:	080053cc 	.word	0x080053cc
 8004560:	0800538c 	.word	0x0800538c

08004564 <__sflush_r>:
 8004564:	898a      	ldrh	r2, [r1, #12]
 8004566:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800456a:	4605      	mov	r5, r0
 800456c:	0710      	lsls	r0, r2, #28
 800456e:	460c      	mov	r4, r1
 8004570:	d458      	bmi.n	8004624 <__sflush_r+0xc0>
 8004572:	684b      	ldr	r3, [r1, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	dc05      	bgt.n	8004584 <__sflush_r+0x20>
 8004578:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800457a:	2b00      	cmp	r3, #0
 800457c:	dc02      	bgt.n	8004584 <__sflush_r+0x20>
 800457e:	2000      	movs	r0, #0
 8004580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004584:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004586:	2e00      	cmp	r6, #0
 8004588:	d0f9      	beq.n	800457e <__sflush_r+0x1a>
 800458a:	2300      	movs	r3, #0
 800458c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004590:	682f      	ldr	r7, [r5, #0]
 8004592:	602b      	str	r3, [r5, #0]
 8004594:	d032      	beq.n	80045fc <__sflush_r+0x98>
 8004596:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004598:	89a3      	ldrh	r3, [r4, #12]
 800459a:	075a      	lsls	r2, r3, #29
 800459c:	d505      	bpl.n	80045aa <__sflush_r+0x46>
 800459e:	6863      	ldr	r3, [r4, #4]
 80045a0:	1ac0      	subs	r0, r0, r3
 80045a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80045a4:	b10b      	cbz	r3, 80045aa <__sflush_r+0x46>
 80045a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80045a8:	1ac0      	subs	r0, r0, r3
 80045aa:	2300      	movs	r3, #0
 80045ac:	4602      	mov	r2, r0
 80045ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80045b0:	6a21      	ldr	r1, [r4, #32]
 80045b2:	4628      	mov	r0, r5
 80045b4:	47b0      	blx	r6
 80045b6:	1c43      	adds	r3, r0, #1
 80045b8:	89a3      	ldrh	r3, [r4, #12]
 80045ba:	d106      	bne.n	80045ca <__sflush_r+0x66>
 80045bc:	6829      	ldr	r1, [r5, #0]
 80045be:	291d      	cmp	r1, #29
 80045c0:	d82c      	bhi.n	800461c <__sflush_r+0xb8>
 80045c2:	4a2a      	ldr	r2, [pc, #168]	; (800466c <__sflush_r+0x108>)
 80045c4:	40ca      	lsrs	r2, r1
 80045c6:	07d6      	lsls	r6, r2, #31
 80045c8:	d528      	bpl.n	800461c <__sflush_r+0xb8>
 80045ca:	2200      	movs	r2, #0
 80045cc:	6062      	str	r2, [r4, #4]
 80045ce:	04d9      	lsls	r1, r3, #19
 80045d0:	6922      	ldr	r2, [r4, #16]
 80045d2:	6022      	str	r2, [r4, #0]
 80045d4:	d504      	bpl.n	80045e0 <__sflush_r+0x7c>
 80045d6:	1c42      	adds	r2, r0, #1
 80045d8:	d101      	bne.n	80045de <__sflush_r+0x7a>
 80045da:	682b      	ldr	r3, [r5, #0]
 80045dc:	b903      	cbnz	r3, 80045e0 <__sflush_r+0x7c>
 80045de:	6560      	str	r0, [r4, #84]	; 0x54
 80045e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045e2:	602f      	str	r7, [r5, #0]
 80045e4:	2900      	cmp	r1, #0
 80045e6:	d0ca      	beq.n	800457e <__sflush_r+0x1a>
 80045e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045ec:	4299      	cmp	r1, r3
 80045ee:	d002      	beq.n	80045f6 <__sflush_r+0x92>
 80045f0:	4628      	mov	r0, r5
 80045f2:	f000 f9d7 	bl	80049a4 <_free_r>
 80045f6:	2000      	movs	r0, #0
 80045f8:	6360      	str	r0, [r4, #52]	; 0x34
 80045fa:	e7c1      	b.n	8004580 <__sflush_r+0x1c>
 80045fc:	6a21      	ldr	r1, [r4, #32]
 80045fe:	2301      	movs	r3, #1
 8004600:	4628      	mov	r0, r5
 8004602:	47b0      	blx	r6
 8004604:	1c41      	adds	r1, r0, #1
 8004606:	d1c7      	bne.n	8004598 <__sflush_r+0x34>
 8004608:	682b      	ldr	r3, [r5, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d0c4      	beq.n	8004598 <__sflush_r+0x34>
 800460e:	2b1d      	cmp	r3, #29
 8004610:	d001      	beq.n	8004616 <__sflush_r+0xb2>
 8004612:	2b16      	cmp	r3, #22
 8004614:	d101      	bne.n	800461a <__sflush_r+0xb6>
 8004616:	602f      	str	r7, [r5, #0]
 8004618:	e7b1      	b.n	800457e <__sflush_r+0x1a>
 800461a:	89a3      	ldrh	r3, [r4, #12]
 800461c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004620:	81a3      	strh	r3, [r4, #12]
 8004622:	e7ad      	b.n	8004580 <__sflush_r+0x1c>
 8004624:	690f      	ldr	r7, [r1, #16]
 8004626:	2f00      	cmp	r7, #0
 8004628:	d0a9      	beq.n	800457e <__sflush_r+0x1a>
 800462a:	0793      	lsls	r3, r2, #30
 800462c:	680e      	ldr	r6, [r1, #0]
 800462e:	bf08      	it	eq
 8004630:	694b      	ldreq	r3, [r1, #20]
 8004632:	600f      	str	r7, [r1, #0]
 8004634:	bf18      	it	ne
 8004636:	2300      	movne	r3, #0
 8004638:	eba6 0807 	sub.w	r8, r6, r7
 800463c:	608b      	str	r3, [r1, #8]
 800463e:	f1b8 0f00 	cmp.w	r8, #0
 8004642:	dd9c      	ble.n	800457e <__sflush_r+0x1a>
 8004644:	6a21      	ldr	r1, [r4, #32]
 8004646:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004648:	4643      	mov	r3, r8
 800464a:	463a      	mov	r2, r7
 800464c:	4628      	mov	r0, r5
 800464e:	47b0      	blx	r6
 8004650:	2800      	cmp	r0, #0
 8004652:	dc06      	bgt.n	8004662 <__sflush_r+0xfe>
 8004654:	89a3      	ldrh	r3, [r4, #12]
 8004656:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800465a:	81a3      	strh	r3, [r4, #12]
 800465c:	f04f 30ff 	mov.w	r0, #4294967295
 8004660:	e78e      	b.n	8004580 <__sflush_r+0x1c>
 8004662:	4407      	add	r7, r0
 8004664:	eba8 0800 	sub.w	r8, r8, r0
 8004668:	e7e9      	b.n	800463e <__sflush_r+0xda>
 800466a:	bf00      	nop
 800466c:	20400001 	.word	0x20400001

08004670 <_fflush_r>:
 8004670:	b538      	push	{r3, r4, r5, lr}
 8004672:	690b      	ldr	r3, [r1, #16]
 8004674:	4605      	mov	r5, r0
 8004676:	460c      	mov	r4, r1
 8004678:	b913      	cbnz	r3, 8004680 <_fflush_r+0x10>
 800467a:	2500      	movs	r5, #0
 800467c:	4628      	mov	r0, r5
 800467e:	bd38      	pop	{r3, r4, r5, pc}
 8004680:	b118      	cbz	r0, 800468a <_fflush_r+0x1a>
 8004682:	6983      	ldr	r3, [r0, #24]
 8004684:	b90b      	cbnz	r3, 800468a <_fflush_r+0x1a>
 8004686:	f000 f887 	bl	8004798 <__sinit>
 800468a:	4b14      	ldr	r3, [pc, #80]	; (80046dc <_fflush_r+0x6c>)
 800468c:	429c      	cmp	r4, r3
 800468e:	d11b      	bne.n	80046c8 <_fflush_r+0x58>
 8004690:	686c      	ldr	r4, [r5, #4]
 8004692:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d0ef      	beq.n	800467a <_fflush_r+0xa>
 800469a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800469c:	07d0      	lsls	r0, r2, #31
 800469e:	d404      	bmi.n	80046aa <_fflush_r+0x3a>
 80046a0:	0599      	lsls	r1, r3, #22
 80046a2:	d402      	bmi.n	80046aa <_fflush_r+0x3a>
 80046a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046a6:	f000 f915 	bl	80048d4 <__retarget_lock_acquire_recursive>
 80046aa:	4628      	mov	r0, r5
 80046ac:	4621      	mov	r1, r4
 80046ae:	f7ff ff59 	bl	8004564 <__sflush_r>
 80046b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80046b4:	07da      	lsls	r2, r3, #31
 80046b6:	4605      	mov	r5, r0
 80046b8:	d4e0      	bmi.n	800467c <_fflush_r+0xc>
 80046ba:	89a3      	ldrh	r3, [r4, #12]
 80046bc:	059b      	lsls	r3, r3, #22
 80046be:	d4dd      	bmi.n	800467c <_fflush_r+0xc>
 80046c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046c2:	f000 f908 	bl	80048d6 <__retarget_lock_release_recursive>
 80046c6:	e7d9      	b.n	800467c <_fflush_r+0xc>
 80046c8:	4b05      	ldr	r3, [pc, #20]	; (80046e0 <_fflush_r+0x70>)
 80046ca:	429c      	cmp	r4, r3
 80046cc:	d101      	bne.n	80046d2 <_fflush_r+0x62>
 80046ce:	68ac      	ldr	r4, [r5, #8]
 80046d0:	e7df      	b.n	8004692 <_fflush_r+0x22>
 80046d2:	4b04      	ldr	r3, [pc, #16]	; (80046e4 <_fflush_r+0x74>)
 80046d4:	429c      	cmp	r4, r3
 80046d6:	bf08      	it	eq
 80046d8:	68ec      	ldreq	r4, [r5, #12]
 80046da:	e7da      	b.n	8004692 <_fflush_r+0x22>
 80046dc:	080053ac 	.word	0x080053ac
 80046e0:	080053cc 	.word	0x080053cc
 80046e4:	0800538c 	.word	0x0800538c

080046e8 <std>:
 80046e8:	2300      	movs	r3, #0
 80046ea:	b510      	push	{r4, lr}
 80046ec:	4604      	mov	r4, r0
 80046ee:	e9c0 3300 	strd	r3, r3, [r0]
 80046f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80046f6:	6083      	str	r3, [r0, #8]
 80046f8:	8181      	strh	r1, [r0, #12]
 80046fa:	6643      	str	r3, [r0, #100]	; 0x64
 80046fc:	81c2      	strh	r2, [r0, #14]
 80046fe:	6183      	str	r3, [r0, #24]
 8004700:	4619      	mov	r1, r3
 8004702:	2208      	movs	r2, #8
 8004704:	305c      	adds	r0, #92	; 0x5c
 8004706:	f7ff fdd7 	bl	80042b8 <memset>
 800470a:	4b05      	ldr	r3, [pc, #20]	; (8004720 <std+0x38>)
 800470c:	6263      	str	r3, [r4, #36]	; 0x24
 800470e:	4b05      	ldr	r3, [pc, #20]	; (8004724 <std+0x3c>)
 8004710:	62a3      	str	r3, [r4, #40]	; 0x28
 8004712:	4b05      	ldr	r3, [pc, #20]	; (8004728 <std+0x40>)
 8004714:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004716:	4b05      	ldr	r3, [pc, #20]	; (800472c <std+0x44>)
 8004718:	6224      	str	r4, [r4, #32]
 800471a:	6323      	str	r3, [r4, #48]	; 0x30
 800471c:	bd10      	pop	{r4, pc}
 800471e:	bf00      	nop
 8004720:	08005161 	.word	0x08005161
 8004724:	08005183 	.word	0x08005183
 8004728:	080051bb 	.word	0x080051bb
 800472c:	080051df 	.word	0x080051df

08004730 <_cleanup_r>:
 8004730:	4901      	ldr	r1, [pc, #4]	; (8004738 <_cleanup_r+0x8>)
 8004732:	f000 b8af 	b.w	8004894 <_fwalk_reent>
 8004736:	bf00      	nop
 8004738:	08004671 	.word	0x08004671

0800473c <__sfmoreglue>:
 800473c:	b570      	push	{r4, r5, r6, lr}
 800473e:	2268      	movs	r2, #104	; 0x68
 8004740:	1e4d      	subs	r5, r1, #1
 8004742:	4355      	muls	r5, r2
 8004744:	460e      	mov	r6, r1
 8004746:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800474a:	f000 f997 	bl	8004a7c <_malloc_r>
 800474e:	4604      	mov	r4, r0
 8004750:	b140      	cbz	r0, 8004764 <__sfmoreglue+0x28>
 8004752:	2100      	movs	r1, #0
 8004754:	e9c0 1600 	strd	r1, r6, [r0]
 8004758:	300c      	adds	r0, #12
 800475a:	60a0      	str	r0, [r4, #8]
 800475c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004760:	f7ff fdaa 	bl	80042b8 <memset>
 8004764:	4620      	mov	r0, r4
 8004766:	bd70      	pop	{r4, r5, r6, pc}

08004768 <__sfp_lock_acquire>:
 8004768:	4801      	ldr	r0, [pc, #4]	; (8004770 <__sfp_lock_acquire+0x8>)
 800476a:	f000 b8b3 	b.w	80048d4 <__retarget_lock_acquire_recursive>
 800476e:	bf00      	nop
 8004770:	20012eb9 	.word	0x20012eb9

08004774 <__sfp_lock_release>:
 8004774:	4801      	ldr	r0, [pc, #4]	; (800477c <__sfp_lock_release+0x8>)
 8004776:	f000 b8ae 	b.w	80048d6 <__retarget_lock_release_recursive>
 800477a:	bf00      	nop
 800477c:	20012eb9 	.word	0x20012eb9

08004780 <__sinit_lock_acquire>:
 8004780:	4801      	ldr	r0, [pc, #4]	; (8004788 <__sinit_lock_acquire+0x8>)
 8004782:	f000 b8a7 	b.w	80048d4 <__retarget_lock_acquire_recursive>
 8004786:	bf00      	nop
 8004788:	20012eba 	.word	0x20012eba

0800478c <__sinit_lock_release>:
 800478c:	4801      	ldr	r0, [pc, #4]	; (8004794 <__sinit_lock_release+0x8>)
 800478e:	f000 b8a2 	b.w	80048d6 <__retarget_lock_release_recursive>
 8004792:	bf00      	nop
 8004794:	20012eba 	.word	0x20012eba

08004798 <__sinit>:
 8004798:	b510      	push	{r4, lr}
 800479a:	4604      	mov	r4, r0
 800479c:	f7ff fff0 	bl	8004780 <__sinit_lock_acquire>
 80047a0:	69a3      	ldr	r3, [r4, #24]
 80047a2:	b11b      	cbz	r3, 80047ac <__sinit+0x14>
 80047a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047a8:	f7ff bff0 	b.w	800478c <__sinit_lock_release>
 80047ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80047b0:	6523      	str	r3, [r4, #80]	; 0x50
 80047b2:	4b13      	ldr	r3, [pc, #76]	; (8004800 <__sinit+0x68>)
 80047b4:	4a13      	ldr	r2, [pc, #76]	; (8004804 <__sinit+0x6c>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80047ba:	42a3      	cmp	r3, r4
 80047bc:	bf04      	itt	eq
 80047be:	2301      	moveq	r3, #1
 80047c0:	61a3      	streq	r3, [r4, #24]
 80047c2:	4620      	mov	r0, r4
 80047c4:	f000 f820 	bl	8004808 <__sfp>
 80047c8:	6060      	str	r0, [r4, #4]
 80047ca:	4620      	mov	r0, r4
 80047cc:	f000 f81c 	bl	8004808 <__sfp>
 80047d0:	60a0      	str	r0, [r4, #8]
 80047d2:	4620      	mov	r0, r4
 80047d4:	f000 f818 	bl	8004808 <__sfp>
 80047d8:	2200      	movs	r2, #0
 80047da:	60e0      	str	r0, [r4, #12]
 80047dc:	2104      	movs	r1, #4
 80047de:	6860      	ldr	r0, [r4, #4]
 80047e0:	f7ff ff82 	bl	80046e8 <std>
 80047e4:	68a0      	ldr	r0, [r4, #8]
 80047e6:	2201      	movs	r2, #1
 80047e8:	2109      	movs	r1, #9
 80047ea:	f7ff ff7d 	bl	80046e8 <std>
 80047ee:	68e0      	ldr	r0, [r4, #12]
 80047f0:	2202      	movs	r2, #2
 80047f2:	2112      	movs	r1, #18
 80047f4:	f7ff ff78 	bl	80046e8 <std>
 80047f8:	2301      	movs	r3, #1
 80047fa:	61a3      	str	r3, [r4, #24]
 80047fc:	e7d2      	b.n	80047a4 <__sinit+0xc>
 80047fe:	bf00      	nop
 8004800:	08005388 	.word	0x08005388
 8004804:	08004731 	.word	0x08004731

08004808 <__sfp>:
 8004808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800480a:	4607      	mov	r7, r0
 800480c:	f7ff ffac 	bl	8004768 <__sfp_lock_acquire>
 8004810:	4b1e      	ldr	r3, [pc, #120]	; (800488c <__sfp+0x84>)
 8004812:	681e      	ldr	r6, [r3, #0]
 8004814:	69b3      	ldr	r3, [r6, #24]
 8004816:	b913      	cbnz	r3, 800481e <__sfp+0x16>
 8004818:	4630      	mov	r0, r6
 800481a:	f7ff ffbd 	bl	8004798 <__sinit>
 800481e:	3648      	adds	r6, #72	; 0x48
 8004820:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004824:	3b01      	subs	r3, #1
 8004826:	d503      	bpl.n	8004830 <__sfp+0x28>
 8004828:	6833      	ldr	r3, [r6, #0]
 800482a:	b30b      	cbz	r3, 8004870 <__sfp+0x68>
 800482c:	6836      	ldr	r6, [r6, #0]
 800482e:	e7f7      	b.n	8004820 <__sfp+0x18>
 8004830:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004834:	b9d5      	cbnz	r5, 800486c <__sfp+0x64>
 8004836:	4b16      	ldr	r3, [pc, #88]	; (8004890 <__sfp+0x88>)
 8004838:	60e3      	str	r3, [r4, #12]
 800483a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800483e:	6665      	str	r5, [r4, #100]	; 0x64
 8004840:	f000 f847 	bl	80048d2 <__retarget_lock_init_recursive>
 8004844:	f7ff ff96 	bl	8004774 <__sfp_lock_release>
 8004848:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800484c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004850:	6025      	str	r5, [r4, #0]
 8004852:	61a5      	str	r5, [r4, #24]
 8004854:	2208      	movs	r2, #8
 8004856:	4629      	mov	r1, r5
 8004858:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800485c:	f7ff fd2c 	bl	80042b8 <memset>
 8004860:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004864:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004868:	4620      	mov	r0, r4
 800486a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800486c:	3468      	adds	r4, #104	; 0x68
 800486e:	e7d9      	b.n	8004824 <__sfp+0x1c>
 8004870:	2104      	movs	r1, #4
 8004872:	4638      	mov	r0, r7
 8004874:	f7ff ff62 	bl	800473c <__sfmoreglue>
 8004878:	4604      	mov	r4, r0
 800487a:	6030      	str	r0, [r6, #0]
 800487c:	2800      	cmp	r0, #0
 800487e:	d1d5      	bne.n	800482c <__sfp+0x24>
 8004880:	f7ff ff78 	bl	8004774 <__sfp_lock_release>
 8004884:	230c      	movs	r3, #12
 8004886:	603b      	str	r3, [r7, #0]
 8004888:	e7ee      	b.n	8004868 <__sfp+0x60>
 800488a:	bf00      	nop
 800488c:	08005388 	.word	0x08005388
 8004890:	ffff0001 	.word	0xffff0001

08004894 <_fwalk_reent>:
 8004894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004898:	4606      	mov	r6, r0
 800489a:	4688      	mov	r8, r1
 800489c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80048a0:	2700      	movs	r7, #0
 80048a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80048a6:	f1b9 0901 	subs.w	r9, r9, #1
 80048aa:	d505      	bpl.n	80048b8 <_fwalk_reent+0x24>
 80048ac:	6824      	ldr	r4, [r4, #0]
 80048ae:	2c00      	cmp	r4, #0
 80048b0:	d1f7      	bne.n	80048a2 <_fwalk_reent+0xe>
 80048b2:	4638      	mov	r0, r7
 80048b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048b8:	89ab      	ldrh	r3, [r5, #12]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d907      	bls.n	80048ce <_fwalk_reent+0x3a>
 80048be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80048c2:	3301      	adds	r3, #1
 80048c4:	d003      	beq.n	80048ce <_fwalk_reent+0x3a>
 80048c6:	4629      	mov	r1, r5
 80048c8:	4630      	mov	r0, r6
 80048ca:	47c0      	blx	r8
 80048cc:	4307      	orrs	r7, r0
 80048ce:	3568      	adds	r5, #104	; 0x68
 80048d0:	e7e9      	b.n	80048a6 <_fwalk_reent+0x12>

080048d2 <__retarget_lock_init_recursive>:
 80048d2:	4770      	bx	lr

080048d4 <__retarget_lock_acquire_recursive>:
 80048d4:	4770      	bx	lr

080048d6 <__retarget_lock_release_recursive>:
 80048d6:	4770      	bx	lr

080048d8 <__swhatbuf_r>:
 80048d8:	b570      	push	{r4, r5, r6, lr}
 80048da:	460e      	mov	r6, r1
 80048dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048e0:	2900      	cmp	r1, #0
 80048e2:	b096      	sub	sp, #88	; 0x58
 80048e4:	4614      	mov	r4, r2
 80048e6:	461d      	mov	r5, r3
 80048e8:	da08      	bge.n	80048fc <__swhatbuf_r+0x24>
 80048ea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	602a      	str	r2, [r5, #0]
 80048f2:	061a      	lsls	r2, r3, #24
 80048f4:	d410      	bmi.n	8004918 <__swhatbuf_r+0x40>
 80048f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048fa:	e00e      	b.n	800491a <__swhatbuf_r+0x42>
 80048fc:	466a      	mov	r2, sp
 80048fe:	f000 fc95 	bl	800522c <_fstat_r>
 8004902:	2800      	cmp	r0, #0
 8004904:	dbf1      	blt.n	80048ea <__swhatbuf_r+0x12>
 8004906:	9a01      	ldr	r2, [sp, #4]
 8004908:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800490c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004910:	425a      	negs	r2, r3
 8004912:	415a      	adcs	r2, r3
 8004914:	602a      	str	r2, [r5, #0]
 8004916:	e7ee      	b.n	80048f6 <__swhatbuf_r+0x1e>
 8004918:	2340      	movs	r3, #64	; 0x40
 800491a:	2000      	movs	r0, #0
 800491c:	6023      	str	r3, [r4, #0]
 800491e:	b016      	add	sp, #88	; 0x58
 8004920:	bd70      	pop	{r4, r5, r6, pc}
	...

08004924 <__smakebuf_r>:
 8004924:	898b      	ldrh	r3, [r1, #12]
 8004926:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004928:	079d      	lsls	r5, r3, #30
 800492a:	4606      	mov	r6, r0
 800492c:	460c      	mov	r4, r1
 800492e:	d507      	bpl.n	8004940 <__smakebuf_r+0x1c>
 8004930:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004934:	6023      	str	r3, [r4, #0]
 8004936:	6123      	str	r3, [r4, #16]
 8004938:	2301      	movs	r3, #1
 800493a:	6163      	str	r3, [r4, #20]
 800493c:	b002      	add	sp, #8
 800493e:	bd70      	pop	{r4, r5, r6, pc}
 8004940:	ab01      	add	r3, sp, #4
 8004942:	466a      	mov	r2, sp
 8004944:	f7ff ffc8 	bl	80048d8 <__swhatbuf_r>
 8004948:	9900      	ldr	r1, [sp, #0]
 800494a:	4605      	mov	r5, r0
 800494c:	4630      	mov	r0, r6
 800494e:	f000 f895 	bl	8004a7c <_malloc_r>
 8004952:	b948      	cbnz	r0, 8004968 <__smakebuf_r+0x44>
 8004954:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004958:	059a      	lsls	r2, r3, #22
 800495a:	d4ef      	bmi.n	800493c <__smakebuf_r+0x18>
 800495c:	f023 0303 	bic.w	r3, r3, #3
 8004960:	f043 0302 	orr.w	r3, r3, #2
 8004964:	81a3      	strh	r3, [r4, #12]
 8004966:	e7e3      	b.n	8004930 <__smakebuf_r+0xc>
 8004968:	4b0d      	ldr	r3, [pc, #52]	; (80049a0 <__smakebuf_r+0x7c>)
 800496a:	62b3      	str	r3, [r6, #40]	; 0x28
 800496c:	89a3      	ldrh	r3, [r4, #12]
 800496e:	6020      	str	r0, [r4, #0]
 8004970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004974:	81a3      	strh	r3, [r4, #12]
 8004976:	9b00      	ldr	r3, [sp, #0]
 8004978:	6163      	str	r3, [r4, #20]
 800497a:	9b01      	ldr	r3, [sp, #4]
 800497c:	6120      	str	r0, [r4, #16]
 800497e:	b15b      	cbz	r3, 8004998 <__smakebuf_r+0x74>
 8004980:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004984:	4630      	mov	r0, r6
 8004986:	f000 fc63 	bl	8005250 <_isatty_r>
 800498a:	b128      	cbz	r0, 8004998 <__smakebuf_r+0x74>
 800498c:	89a3      	ldrh	r3, [r4, #12]
 800498e:	f023 0303 	bic.w	r3, r3, #3
 8004992:	f043 0301 	orr.w	r3, r3, #1
 8004996:	81a3      	strh	r3, [r4, #12]
 8004998:	89a0      	ldrh	r0, [r4, #12]
 800499a:	4305      	orrs	r5, r0
 800499c:	81a5      	strh	r5, [r4, #12]
 800499e:	e7cd      	b.n	800493c <__smakebuf_r+0x18>
 80049a0:	08004731 	.word	0x08004731

080049a4 <_free_r>:
 80049a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80049a6:	2900      	cmp	r1, #0
 80049a8:	d044      	beq.n	8004a34 <_free_r+0x90>
 80049aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049ae:	9001      	str	r0, [sp, #4]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f1a1 0404 	sub.w	r4, r1, #4
 80049b6:	bfb8      	it	lt
 80049b8:	18e4      	addlt	r4, r4, r3
 80049ba:	f000 fc6b 	bl	8005294 <__malloc_lock>
 80049be:	4a1e      	ldr	r2, [pc, #120]	; (8004a38 <_free_r+0x94>)
 80049c0:	9801      	ldr	r0, [sp, #4]
 80049c2:	6813      	ldr	r3, [r2, #0]
 80049c4:	b933      	cbnz	r3, 80049d4 <_free_r+0x30>
 80049c6:	6063      	str	r3, [r4, #4]
 80049c8:	6014      	str	r4, [r2, #0]
 80049ca:	b003      	add	sp, #12
 80049cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80049d0:	f000 bc66 	b.w	80052a0 <__malloc_unlock>
 80049d4:	42a3      	cmp	r3, r4
 80049d6:	d908      	bls.n	80049ea <_free_r+0x46>
 80049d8:	6825      	ldr	r5, [r4, #0]
 80049da:	1961      	adds	r1, r4, r5
 80049dc:	428b      	cmp	r3, r1
 80049de:	bf01      	itttt	eq
 80049e0:	6819      	ldreq	r1, [r3, #0]
 80049e2:	685b      	ldreq	r3, [r3, #4]
 80049e4:	1949      	addeq	r1, r1, r5
 80049e6:	6021      	streq	r1, [r4, #0]
 80049e8:	e7ed      	b.n	80049c6 <_free_r+0x22>
 80049ea:	461a      	mov	r2, r3
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	b10b      	cbz	r3, 80049f4 <_free_r+0x50>
 80049f0:	42a3      	cmp	r3, r4
 80049f2:	d9fa      	bls.n	80049ea <_free_r+0x46>
 80049f4:	6811      	ldr	r1, [r2, #0]
 80049f6:	1855      	adds	r5, r2, r1
 80049f8:	42a5      	cmp	r5, r4
 80049fa:	d10b      	bne.n	8004a14 <_free_r+0x70>
 80049fc:	6824      	ldr	r4, [r4, #0]
 80049fe:	4421      	add	r1, r4
 8004a00:	1854      	adds	r4, r2, r1
 8004a02:	42a3      	cmp	r3, r4
 8004a04:	6011      	str	r1, [r2, #0]
 8004a06:	d1e0      	bne.n	80049ca <_free_r+0x26>
 8004a08:	681c      	ldr	r4, [r3, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	6053      	str	r3, [r2, #4]
 8004a0e:	4421      	add	r1, r4
 8004a10:	6011      	str	r1, [r2, #0]
 8004a12:	e7da      	b.n	80049ca <_free_r+0x26>
 8004a14:	d902      	bls.n	8004a1c <_free_r+0x78>
 8004a16:	230c      	movs	r3, #12
 8004a18:	6003      	str	r3, [r0, #0]
 8004a1a:	e7d6      	b.n	80049ca <_free_r+0x26>
 8004a1c:	6825      	ldr	r5, [r4, #0]
 8004a1e:	1961      	adds	r1, r4, r5
 8004a20:	428b      	cmp	r3, r1
 8004a22:	bf04      	itt	eq
 8004a24:	6819      	ldreq	r1, [r3, #0]
 8004a26:	685b      	ldreq	r3, [r3, #4]
 8004a28:	6063      	str	r3, [r4, #4]
 8004a2a:	bf04      	itt	eq
 8004a2c:	1949      	addeq	r1, r1, r5
 8004a2e:	6021      	streq	r1, [r4, #0]
 8004a30:	6054      	str	r4, [r2, #4]
 8004a32:	e7ca      	b.n	80049ca <_free_r+0x26>
 8004a34:	b003      	add	sp, #12
 8004a36:	bd30      	pop	{r4, r5, pc}
 8004a38:	20012ebc 	.word	0x20012ebc

08004a3c <sbrk_aligned>:
 8004a3c:	b570      	push	{r4, r5, r6, lr}
 8004a3e:	4e0e      	ldr	r6, [pc, #56]	; (8004a78 <sbrk_aligned+0x3c>)
 8004a40:	460c      	mov	r4, r1
 8004a42:	6831      	ldr	r1, [r6, #0]
 8004a44:	4605      	mov	r5, r0
 8004a46:	b911      	cbnz	r1, 8004a4e <sbrk_aligned+0x12>
 8004a48:	f000 fb7a 	bl	8005140 <_sbrk_r>
 8004a4c:	6030      	str	r0, [r6, #0]
 8004a4e:	4621      	mov	r1, r4
 8004a50:	4628      	mov	r0, r5
 8004a52:	f000 fb75 	bl	8005140 <_sbrk_r>
 8004a56:	1c43      	adds	r3, r0, #1
 8004a58:	d00a      	beq.n	8004a70 <sbrk_aligned+0x34>
 8004a5a:	1cc4      	adds	r4, r0, #3
 8004a5c:	f024 0403 	bic.w	r4, r4, #3
 8004a60:	42a0      	cmp	r0, r4
 8004a62:	d007      	beq.n	8004a74 <sbrk_aligned+0x38>
 8004a64:	1a21      	subs	r1, r4, r0
 8004a66:	4628      	mov	r0, r5
 8004a68:	f000 fb6a 	bl	8005140 <_sbrk_r>
 8004a6c:	3001      	adds	r0, #1
 8004a6e:	d101      	bne.n	8004a74 <sbrk_aligned+0x38>
 8004a70:	f04f 34ff 	mov.w	r4, #4294967295
 8004a74:	4620      	mov	r0, r4
 8004a76:	bd70      	pop	{r4, r5, r6, pc}
 8004a78:	20012ec0 	.word	0x20012ec0

08004a7c <_malloc_r>:
 8004a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a80:	1ccd      	adds	r5, r1, #3
 8004a82:	f025 0503 	bic.w	r5, r5, #3
 8004a86:	3508      	adds	r5, #8
 8004a88:	2d0c      	cmp	r5, #12
 8004a8a:	bf38      	it	cc
 8004a8c:	250c      	movcc	r5, #12
 8004a8e:	2d00      	cmp	r5, #0
 8004a90:	4607      	mov	r7, r0
 8004a92:	db01      	blt.n	8004a98 <_malloc_r+0x1c>
 8004a94:	42a9      	cmp	r1, r5
 8004a96:	d905      	bls.n	8004aa4 <_malloc_r+0x28>
 8004a98:	230c      	movs	r3, #12
 8004a9a:	603b      	str	r3, [r7, #0]
 8004a9c:	2600      	movs	r6, #0
 8004a9e:	4630      	mov	r0, r6
 8004aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004aa4:	4e2e      	ldr	r6, [pc, #184]	; (8004b60 <_malloc_r+0xe4>)
 8004aa6:	f000 fbf5 	bl	8005294 <__malloc_lock>
 8004aaa:	6833      	ldr	r3, [r6, #0]
 8004aac:	461c      	mov	r4, r3
 8004aae:	bb34      	cbnz	r4, 8004afe <_malloc_r+0x82>
 8004ab0:	4629      	mov	r1, r5
 8004ab2:	4638      	mov	r0, r7
 8004ab4:	f7ff ffc2 	bl	8004a3c <sbrk_aligned>
 8004ab8:	1c43      	adds	r3, r0, #1
 8004aba:	4604      	mov	r4, r0
 8004abc:	d14d      	bne.n	8004b5a <_malloc_r+0xde>
 8004abe:	6834      	ldr	r4, [r6, #0]
 8004ac0:	4626      	mov	r6, r4
 8004ac2:	2e00      	cmp	r6, #0
 8004ac4:	d140      	bne.n	8004b48 <_malloc_r+0xcc>
 8004ac6:	6823      	ldr	r3, [r4, #0]
 8004ac8:	4631      	mov	r1, r6
 8004aca:	4638      	mov	r0, r7
 8004acc:	eb04 0803 	add.w	r8, r4, r3
 8004ad0:	f000 fb36 	bl	8005140 <_sbrk_r>
 8004ad4:	4580      	cmp	r8, r0
 8004ad6:	d13a      	bne.n	8004b4e <_malloc_r+0xd2>
 8004ad8:	6821      	ldr	r1, [r4, #0]
 8004ada:	3503      	adds	r5, #3
 8004adc:	1a6d      	subs	r5, r5, r1
 8004ade:	f025 0503 	bic.w	r5, r5, #3
 8004ae2:	3508      	adds	r5, #8
 8004ae4:	2d0c      	cmp	r5, #12
 8004ae6:	bf38      	it	cc
 8004ae8:	250c      	movcc	r5, #12
 8004aea:	4629      	mov	r1, r5
 8004aec:	4638      	mov	r0, r7
 8004aee:	f7ff ffa5 	bl	8004a3c <sbrk_aligned>
 8004af2:	3001      	adds	r0, #1
 8004af4:	d02b      	beq.n	8004b4e <_malloc_r+0xd2>
 8004af6:	6823      	ldr	r3, [r4, #0]
 8004af8:	442b      	add	r3, r5
 8004afa:	6023      	str	r3, [r4, #0]
 8004afc:	e00e      	b.n	8004b1c <_malloc_r+0xa0>
 8004afe:	6822      	ldr	r2, [r4, #0]
 8004b00:	1b52      	subs	r2, r2, r5
 8004b02:	d41e      	bmi.n	8004b42 <_malloc_r+0xc6>
 8004b04:	2a0b      	cmp	r2, #11
 8004b06:	d916      	bls.n	8004b36 <_malloc_r+0xba>
 8004b08:	1961      	adds	r1, r4, r5
 8004b0a:	42a3      	cmp	r3, r4
 8004b0c:	6025      	str	r5, [r4, #0]
 8004b0e:	bf18      	it	ne
 8004b10:	6059      	strne	r1, [r3, #4]
 8004b12:	6863      	ldr	r3, [r4, #4]
 8004b14:	bf08      	it	eq
 8004b16:	6031      	streq	r1, [r6, #0]
 8004b18:	5162      	str	r2, [r4, r5]
 8004b1a:	604b      	str	r3, [r1, #4]
 8004b1c:	4638      	mov	r0, r7
 8004b1e:	f104 060b 	add.w	r6, r4, #11
 8004b22:	f000 fbbd 	bl	80052a0 <__malloc_unlock>
 8004b26:	f026 0607 	bic.w	r6, r6, #7
 8004b2a:	1d23      	adds	r3, r4, #4
 8004b2c:	1af2      	subs	r2, r6, r3
 8004b2e:	d0b6      	beq.n	8004a9e <_malloc_r+0x22>
 8004b30:	1b9b      	subs	r3, r3, r6
 8004b32:	50a3      	str	r3, [r4, r2]
 8004b34:	e7b3      	b.n	8004a9e <_malloc_r+0x22>
 8004b36:	6862      	ldr	r2, [r4, #4]
 8004b38:	42a3      	cmp	r3, r4
 8004b3a:	bf0c      	ite	eq
 8004b3c:	6032      	streq	r2, [r6, #0]
 8004b3e:	605a      	strne	r2, [r3, #4]
 8004b40:	e7ec      	b.n	8004b1c <_malloc_r+0xa0>
 8004b42:	4623      	mov	r3, r4
 8004b44:	6864      	ldr	r4, [r4, #4]
 8004b46:	e7b2      	b.n	8004aae <_malloc_r+0x32>
 8004b48:	4634      	mov	r4, r6
 8004b4a:	6876      	ldr	r6, [r6, #4]
 8004b4c:	e7b9      	b.n	8004ac2 <_malloc_r+0x46>
 8004b4e:	230c      	movs	r3, #12
 8004b50:	603b      	str	r3, [r7, #0]
 8004b52:	4638      	mov	r0, r7
 8004b54:	f000 fba4 	bl	80052a0 <__malloc_unlock>
 8004b58:	e7a1      	b.n	8004a9e <_malloc_r+0x22>
 8004b5a:	6025      	str	r5, [r4, #0]
 8004b5c:	e7de      	b.n	8004b1c <_malloc_r+0xa0>
 8004b5e:	bf00      	nop
 8004b60:	20012ebc 	.word	0x20012ebc

08004b64 <__sfputc_r>:
 8004b64:	6893      	ldr	r3, [r2, #8]
 8004b66:	3b01      	subs	r3, #1
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	b410      	push	{r4}
 8004b6c:	6093      	str	r3, [r2, #8]
 8004b6e:	da08      	bge.n	8004b82 <__sfputc_r+0x1e>
 8004b70:	6994      	ldr	r4, [r2, #24]
 8004b72:	42a3      	cmp	r3, r4
 8004b74:	db01      	blt.n	8004b7a <__sfputc_r+0x16>
 8004b76:	290a      	cmp	r1, #10
 8004b78:	d103      	bne.n	8004b82 <__sfputc_r+0x1e>
 8004b7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b7e:	f7ff bc31 	b.w	80043e4 <__swbuf_r>
 8004b82:	6813      	ldr	r3, [r2, #0]
 8004b84:	1c58      	adds	r0, r3, #1
 8004b86:	6010      	str	r0, [r2, #0]
 8004b88:	7019      	strb	r1, [r3, #0]
 8004b8a:	4608      	mov	r0, r1
 8004b8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b90:	4770      	bx	lr

08004b92 <__sfputs_r>:
 8004b92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b94:	4606      	mov	r6, r0
 8004b96:	460f      	mov	r7, r1
 8004b98:	4614      	mov	r4, r2
 8004b9a:	18d5      	adds	r5, r2, r3
 8004b9c:	42ac      	cmp	r4, r5
 8004b9e:	d101      	bne.n	8004ba4 <__sfputs_r+0x12>
 8004ba0:	2000      	movs	r0, #0
 8004ba2:	e007      	b.n	8004bb4 <__sfputs_r+0x22>
 8004ba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ba8:	463a      	mov	r2, r7
 8004baa:	4630      	mov	r0, r6
 8004bac:	f7ff ffda 	bl	8004b64 <__sfputc_r>
 8004bb0:	1c43      	adds	r3, r0, #1
 8004bb2:	d1f3      	bne.n	8004b9c <__sfputs_r+0xa>
 8004bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004bb8 <_vfiprintf_r>:
 8004bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bbc:	460d      	mov	r5, r1
 8004bbe:	b09d      	sub	sp, #116	; 0x74
 8004bc0:	4614      	mov	r4, r2
 8004bc2:	4698      	mov	r8, r3
 8004bc4:	4606      	mov	r6, r0
 8004bc6:	b118      	cbz	r0, 8004bd0 <_vfiprintf_r+0x18>
 8004bc8:	6983      	ldr	r3, [r0, #24]
 8004bca:	b90b      	cbnz	r3, 8004bd0 <_vfiprintf_r+0x18>
 8004bcc:	f7ff fde4 	bl	8004798 <__sinit>
 8004bd0:	4b89      	ldr	r3, [pc, #548]	; (8004df8 <_vfiprintf_r+0x240>)
 8004bd2:	429d      	cmp	r5, r3
 8004bd4:	d11b      	bne.n	8004c0e <_vfiprintf_r+0x56>
 8004bd6:	6875      	ldr	r5, [r6, #4]
 8004bd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004bda:	07d9      	lsls	r1, r3, #31
 8004bdc:	d405      	bmi.n	8004bea <_vfiprintf_r+0x32>
 8004bde:	89ab      	ldrh	r3, [r5, #12]
 8004be0:	059a      	lsls	r2, r3, #22
 8004be2:	d402      	bmi.n	8004bea <_vfiprintf_r+0x32>
 8004be4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004be6:	f7ff fe75 	bl	80048d4 <__retarget_lock_acquire_recursive>
 8004bea:	89ab      	ldrh	r3, [r5, #12]
 8004bec:	071b      	lsls	r3, r3, #28
 8004bee:	d501      	bpl.n	8004bf4 <_vfiprintf_r+0x3c>
 8004bf0:	692b      	ldr	r3, [r5, #16]
 8004bf2:	b9eb      	cbnz	r3, 8004c30 <_vfiprintf_r+0x78>
 8004bf4:	4629      	mov	r1, r5
 8004bf6:	4630      	mov	r0, r6
 8004bf8:	f7ff fc46 	bl	8004488 <__swsetup_r>
 8004bfc:	b1c0      	cbz	r0, 8004c30 <_vfiprintf_r+0x78>
 8004bfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c00:	07dc      	lsls	r4, r3, #31
 8004c02:	d50e      	bpl.n	8004c22 <_vfiprintf_r+0x6a>
 8004c04:	f04f 30ff 	mov.w	r0, #4294967295
 8004c08:	b01d      	add	sp, #116	; 0x74
 8004c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c0e:	4b7b      	ldr	r3, [pc, #492]	; (8004dfc <_vfiprintf_r+0x244>)
 8004c10:	429d      	cmp	r5, r3
 8004c12:	d101      	bne.n	8004c18 <_vfiprintf_r+0x60>
 8004c14:	68b5      	ldr	r5, [r6, #8]
 8004c16:	e7df      	b.n	8004bd8 <_vfiprintf_r+0x20>
 8004c18:	4b79      	ldr	r3, [pc, #484]	; (8004e00 <_vfiprintf_r+0x248>)
 8004c1a:	429d      	cmp	r5, r3
 8004c1c:	bf08      	it	eq
 8004c1e:	68f5      	ldreq	r5, [r6, #12]
 8004c20:	e7da      	b.n	8004bd8 <_vfiprintf_r+0x20>
 8004c22:	89ab      	ldrh	r3, [r5, #12]
 8004c24:	0598      	lsls	r0, r3, #22
 8004c26:	d4ed      	bmi.n	8004c04 <_vfiprintf_r+0x4c>
 8004c28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c2a:	f7ff fe54 	bl	80048d6 <__retarget_lock_release_recursive>
 8004c2e:	e7e9      	b.n	8004c04 <_vfiprintf_r+0x4c>
 8004c30:	2300      	movs	r3, #0
 8004c32:	9309      	str	r3, [sp, #36]	; 0x24
 8004c34:	2320      	movs	r3, #32
 8004c36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c3e:	2330      	movs	r3, #48	; 0x30
 8004c40:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004e04 <_vfiprintf_r+0x24c>
 8004c44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c48:	f04f 0901 	mov.w	r9, #1
 8004c4c:	4623      	mov	r3, r4
 8004c4e:	469a      	mov	sl, r3
 8004c50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c54:	b10a      	cbz	r2, 8004c5a <_vfiprintf_r+0xa2>
 8004c56:	2a25      	cmp	r2, #37	; 0x25
 8004c58:	d1f9      	bne.n	8004c4e <_vfiprintf_r+0x96>
 8004c5a:	ebba 0b04 	subs.w	fp, sl, r4
 8004c5e:	d00b      	beq.n	8004c78 <_vfiprintf_r+0xc0>
 8004c60:	465b      	mov	r3, fp
 8004c62:	4622      	mov	r2, r4
 8004c64:	4629      	mov	r1, r5
 8004c66:	4630      	mov	r0, r6
 8004c68:	f7ff ff93 	bl	8004b92 <__sfputs_r>
 8004c6c:	3001      	adds	r0, #1
 8004c6e:	f000 80aa 	beq.w	8004dc6 <_vfiprintf_r+0x20e>
 8004c72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c74:	445a      	add	r2, fp
 8004c76:	9209      	str	r2, [sp, #36]	; 0x24
 8004c78:	f89a 3000 	ldrb.w	r3, [sl]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f000 80a2 	beq.w	8004dc6 <_vfiprintf_r+0x20e>
 8004c82:	2300      	movs	r3, #0
 8004c84:	f04f 32ff 	mov.w	r2, #4294967295
 8004c88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c8c:	f10a 0a01 	add.w	sl, sl, #1
 8004c90:	9304      	str	r3, [sp, #16]
 8004c92:	9307      	str	r3, [sp, #28]
 8004c94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c98:	931a      	str	r3, [sp, #104]	; 0x68
 8004c9a:	4654      	mov	r4, sl
 8004c9c:	2205      	movs	r2, #5
 8004c9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ca2:	4858      	ldr	r0, [pc, #352]	; (8004e04 <_vfiprintf_r+0x24c>)
 8004ca4:	f7fb fa94 	bl	80001d0 <memchr>
 8004ca8:	9a04      	ldr	r2, [sp, #16]
 8004caa:	b9d8      	cbnz	r0, 8004ce4 <_vfiprintf_r+0x12c>
 8004cac:	06d1      	lsls	r1, r2, #27
 8004cae:	bf44      	itt	mi
 8004cb0:	2320      	movmi	r3, #32
 8004cb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004cb6:	0713      	lsls	r3, r2, #28
 8004cb8:	bf44      	itt	mi
 8004cba:	232b      	movmi	r3, #43	; 0x2b
 8004cbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004cc0:	f89a 3000 	ldrb.w	r3, [sl]
 8004cc4:	2b2a      	cmp	r3, #42	; 0x2a
 8004cc6:	d015      	beq.n	8004cf4 <_vfiprintf_r+0x13c>
 8004cc8:	9a07      	ldr	r2, [sp, #28]
 8004cca:	4654      	mov	r4, sl
 8004ccc:	2000      	movs	r0, #0
 8004cce:	f04f 0c0a 	mov.w	ip, #10
 8004cd2:	4621      	mov	r1, r4
 8004cd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cd8:	3b30      	subs	r3, #48	; 0x30
 8004cda:	2b09      	cmp	r3, #9
 8004cdc:	d94e      	bls.n	8004d7c <_vfiprintf_r+0x1c4>
 8004cde:	b1b0      	cbz	r0, 8004d0e <_vfiprintf_r+0x156>
 8004ce0:	9207      	str	r2, [sp, #28]
 8004ce2:	e014      	b.n	8004d0e <_vfiprintf_r+0x156>
 8004ce4:	eba0 0308 	sub.w	r3, r0, r8
 8004ce8:	fa09 f303 	lsl.w	r3, r9, r3
 8004cec:	4313      	orrs	r3, r2
 8004cee:	9304      	str	r3, [sp, #16]
 8004cf0:	46a2      	mov	sl, r4
 8004cf2:	e7d2      	b.n	8004c9a <_vfiprintf_r+0xe2>
 8004cf4:	9b03      	ldr	r3, [sp, #12]
 8004cf6:	1d19      	adds	r1, r3, #4
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	9103      	str	r1, [sp, #12]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	bfbb      	ittet	lt
 8004d00:	425b      	neglt	r3, r3
 8004d02:	f042 0202 	orrlt.w	r2, r2, #2
 8004d06:	9307      	strge	r3, [sp, #28]
 8004d08:	9307      	strlt	r3, [sp, #28]
 8004d0a:	bfb8      	it	lt
 8004d0c:	9204      	strlt	r2, [sp, #16]
 8004d0e:	7823      	ldrb	r3, [r4, #0]
 8004d10:	2b2e      	cmp	r3, #46	; 0x2e
 8004d12:	d10c      	bne.n	8004d2e <_vfiprintf_r+0x176>
 8004d14:	7863      	ldrb	r3, [r4, #1]
 8004d16:	2b2a      	cmp	r3, #42	; 0x2a
 8004d18:	d135      	bne.n	8004d86 <_vfiprintf_r+0x1ce>
 8004d1a:	9b03      	ldr	r3, [sp, #12]
 8004d1c:	1d1a      	adds	r2, r3, #4
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	9203      	str	r2, [sp, #12]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	bfb8      	it	lt
 8004d26:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d2a:	3402      	adds	r4, #2
 8004d2c:	9305      	str	r3, [sp, #20]
 8004d2e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004e14 <_vfiprintf_r+0x25c>
 8004d32:	7821      	ldrb	r1, [r4, #0]
 8004d34:	2203      	movs	r2, #3
 8004d36:	4650      	mov	r0, sl
 8004d38:	f7fb fa4a 	bl	80001d0 <memchr>
 8004d3c:	b140      	cbz	r0, 8004d50 <_vfiprintf_r+0x198>
 8004d3e:	2340      	movs	r3, #64	; 0x40
 8004d40:	eba0 000a 	sub.w	r0, r0, sl
 8004d44:	fa03 f000 	lsl.w	r0, r3, r0
 8004d48:	9b04      	ldr	r3, [sp, #16]
 8004d4a:	4303      	orrs	r3, r0
 8004d4c:	3401      	adds	r4, #1
 8004d4e:	9304      	str	r3, [sp, #16]
 8004d50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d54:	482c      	ldr	r0, [pc, #176]	; (8004e08 <_vfiprintf_r+0x250>)
 8004d56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d5a:	2206      	movs	r2, #6
 8004d5c:	f7fb fa38 	bl	80001d0 <memchr>
 8004d60:	2800      	cmp	r0, #0
 8004d62:	d03f      	beq.n	8004de4 <_vfiprintf_r+0x22c>
 8004d64:	4b29      	ldr	r3, [pc, #164]	; (8004e0c <_vfiprintf_r+0x254>)
 8004d66:	bb1b      	cbnz	r3, 8004db0 <_vfiprintf_r+0x1f8>
 8004d68:	9b03      	ldr	r3, [sp, #12]
 8004d6a:	3307      	adds	r3, #7
 8004d6c:	f023 0307 	bic.w	r3, r3, #7
 8004d70:	3308      	adds	r3, #8
 8004d72:	9303      	str	r3, [sp, #12]
 8004d74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d76:	443b      	add	r3, r7
 8004d78:	9309      	str	r3, [sp, #36]	; 0x24
 8004d7a:	e767      	b.n	8004c4c <_vfiprintf_r+0x94>
 8004d7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d80:	460c      	mov	r4, r1
 8004d82:	2001      	movs	r0, #1
 8004d84:	e7a5      	b.n	8004cd2 <_vfiprintf_r+0x11a>
 8004d86:	2300      	movs	r3, #0
 8004d88:	3401      	adds	r4, #1
 8004d8a:	9305      	str	r3, [sp, #20]
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	f04f 0c0a 	mov.w	ip, #10
 8004d92:	4620      	mov	r0, r4
 8004d94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d98:	3a30      	subs	r2, #48	; 0x30
 8004d9a:	2a09      	cmp	r2, #9
 8004d9c:	d903      	bls.n	8004da6 <_vfiprintf_r+0x1ee>
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d0c5      	beq.n	8004d2e <_vfiprintf_r+0x176>
 8004da2:	9105      	str	r1, [sp, #20]
 8004da4:	e7c3      	b.n	8004d2e <_vfiprintf_r+0x176>
 8004da6:	fb0c 2101 	mla	r1, ip, r1, r2
 8004daa:	4604      	mov	r4, r0
 8004dac:	2301      	movs	r3, #1
 8004dae:	e7f0      	b.n	8004d92 <_vfiprintf_r+0x1da>
 8004db0:	ab03      	add	r3, sp, #12
 8004db2:	9300      	str	r3, [sp, #0]
 8004db4:	462a      	mov	r2, r5
 8004db6:	4b16      	ldr	r3, [pc, #88]	; (8004e10 <_vfiprintf_r+0x258>)
 8004db8:	a904      	add	r1, sp, #16
 8004dba:	4630      	mov	r0, r6
 8004dbc:	f3af 8000 	nop.w
 8004dc0:	4607      	mov	r7, r0
 8004dc2:	1c78      	adds	r0, r7, #1
 8004dc4:	d1d6      	bne.n	8004d74 <_vfiprintf_r+0x1bc>
 8004dc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004dc8:	07d9      	lsls	r1, r3, #31
 8004dca:	d405      	bmi.n	8004dd8 <_vfiprintf_r+0x220>
 8004dcc:	89ab      	ldrh	r3, [r5, #12]
 8004dce:	059a      	lsls	r2, r3, #22
 8004dd0:	d402      	bmi.n	8004dd8 <_vfiprintf_r+0x220>
 8004dd2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004dd4:	f7ff fd7f 	bl	80048d6 <__retarget_lock_release_recursive>
 8004dd8:	89ab      	ldrh	r3, [r5, #12]
 8004dda:	065b      	lsls	r3, r3, #25
 8004ddc:	f53f af12 	bmi.w	8004c04 <_vfiprintf_r+0x4c>
 8004de0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004de2:	e711      	b.n	8004c08 <_vfiprintf_r+0x50>
 8004de4:	ab03      	add	r3, sp, #12
 8004de6:	9300      	str	r3, [sp, #0]
 8004de8:	462a      	mov	r2, r5
 8004dea:	4b09      	ldr	r3, [pc, #36]	; (8004e10 <_vfiprintf_r+0x258>)
 8004dec:	a904      	add	r1, sp, #16
 8004dee:	4630      	mov	r0, r6
 8004df0:	f000 f880 	bl	8004ef4 <_printf_i>
 8004df4:	e7e4      	b.n	8004dc0 <_vfiprintf_r+0x208>
 8004df6:	bf00      	nop
 8004df8:	080053ac 	.word	0x080053ac
 8004dfc:	080053cc 	.word	0x080053cc
 8004e00:	0800538c 	.word	0x0800538c
 8004e04:	080053ec 	.word	0x080053ec
 8004e08:	080053f6 	.word	0x080053f6
 8004e0c:	00000000 	.word	0x00000000
 8004e10:	08004b93 	.word	0x08004b93
 8004e14:	080053f2 	.word	0x080053f2

08004e18 <_printf_common>:
 8004e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e1c:	4616      	mov	r6, r2
 8004e1e:	4699      	mov	r9, r3
 8004e20:	688a      	ldr	r2, [r1, #8]
 8004e22:	690b      	ldr	r3, [r1, #16]
 8004e24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	bfb8      	it	lt
 8004e2c:	4613      	movlt	r3, r2
 8004e2e:	6033      	str	r3, [r6, #0]
 8004e30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e34:	4607      	mov	r7, r0
 8004e36:	460c      	mov	r4, r1
 8004e38:	b10a      	cbz	r2, 8004e3e <_printf_common+0x26>
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	6033      	str	r3, [r6, #0]
 8004e3e:	6823      	ldr	r3, [r4, #0]
 8004e40:	0699      	lsls	r1, r3, #26
 8004e42:	bf42      	ittt	mi
 8004e44:	6833      	ldrmi	r3, [r6, #0]
 8004e46:	3302      	addmi	r3, #2
 8004e48:	6033      	strmi	r3, [r6, #0]
 8004e4a:	6825      	ldr	r5, [r4, #0]
 8004e4c:	f015 0506 	ands.w	r5, r5, #6
 8004e50:	d106      	bne.n	8004e60 <_printf_common+0x48>
 8004e52:	f104 0a19 	add.w	sl, r4, #25
 8004e56:	68e3      	ldr	r3, [r4, #12]
 8004e58:	6832      	ldr	r2, [r6, #0]
 8004e5a:	1a9b      	subs	r3, r3, r2
 8004e5c:	42ab      	cmp	r3, r5
 8004e5e:	dc26      	bgt.n	8004eae <_printf_common+0x96>
 8004e60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e64:	1e13      	subs	r3, r2, #0
 8004e66:	6822      	ldr	r2, [r4, #0]
 8004e68:	bf18      	it	ne
 8004e6a:	2301      	movne	r3, #1
 8004e6c:	0692      	lsls	r2, r2, #26
 8004e6e:	d42b      	bmi.n	8004ec8 <_printf_common+0xb0>
 8004e70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e74:	4649      	mov	r1, r9
 8004e76:	4638      	mov	r0, r7
 8004e78:	47c0      	blx	r8
 8004e7a:	3001      	adds	r0, #1
 8004e7c:	d01e      	beq.n	8004ebc <_printf_common+0xa4>
 8004e7e:	6823      	ldr	r3, [r4, #0]
 8004e80:	68e5      	ldr	r5, [r4, #12]
 8004e82:	6832      	ldr	r2, [r6, #0]
 8004e84:	f003 0306 	and.w	r3, r3, #6
 8004e88:	2b04      	cmp	r3, #4
 8004e8a:	bf08      	it	eq
 8004e8c:	1aad      	subeq	r5, r5, r2
 8004e8e:	68a3      	ldr	r3, [r4, #8]
 8004e90:	6922      	ldr	r2, [r4, #16]
 8004e92:	bf0c      	ite	eq
 8004e94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e98:	2500      	movne	r5, #0
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	bfc4      	itt	gt
 8004e9e:	1a9b      	subgt	r3, r3, r2
 8004ea0:	18ed      	addgt	r5, r5, r3
 8004ea2:	2600      	movs	r6, #0
 8004ea4:	341a      	adds	r4, #26
 8004ea6:	42b5      	cmp	r5, r6
 8004ea8:	d11a      	bne.n	8004ee0 <_printf_common+0xc8>
 8004eaa:	2000      	movs	r0, #0
 8004eac:	e008      	b.n	8004ec0 <_printf_common+0xa8>
 8004eae:	2301      	movs	r3, #1
 8004eb0:	4652      	mov	r2, sl
 8004eb2:	4649      	mov	r1, r9
 8004eb4:	4638      	mov	r0, r7
 8004eb6:	47c0      	blx	r8
 8004eb8:	3001      	adds	r0, #1
 8004eba:	d103      	bne.n	8004ec4 <_printf_common+0xac>
 8004ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ec4:	3501      	adds	r5, #1
 8004ec6:	e7c6      	b.n	8004e56 <_printf_common+0x3e>
 8004ec8:	18e1      	adds	r1, r4, r3
 8004eca:	1c5a      	adds	r2, r3, #1
 8004ecc:	2030      	movs	r0, #48	; 0x30
 8004ece:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ed2:	4422      	add	r2, r4
 8004ed4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ed8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004edc:	3302      	adds	r3, #2
 8004ede:	e7c7      	b.n	8004e70 <_printf_common+0x58>
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	4622      	mov	r2, r4
 8004ee4:	4649      	mov	r1, r9
 8004ee6:	4638      	mov	r0, r7
 8004ee8:	47c0      	blx	r8
 8004eea:	3001      	adds	r0, #1
 8004eec:	d0e6      	beq.n	8004ebc <_printf_common+0xa4>
 8004eee:	3601      	adds	r6, #1
 8004ef0:	e7d9      	b.n	8004ea6 <_printf_common+0x8e>
	...

08004ef4 <_printf_i>:
 8004ef4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ef8:	7e0f      	ldrb	r7, [r1, #24]
 8004efa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004efc:	2f78      	cmp	r7, #120	; 0x78
 8004efe:	4691      	mov	r9, r2
 8004f00:	4680      	mov	r8, r0
 8004f02:	460c      	mov	r4, r1
 8004f04:	469a      	mov	sl, r3
 8004f06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f0a:	d807      	bhi.n	8004f1c <_printf_i+0x28>
 8004f0c:	2f62      	cmp	r7, #98	; 0x62
 8004f0e:	d80a      	bhi.n	8004f26 <_printf_i+0x32>
 8004f10:	2f00      	cmp	r7, #0
 8004f12:	f000 80d8 	beq.w	80050c6 <_printf_i+0x1d2>
 8004f16:	2f58      	cmp	r7, #88	; 0x58
 8004f18:	f000 80a3 	beq.w	8005062 <_printf_i+0x16e>
 8004f1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f24:	e03a      	b.n	8004f9c <_printf_i+0xa8>
 8004f26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f2a:	2b15      	cmp	r3, #21
 8004f2c:	d8f6      	bhi.n	8004f1c <_printf_i+0x28>
 8004f2e:	a101      	add	r1, pc, #4	; (adr r1, 8004f34 <_printf_i+0x40>)
 8004f30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f34:	08004f8d 	.word	0x08004f8d
 8004f38:	08004fa1 	.word	0x08004fa1
 8004f3c:	08004f1d 	.word	0x08004f1d
 8004f40:	08004f1d 	.word	0x08004f1d
 8004f44:	08004f1d 	.word	0x08004f1d
 8004f48:	08004f1d 	.word	0x08004f1d
 8004f4c:	08004fa1 	.word	0x08004fa1
 8004f50:	08004f1d 	.word	0x08004f1d
 8004f54:	08004f1d 	.word	0x08004f1d
 8004f58:	08004f1d 	.word	0x08004f1d
 8004f5c:	08004f1d 	.word	0x08004f1d
 8004f60:	080050ad 	.word	0x080050ad
 8004f64:	08004fd1 	.word	0x08004fd1
 8004f68:	0800508f 	.word	0x0800508f
 8004f6c:	08004f1d 	.word	0x08004f1d
 8004f70:	08004f1d 	.word	0x08004f1d
 8004f74:	080050cf 	.word	0x080050cf
 8004f78:	08004f1d 	.word	0x08004f1d
 8004f7c:	08004fd1 	.word	0x08004fd1
 8004f80:	08004f1d 	.word	0x08004f1d
 8004f84:	08004f1d 	.word	0x08004f1d
 8004f88:	08005097 	.word	0x08005097
 8004f8c:	682b      	ldr	r3, [r5, #0]
 8004f8e:	1d1a      	adds	r2, r3, #4
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	602a      	str	r2, [r5, #0]
 8004f94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e0a3      	b.n	80050e8 <_printf_i+0x1f4>
 8004fa0:	6820      	ldr	r0, [r4, #0]
 8004fa2:	6829      	ldr	r1, [r5, #0]
 8004fa4:	0606      	lsls	r6, r0, #24
 8004fa6:	f101 0304 	add.w	r3, r1, #4
 8004faa:	d50a      	bpl.n	8004fc2 <_printf_i+0xce>
 8004fac:	680e      	ldr	r6, [r1, #0]
 8004fae:	602b      	str	r3, [r5, #0]
 8004fb0:	2e00      	cmp	r6, #0
 8004fb2:	da03      	bge.n	8004fbc <_printf_i+0xc8>
 8004fb4:	232d      	movs	r3, #45	; 0x2d
 8004fb6:	4276      	negs	r6, r6
 8004fb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fbc:	485e      	ldr	r0, [pc, #376]	; (8005138 <_printf_i+0x244>)
 8004fbe:	230a      	movs	r3, #10
 8004fc0:	e019      	b.n	8004ff6 <_printf_i+0x102>
 8004fc2:	680e      	ldr	r6, [r1, #0]
 8004fc4:	602b      	str	r3, [r5, #0]
 8004fc6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004fca:	bf18      	it	ne
 8004fcc:	b236      	sxthne	r6, r6
 8004fce:	e7ef      	b.n	8004fb0 <_printf_i+0xbc>
 8004fd0:	682b      	ldr	r3, [r5, #0]
 8004fd2:	6820      	ldr	r0, [r4, #0]
 8004fd4:	1d19      	adds	r1, r3, #4
 8004fd6:	6029      	str	r1, [r5, #0]
 8004fd8:	0601      	lsls	r1, r0, #24
 8004fda:	d501      	bpl.n	8004fe0 <_printf_i+0xec>
 8004fdc:	681e      	ldr	r6, [r3, #0]
 8004fde:	e002      	b.n	8004fe6 <_printf_i+0xf2>
 8004fe0:	0646      	lsls	r6, r0, #25
 8004fe2:	d5fb      	bpl.n	8004fdc <_printf_i+0xe8>
 8004fe4:	881e      	ldrh	r6, [r3, #0]
 8004fe6:	4854      	ldr	r0, [pc, #336]	; (8005138 <_printf_i+0x244>)
 8004fe8:	2f6f      	cmp	r7, #111	; 0x6f
 8004fea:	bf0c      	ite	eq
 8004fec:	2308      	moveq	r3, #8
 8004fee:	230a      	movne	r3, #10
 8004ff0:	2100      	movs	r1, #0
 8004ff2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ff6:	6865      	ldr	r5, [r4, #4]
 8004ff8:	60a5      	str	r5, [r4, #8]
 8004ffa:	2d00      	cmp	r5, #0
 8004ffc:	bfa2      	ittt	ge
 8004ffe:	6821      	ldrge	r1, [r4, #0]
 8005000:	f021 0104 	bicge.w	r1, r1, #4
 8005004:	6021      	strge	r1, [r4, #0]
 8005006:	b90e      	cbnz	r6, 800500c <_printf_i+0x118>
 8005008:	2d00      	cmp	r5, #0
 800500a:	d04d      	beq.n	80050a8 <_printf_i+0x1b4>
 800500c:	4615      	mov	r5, r2
 800500e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005012:	fb03 6711 	mls	r7, r3, r1, r6
 8005016:	5dc7      	ldrb	r7, [r0, r7]
 8005018:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800501c:	4637      	mov	r7, r6
 800501e:	42bb      	cmp	r3, r7
 8005020:	460e      	mov	r6, r1
 8005022:	d9f4      	bls.n	800500e <_printf_i+0x11a>
 8005024:	2b08      	cmp	r3, #8
 8005026:	d10b      	bne.n	8005040 <_printf_i+0x14c>
 8005028:	6823      	ldr	r3, [r4, #0]
 800502a:	07de      	lsls	r6, r3, #31
 800502c:	d508      	bpl.n	8005040 <_printf_i+0x14c>
 800502e:	6923      	ldr	r3, [r4, #16]
 8005030:	6861      	ldr	r1, [r4, #4]
 8005032:	4299      	cmp	r1, r3
 8005034:	bfde      	ittt	le
 8005036:	2330      	movle	r3, #48	; 0x30
 8005038:	f805 3c01 	strble.w	r3, [r5, #-1]
 800503c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005040:	1b52      	subs	r2, r2, r5
 8005042:	6122      	str	r2, [r4, #16]
 8005044:	f8cd a000 	str.w	sl, [sp]
 8005048:	464b      	mov	r3, r9
 800504a:	aa03      	add	r2, sp, #12
 800504c:	4621      	mov	r1, r4
 800504e:	4640      	mov	r0, r8
 8005050:	f7ff fee2 	bl	8004e18 <_printf_common>
 8005054:	3001      	adds	r0, #1
 8005056:	d14c      	bne.n	80050f2 <_printf_i+0x1fe>
 8005058:	f04f 30ff 	mov.w	r0, #4294967295
 800505c:	b004      	add	sp, #16
 800505e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005062:	4835      	ldr	r0, [pc, #212]	; (8005138 <_printf_i+0x244>)
 8005064:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005068:	6829      	ldr	r1, [r5, #0]
 800506a:	6823      	ldr	r3, [r4, #0]
 800506c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005070:	6029      	str	r1, [r5, #0]
 8005072:	061d      	lsls	r5, r3, #24
 8005074:	d514      	bpl.n	80050a0 <_printf_i+0x1ac>
 8005076:	07df      	lsls	r7, r3, #31
 8005078:	bf44      	itt	mi
 800507a:	f043 0320 	orrmi.w	r3, r3, #32
 800507e:	6023      	strmi	r3, [r4, #0]
 8005080:	b91e      	cbnz	r6, 800508a <_printf_i+0x196>
 8005082:	6823      	ldr	r3, [r4, #0]
 8005084:	f023 0320 	bic.w	r3, r3, #32
 8005088:	6023      	str	r3, [r4, #0]
 800508a:	2310      	movs	r3, #16
 800508c:	e7b0      	b.n	8004ff0 <_printf_i+0xfc>
 800508e:	6823      	ldr	r3, [r4, #0]
 8005090:	f043 0320 	orr.w	r3, r3, #32
 8005094:	6023      	str	r3, [r4, #0]
 8005096:	2378      	movs	r3, #120	; 0x78
 8005098:	4828      	ldr	r0, [pc, #160]	; (800513c <_printf_i+0x248>)
 800509a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800509e:	e7e3      	b.n	8005068 <_printf_i+0x174>
 80050a0:	0659      	lsls	r1, r3, #25
 80050a2:	bf48      	it	mi
 80050a4:	b2b6      	uxthmi	r6, r6
 80050a6:	e7e6      	b.n	8005076 <_printf_i+0x182>
 80050a8:	4615      	mov	r5, r2
 80050aa:	e7bb      	b.n	8005024 <_printf_i+0x130>
 80050ac:	682b      	ldr	r3, [r5, #0]
 80050ae:	6826      	ldr	r6, [r4, #0]
 80050b0:	6961      	ldr	r1, [r4, #20]
 80050b2:	1d18      	adds	r0, r3, #4
 80050b4:	6028      	str	r0, [r5, #0]
 80050b6:	0635      	lsls	r5, r6, #24
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	d501      	bpl.n	80050c0 <_printf_i+0x1cc>
 80050bc:	6019      	str	r1, [r3, #0]
 80050be:	e002      	b.n	80050c6 <_printf_i+0x1d2>
 80050c0:	0670      	lsls	r0, r6, #25
 80050c2:	d5fb      	bpl.n	80050bc <_printf_i+0x1c8>
 80050c4:	8019      	strh	r1, [r3, #0]
 80050c6:	2300      	movs	r3, #0
 80050c8:	6123      	str	r3, [r4, #16]
 80050ca:	4615      	mov	r5, r2
 80050cc:	e7ba      	b.n	8005044 <_printf_i+0x150>
 80050ce:	682b      	ldr	r3, [r5, #0]
 80050d0:	1d1a      	adds	r2, r3, #4
 80050d2:	602a      	str	r2, [r5, #0]
 80050d4:	681d      	ldr	r5, [r3, #0]
 80050d6:	6862      	ldr	r2, [r4, #4]
 80050d8:	2100      	movs	r1, #0
 80050da:	4628      	mov	r0, r5
 80050dc:	f7fb f878 	bl	80001d0 <memchr>
 80050e0:	b108      	cbz	r0, 80050e6 <_printf_i+0x1f2>
 80050e2:	1b40      	subs	r0, r0, r5
 80050e4:	6060      	str	r0, [r4, #4]
 80050e6:	6863      	ldr	r3, [r4, #4]
 80050e8:	6123      	str	r3, [r4, #16]
 80050ea:	2300      	movs	r3, #0
 80050ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050f0:	e7a8      	b.n	8005044 <_printf_i+0x150>
 80050f2:	6923      	ldr	r3, [r4, #16]
 80050f4:	462a      	mov	r2, r5
 80050f6:	4649      	mov	r1, r9
 80050f8:	4640      	mov	r0, r8
 80050fa:	47d0      	blx	sl
 80050fc:	3001      	adds	r0, #1
 80050fe:	d0ab      	beq.n	8005058 <_printf_i+0x164>
 8005100:	6823      	ldr	r3, [r4, #0]
 8005102:	079b      	lsls	r3, r3, #30
 8005104:	d413      	bmi.n	800512e <_printf_i+0x23a>
 8005106:	68e0      	ldr	r0, [r4, #12]
 8005108:	9b03      	ldr	r3, [sp, #12]
 800510a:	4298      	cmp	r0, r3
 800510c:	bfb8      	it	lt
 800510e:	4618      	movlt	r0, r3
 8005110:	e7a4      	b.n	800505c <_printf_i+0x168>
 8005112:	2301      	movs	r3, #1
 8005114:	4632      	mov	r2, r6
 8005116:	4649      	mov	r1, r9
 8005118:	4640      	mov	r0, r8
 800511a:	47d0      	blx	sl
 800511c:	3001      	adds	r0, #1
 800511e:	d09b      	beq.n	8005058 <_printf_i+0x164>
 8005120:	3501      	adds	r5, #1
 8005122:	68e3      	ldr	r3, [r4, #12]
 8005124:	9903      	ldr	r1, [sp, #12]
 8005126:	1a5b      	subs	r3, r3, r1
 8005128:	42ab      	cmp	r3, r5
 800512a:	dcf2      	bgt.n	8005112 <_printf_i+0x21e>
 800512c:	e7eb      	b.n	8005106 <_printf_i+0x212>
 800512e:	2500      	movs	r5, #0
 8005130:	f104 0619 	add.w	r6, r4, #25
 8005134:	e7f5      	b.n	8005122 <_printf_i+0x22e>
 8005136:	bf00      	nop
 8005138:	080053fd 	.word	0x080053fd
 800513c:	0800540e 	.word	0x0800540e

08005140 <_sbrk_r>:
 8005140:	b538      	push	{r3, r4, r5, lr}
 8005142:	4d06      	ldr	r5, [pc, #24]	; (800515c <_sbrk_r+0x1c>)
 8005144:	2300      	movs	r3, #0
 8005146:	4604      	mov	r4, r0
 8005148:	4608      	mov	r0, r1
 800514a:	602b      	str	r3, [r5, #0]
 800514c:	f000 f8c0 	bl	80052d0 <_sbrk>
 8005150:	1c43      	adds	r3, r0, #1
 8005152:	d102      	bne.n	800515a <_sbrk_r+0x1a>
 8005154:	682b      	ldr	r3, [r5, #0]
 8005156:	b103      	cbz	r3, 800515a <_sbrk_r+0x1a>
 8005158:	6023      	str	r3, [r4, #0]
 800515a:	bd38      	pop	{r3, r4, r5, pc}
 800515c:	20012ec4 	.word	0x20012ec4

08005160 <__sread>:
 8005160:	b510      	push	{r4, lr}
 8005162:	460c      	mov	r4, r1
 8005164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005168:	f000 f8a0 	bl	80052ac <_read_r>
 800516c:	2800      	cmp	r0, #0
 800516e:	bfab      	itete	ge
 8005170:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005172:	89a3      	ldrhlt	r3, [r4, #12]
 8005174:	181b      	addge	r3, r3, r0
 8005176:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800517a:	bfac      	ite	ge
 800517c:	6563      	strge	r3, [r4, #84]	; 0x54
 800517e:	81a3      	strhlt	r3, [r4, #12]
 8005180:	bd10      	pop	{r4, pc}

08005182 <__swrite>:
 8005182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005186:	461f      	mov	r7, r3
 8005188:	898b      	ldrh	r3, [r1, #12]
 800518a:	05db      	lsls	r3, r3, #23
 800518c:	4605      	mov	r5, r0
 800518e:	460c      	mov	r4, r1
 8005190:	4616      	mov	r6, r2
 8005192:	d505      	bpl.n	80051a0 <__swrite+0x1e>
 8005194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005198:	2302      	movs	r3, #2
 800519a:	2200      	movs	r2, #0
 800519c:	f000 f868 	bl	8005270 <_lseek_r>
 80051a0:	89a3      	ldrh	r3, [r4, #12]
 80051a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051aa:	81a3      	strh	r3, [r4, #12]
 80051ac:	4632      	mov	r2, r6
 80051ae:	463b      	mov	r3, r7
 80051b0:	4628      	mov	r0, r5
 80051b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051b6:	f000 b817 	b.w	80051e8 <_write_r>

080051ba <__sseek>:
 80051ba:	b510      	push	{r4, lr}
 80051bc:	460c      	mov	r4, r1
 80051be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051c2:	f000 f855 	bl	8005270 <_lseek_r>
 80051c6:	1c43      	adds	r3, r0, #1
 80051c8:	89a3      	ldrh	r3, [r4, #12]
 80051ca:	bf15      	itete	ne
 80051cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80051ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80051d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80051d6:	81a3      	strheq	r3, [r4, #12]
 80051d8:	bf18      	it	ne
 80051da:	81a3      	strhne	r3, [r4, #12]
 80051dc:	bd10      	pop	{r4, pc}

080051de <__sclose>:
 80051de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051e2:	f000 b813 	b.w	800520c <_close_r>
	...

080051e8 <_write_r>:
 80051e8:	b538      	push	{r3, r4, r5, lr}
 80051ea:	4d07      	ldr	r5, [pc, #28]	; (8005208 <_write_r+0x20>)
 80051ec:	4604      	mov	r4, r0
 80051ee:	4608      	mov	r0, r1
 80051f0:	4611      	mov	r1, r2
 80051f2:	2200      	movs	r2, #0
 80051f4:	602a      	str	r2, [r5, #0]
 80051f6:	461a      	mov	r2, r3
 80051f8:	f7fb fbbb 	bl	8000972 <_write>
 80051fc:	1c43      	adds	r3, r0, #1
 80051fe:	d102      	bne.n	8005206 <_write_r+0x1e>
 8005200:	682b      	ldr	r3, [r5, #0]
 8005202:	b103      	cbz	r3, 8005206 <_write_r+0x1e>
 8005204:	6023      	str	r3, [r4, #0]
 8005206:	bd38      	pop	{r3, r4, r5, pc}
 8005208:	20012ec4 	.word	0x20012ec4

0800520c <_close_r>:
 800520c:	b538      	push	{r3, r4, r5, lr}
 800520e:	4d06      	ldr	r5, [pc, #24]	; (8005228 <_close_r+0x1c>)
 8005210:	2300      	movs	r3, #0
 8005212:	4604      	mov	r4, r0
 8005214:	4608      	mov	r0, r1
 8005216:	602b      	str	r3, [r5, #0]
 8005218:	f7fb fbc7 	bl	80009aa <_close>
 800521c:	1c43      	adds	r3, r0, #1
 800521e:	d102      	bne.n	8005226 <_close_r+0x1a>
 8005220:	682b      	ldr	r3, [r5, #0]
 8005222:	b103      	cbz	r3, 8005226 <_close_r+0x1a>
 8005224:	6023      	str	r3, [r4, #0]
 8005226:	bd38      	pop	{r3, r4, r5, pc}
 8005228:	20012ec4 	.word	0x20012ec4

0800522c <_fstat_r>:
 800522c:	b538      	push	{r3, r4, r5, lr}
 800522e:	4d07      	ldr	r5, [pc, #28]	; (800524c <_fstat_r+0x20>)
 8005230:	2300      	movs	r3, #0
 8005232:	4604      	mov	r4, r0
 8005234:	4608      	mov	r0, r1
 8005236:	4611      	mov	r1, r2
 8005238:	602b      	str	r3, [r5, #0]
 800523a:	f7fb fbc2 	bl	80009c2 <_fstat>
 800523e:	1c43      	adds	r3, r0, #1
 8005240:	d102      	bne.n	8005248 <_fstat_r+0x1c>
 8005242:	682b      	ldr	r3, [r5, #0]
 8005244:	b103      	cbz	r3, 8005248 <_fstat_r+0x1c>
 8005246:	6023      	str	r3, [r4, #0]
 8005248:	bd38      	pop	{r3, r4, r5, pc}
 800524a:	bf00      	nop
 800524c:	20012ec4 	.word	0x20012ec4

08005250 <_isatty_r>:
 8005250:	b538      	push	{r3, r4, r5, lr}
 8005252:	4d06      	ldr	r5, [pc, #24]	; (800526c <_isatty_r+0x1c>)
 8005254:	2300      	movs	r3, #0
 8005256:	4604      	mov	r4, r0
 8005258:	4608      	mov	r0, r1
 800525a:	602b      	str	r3, [r5, #0]
 800525c:	f7fb fbc1 	bl	80009e2 <_isatty>
 8005260:	1c43      	adds	r3, r0, #1
 8005262:	d102      	bne.n	800526a <_isatty_r+0x1a>
 8005264:	682b      	ldr	r3, [r5, #0]
 8005266:	b103      	cbz	r3, 800526a <_isatty_r+0x1a>
 8005268:	6023      	str	r3, [r4, #0]
 800526a:	bd38      	pop	{r3, r4, r5, pc}
 800526c:	20012ec4 	.word	0x20012ec4

08005270 <_lseek_r>:
 8005270:	b538      	push	{r3, r4, r5, lr}
 8005272:	4d07      	ldr	r5, [pc, #28]	; (8005290 <_lseek_r+0x20>)
 8005274:	4604      	mov	r4, r0
 8005276:	4608      	mov	r0, r1
 8005278:	4611      	mov	r1, r2
 800527a:	2200      	movs	r2, #0
 800527c:	602a      	str	r2, [r5, #0]
 800527e:	461a      	mov	r2, r3
 8005280:	f7fb fbba 	bl	80009f8 <_lseek>
 8005284:	1c43      	adds	r3, r0, #1
 8005286:	d102      	bne.n	800528e <_lseek_r+0x1e>
 8005288:	682b      	ldr	r3, [r5, #0]
 800528a:	b103      	cbz	r3, 800528e <_lseek_r+0x1e>
 800528c:	6023      	str	r3, [r4, #0]
 800528e:	bd38      	pop	{r3, r4, r5, pc}
 8005290:	20012ec4 	.word	0x20012ec4

08005294 <__malloc_lock>:
 8005294:	4801      	ldr	r0, [pc, #4]	; (800529c <__malloc_lock+0x8>)
 8005296:	f7ff bb1d 	b.w	80048d4 <__retarget_lock_acquire_recursive>
 800529a:	bf00      	nop
 800529c:	20012eb8 	.word	0x20012eb8

080052a0 <__malloc_unlock>:
 80052a0:	4801      	ldr	r0, [pc, #4]	; (80052a8 <__malloc_unlock+0x8>)
 80052a2:	f7ff bb18 	b.w	80048d6 <__retarget_lock_release_recursive>
 80052a6:	bf00      	nop
 80052a8:	20012eb8 	.word	0x20012eb8

080052ac <_read_r>:
 80052ac:	b538      	push	{r3, r4, r5, lr}
 80052ae:	4d07      	ldr	r5, [pc, #28]	; (80052cc <_read_r+0x20>)
 80052b0:	4604      	mov	r4, r0
 80052b2:	4608      	mov	r0, r1
 80052b4:	4611      	mov	r1, r2
 80052b6:	2200      	movs	r2, #0
 80052b8:	602a      	str	r2, [r5, #0]
 80052ba:	461a      	mov	r2, r3
 80052bc:	f7fb fb3c 	bl	8000938 <_read>
 80052c0:	1c43      	adds	r3, r0, #1
 80052c2:	d102      	bne.n	80052ca <_read_r+0x1e>
 80052c4:	682b      	ldr	r3, [r5, #0]
 80052c6:	b103      	cbz	r3, 80052ca <_read_r+0x1e>
 80052c8:	6023      	str	r3, [r4, #0]
 80052ca:	bd38      	pop	{r3, r4, r5, pc}
 80052cc:	20012ec4 	.word	0x20012ec4

080052d0 <_sbrk>:
 80052d0:	4a04      	ldr	r2, [pc, #16]	; (80052e4 <_sbrk+0x14>)
 80052d2:	6811      	ldr	r1, [r2, #0]
 80052d4:	4603      	mov	r3, r0
 80052d6:	b909      	cbnz	r1, 80052dc <_sbrk+0xc>
 80052d8:	4903      	ldr	r1, [pc, #12]	; (80052e8 <_sbrk+0x18>)
 80052da:	6011      	str	r1, [r2, #0]
 80052dc:	6810      	ldr	r0, [r2, #0]
 80052de:	4403      	add	r3, r0
 80052e0:	6013      	str	r3, [r2, #0]
 80052e2:	4770      	bx	lr
 80052e4:	20012ec8 	.word	0x20012ec8
 80052e8:	20012ed0 	.word	0x20012ed0

080052ec <_init>:
 80052ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ee:	bf00      	nop
 80052f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052f2:	bc08      	pop	{r3}
 80052f4:	469e      	mov	lr, r3
 80052f6:	4770      	bx	lr

080052f8 <_fini>:
 80052f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052fa:	bf00      	nop
 80052fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052fe:	bc08      	pop	{r3}
 8005300:	469e      	mov	lr, r3
 8005302:	4770      	bx	lr
